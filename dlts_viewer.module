<?php

// https://api.drupal.org/api/examples/batch_example!batch_example.module/7

/**
 * @file
 * DLTS Viewer module
 */

/**
 * Load MongoDB helper
 */
include_once 'inc/mongodb.inc';

/**
 * Include wildcard loaders
 */
include_once 'inc/loaders.inc';

/**
 * Include hook_menu and all the module routes
 */
include_once 'inc/routes.inc';

/**
 * Include types
 */
include_once 'inc/types.inc';

/**
 * Include Views hooks and Views helpers (all things Views (module))
 */
include_once 'inc/views.inc';

/**
 * Include datasource helpers
 */
include_once 'inc/datasource.inc';

/**
 * Include helpers and others
 */
include_once 'inc/utils.inc';

/**
 * Include theme functions and hook_theme
 */
include_once 'inc/themes.inc';


function dlts_viewer_init() {
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
}

/**
 * Implementation of hook_theme().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_theme/7
 */
function dlts_viewer_custom_theme() {
    if (arg(0) == 'books' || arg(0) == 'photos' || arg(0) == 'maps') {
        return 'tao';
    }
}

/**
 * Implements hook_menu().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 */

/**
 * Implements hook_permission().
 */
function dlts_viewer_permission() {
  return array(
    'administer fileserver' => array(
      'title' => t('administer fileserver'),
      'description' => t('Administer the settings for the fileServer.'),
    ),
  ) ;
}

/**
 * Implements hook_entity_info_alter().
 * https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_entity_info_alter/7
 */
function dlts_viewer_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['metadata'] = array(
    'label' => t('Metadata List'),
    'custom settings' => TRUE,
 );
}

/**
 * Implements template_preprocess_html
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_html/7
 */
function dlts_viewer_preprocess_html(&$vars) {
    /** The Viewer sets language direction in the markup */
    $vars['language_dir'] = dlts_viewer_viewer_language($vars);
    /**
     * The X-Frame-Options HTTP response header can be used to indicate whether or not a
     * browser should be allowed to render a page in a <frame>, <iframe> or <object> .
     * Sites can use this to avoid clickjacking attacks, by ensuring that their content is
     * not embedded into other sites.
     *
     * The added security is only provided if the user accessing the document is using a
     * browser supporting X-Frame-Options.
     *
     * As of Drupal 7.50, Drupal core sets X-Frame-Options by default to prevent the site
     * from being embedded in an iframe on another domain. We want our sites to be
     * embedded; we need to remove this header.
     *
     * See: https://www.drupal.org/node/2735873
     * See: https://www.owasp.org/index.php/Clickjacking
     * See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
     *
     */
    header_remove('X-Frame-Options');
    /** default Viewer HTML template */
    $vars['theme_hook_suggestions'][] = 'html__viewer';
    /** Check if this is a PJAX request */
    if (dlts_viewer_is_pjax()) {
        /** default Viewer PJAX HTML template */
        $vars['theme_hook_suggestions'][] = 'html__viewer_pjax';
    }

    $vars['classes_array'][] = 'yui3-skin-sam';

    /**
     * We use Drupal to render objects from MongoDB that don't have a record register
     * in Drupal's database. We don't want Drupal to manage this records. We need a
     * way to "HOOK" in different stages when the objects it's being render. In this
     * case we want to allowed changes to hook_preprocess_html
     */
    $call_suggestion = array_shift($vars['theme_hook_suggestions']);
    if ($call_suggestion) {
        $call_suggestion = str_replace('html__', '', $call_suggestion);
        $function_to_call = __FUNCTION__ . '_' . $call_suggestion;
        if (function_exists($function_to_call)) {
            $function_to_call($vars);
        }
    }
}


/**
 * Implements hook_process_HOOK
 * https://api.drupal.org/api/drupal/modules%21system%21theme.api.php/function/hook_process_HOOK/7.x
 */
function dlts_viewer_process_node(&$vars) {
    $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
    /** Call hook_process_node_TYPE if exist */
    if (function_exists($function_to_call)) {
        $function_to_call($vars);
    }
}

/**
 * Implements template_preprocess_node().
 * https://api.drupal.org/api/drupal/modules%21node%21node.module/function/template_preprocess_node/7
 */
function dlts_viewer_preprocess_node(&$vars) {
    $function_to_call = __FUNCTION__ . '_' . $vars['node']->type;
    /** Call hook_process_node_TYPE if exist */
    if (function_exists($function_to_call)) {
        $function_to_call($vars);
    }
}


/**
 * Implements template_preprocess_page
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_preprocess_page/7
 */
function dlts_viewer_preprocess_page(&$vars) {
  $vars['language_dir'] = dlts_viewer_viewer_language($vars);
  if (dlts_viewer_is_pjax()) {
    $vars['theme_hook_suggestions'][] = 'page__books_pjax';
  }
}

/**
 * Implements template_process_page().
 * https://api.drupal.org/api/drupal/includes%21theme.inc/function/template_process_page/7
 */
function dlts_viewer_process_page(&$vars) {
    $is_embed = dlts_viewer_is_embed();

    $is_pjax = dlts_viewer_is_pjax();

    $vars['theme_hook_suggestions'][] = 'page__viewer';

    $vars['language_dir'] = dlts_viewer_viewer_language($vars);

    $vars['is_embed'] = $is_embed;

    if ($is_pjax) {
        $vars['theme_hook_suggestions'][] = 'page__viewer_pjax';
    }

    // check if this is a embed request. Don't show title if is embeded
    if (!$is_embed) {
        $top_options = array(
            'is_admin' => $vars['is_admin'],
            'tabs' => render($vars['tabs']),
            'messages' => $vars['messages'],
            'title' => $vars['title'],
            'action_links' => render($vars['action_links']),
            'title_prefix' => render($vars['title_prefix']),
            'title_suffix' => render($vars['title_suffix']),
            'help' => render($vars['page']['help']),
        );
        $vars['top'] = theme('dlts_viewer_top', $top_options);
    }

}


/**
 * Implements hook_stream_wrappers().
 *
 * hook_stream_wrappers() is Drupal's way of exposing the class that PHP will
 * use to provide a new stream wrapper class. In this case, we'll expose the
 * 'fileserver' scheme, e.g., "fileserver://example/example.txt"
 *
 * @see FileFilesServerStreamWrapper
 */
function dlts_viewer_stream_wrappers() {
  $wrappers = array(
    'fileserver' => array(
      'name' => t('Fileserver StreamWrapper'),
      'class' => 'FileFilesServerStreamWrapper',
      'description' => t('Access file from the FileServer.'),
      'type' => STREAM_WRAPPERS_WRITE_VISIBLE,
    ),
  ) ;
  return $wrappers ;
}

function dlts_viewer_metadata_display($node) {
	return node_view($node, 'metadata', $node->language);
}

/**
 * Implements hook_flush_caches().
 *
 * Using this as a way to get certain phrases into the t() workflow, that don't
 * seem to otherwise make it. To get these items to show up in the Translate
 * interface, go to a different language and in the Drupal admin clear the
 * Drupal cache. (ie, at /admin/config/development/performance
 */
function dlts_viewer_flush_caches() {
	// Translatables
	// Included for use with string extractors like potx.
	t('Author');
	t('Place of publication');
	t('Publisher');
	t('Date of Publication');
	t('Subject');
	t('Collection');
	t('Language');
	t('Provider');
	t('Permanent link');
	t('PDF');
	t('High resolution');
	t('Low resolution');
	t('Vol.');
}


function dlts_viewer_theme_field($variables) {
	$dir = dlts_viewer_viewer_language((array)$variables['element']['#object']);
	$output = '';
	// Render the label, if it's not hidden.
	if (!$variables['label_hidden']) {
		$lang_language = $variables['element']['#object']->language;
		$label = locale($variables['label'], NULL, $lang_language);
		$output .= '<div dir="'. $dir .'" class="field-label"' . $variables['title_attributes'] . '>' . $label . ':&nbsp;</div>';
	}
	// Render the items.
	$output .= '<div dir="'. $dir .'" class="field-items"' . $variables['content_attributes'] . '>';
	foreach ($variables['items'] as $delta => $item) {
		$classes = 'field-item ' . ($delta % 2 ? 'odd' : 'even');
		$output .= '<div dir="'. $dir .'" class="' . $classes . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</div>';
	}
	$output .= '</div>';
	// Render the top-level DIV.
	$output = '<div dir="'. $dir .'" class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</div>';
	return $output;
}

// here we need to make sure we delete the record from Apache Solr
function dlts_viewer_node_delete($node) {
  $records = db_query("SELECT document from {dlts_viewer_books_json} WHERE nid = :nid", array(":nid" => $node->nid));
  foreach ($records as $record) {
    if (file_exists($record->document)) {
      file_unmanaged_delete($record->document);
    }
  }
  db_delete('dlts_viewer_books_json')->condition('nid', $node->nid)->execute();
}


//function dlts_viewer_cron_queue_info() {}

/**
 * http://api.drupal.org/api/drupal/modules--aggregator--aggregator.module/function/aggregator_cron/7
 */
//function dlts_viewer_cron() {}

/**
 * http://api.drupal.org/api/drupal/modules--system--system.queue.inc/group/queue/7
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_cron_queue_info/7
 */
//function dlts_viewer_document_processor() {
  // drupal_set_message(t('dlts_solr_cron_queue_info'));
  // $queue = DrupalQueue::get('dlts_book_ocr_text');
  // $queue->createQueue();  // There is no harm in trying to recreate existing.
  // $items = array();
  // while ($item = $queue->claimItem() ) {
  //   $items[] = $item;
  // }
  // foreach ($items as $item) {
  //   $queue->releaseItem($item);
	// }
//}
