!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=3)}([function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,$,fullScreenApi;function OpenSeadragon(e){return new OpenSeadragon.Viewer(e)}!function(e){e.version={versionStr:"2.3.1",major:parseInt("2",10),minor:parseInt("3",10),revision:parseInt("1",10)};var t,n={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"},i=Object.prototype.toString,r=Object.prototype.hasOwnProperty;e.isFunction=function(t){return"function"===e.type(t)},e.isArray=Array.isArray||function(t){return"array"===e.type(t)},e.isWindow=function(e){return e&&"object"==typeof e&&"setInterval"in e},e.type=function(e){return null===e||void 0===e?String(e):n[i.call(e)]||"object"},e.isPlainObject=function(t){if(!t||"object"!==OpenSeadragon.type(t)||t.nodeType||e.isWindow(t))return!1;if(t.constructor&&!r.call(t,"constructor")&&!r.call(t.constructor.prototype,"isPrototypeOf"))return!1;var n;for(var i in t)n=i;return void 0===n||r.call(t,n)},e.isEmptyObject=function(e){for(var t in e)return!1;return!0},e.freezeObject=function(t){return Object.freeze?e.freezeObject=Object.freeze:e.freezeObject=function(e){return e},e.freezeObject(t)},e.supportsCanvas=(t=document.createElement("canvas"),!(!e.isFunction(t.getContext)||!t.getContext("2d"))),e.isCanvasTainted=function(e){var t=!1;try{e.getContext("2d").getImageData(0,0,1,1)}catch(e){t=!0}return t},e.pixelDensityRatio=function(){if(e.supportsCanvas){var t=document.createElement("canvas").getContext("2d"),n=window.devicePixelRatio||1,i=t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1;return Math.max(n,1)/i}return 1}()}(OpenSeadragon),function($){$.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=arguments.length,l=!1,u=1;for("boolean"==typeof s&&(l=s,s=arguments[1]||{},u=2),"object"==typeof s||OpenSeadragon.isFunction(s)||(s={}),a===u&&(s=this,--u);u<a;u++)if(null!==(e=arguments[u])||void 0!==e)for(t in e)n=s[t],s!==(i=e[t])&&(l&&i&&(OpenSeadragon.isPlainObject(i)||(r=OpenSeadragon.isArray(i)))?(r?(r=!1,o=n&&OpenSeadragon.isArray(n)?n:[]):o=n&&OpenSeadragon.isPlainObject(n)?n:{},s[t]=OpenSeadragon.extend(l,o,i)):void 0!==i&&(s[t]=i));return s};var isIOSDevice=function(){if("object"!=typeof navigator)return!1;var e=navigator.userAgent;return"string"==typeof e&&(-1!==e.indexOf("iPhone")||-1!==e.indexOf("iPad")||-1!==e.indexOf("iPod"))};$.extend($,{DEFAULT_SETTINGS:{xmlPath:null,tileSources:null,tileHost:null,initialPage:0,crossOriginPolicy:!1,ajaxWithCredentials:!1,loadTilesWithAjax:!1,ajaxHeaders:{},panHorizontal:!0,panVertical:!0,constrainDuringPan:!1,wrapHorizontal:!1,wrapVertical:!1,visibilityRatio:.5,minPixelRatio:.5,defaultZoomLevel:0,minZoomLevel:null,maxZoomLevel:null,homeFillsViewer:!1,clickTimeThreshold:300,clickDistThreshold:5,dblClickTimeThreshold:300,dblClickDistThreshold:20,springStiffness:6.5,animationTime:1.2,gestureSettingsMouse:{scrollToZoom:!0,clickToZoom:!0,dblClickToZoom:!1,pinchToZoom:!1,flickEnabled:!1,flickMinSpeed:120,flickMomentum:.25,pinchRotate:!1},gestureSettingsTouch:{scrollToZoom:!1,clickToZoom:!1,dblClickToZoom:!0,pinchToZoom:!0,flickEnabled:!0,flickMinSpeed:120,flickMomentum:.25,pinchRotate:!1},gestureSettingsPen:{scrollToZoom:!1,clickToZoom:!0,dblClickToZoom:!1,pinchToZoom:!1,flickEnabled:!1,flickMinSpeed:120,flickMomentum:.25,pinchRotate:!1},gestureSettingsUnknown:{scrollToZoom:!1,clickToZoom:!1,dblClickToZoom:!0,pinchToZoom:!0,flickEnabled:!0,flickMinSpeed:120,flickMomentum:.25,pinchRotate:!1},zoomPerClick:2,zoomPerScroll:1.2,zoomPerSecond:1,blendTime:0,alwaysBlend:!1,autoHideControls:!0,immediateRender:!1,minZoomImageRatio:.9,maxZoomPixelRatio:1.1,smoothTileEdgesMinZoom:1.1,iOSDevice:isIOSDevice(),pixelsPerWheelLine:40,autoResize:!0,preserveImageSizeOnResize:!1,minScrollDeltaTime:50,showSequenceControl:!0,sequenceControlAnchor:null,preserveViewport:!1,preserveOverlays:!1,navPrevNextWrap:!1,showNavigationControl:!0,navigationControlAnchor:null,showZoomControl:!0,showHomeControl:!0,showFullPageControl:!0,showRotationControl:!1,controlsFadeDelay:2e3,controlsFadeLength:1500,mouseNavEnabled:!0,showNavigator:!1,navigatorId:null,navigatorPosition:null,navigatorSizeRatio:.2,navigatorMaintainSizeRatio:!1,navigatorTop:null,navigatorLeft:null,navigatorHeight:null,navigatorWidth:null,navigatorAutoResize:!0,navigatorAutoFade:!0,navigatorRotate:!0,degrees:0,opacity:1,preload:!1,compositeOperation:null,placeholderFillStyle:null,showReferenceStrip:!1,referenceStripScroll:"horizontal",referenceStripElement:null,referenceStripHeight:null,referenceStripWidth:null,referenceStripPosition:"BOTTOM_LEFT",referenceStripSizeRatio:.2,collectionRows:3,collectionColumns:0,collectionLayout:"horizontal",collectionMode:!1,collectionTileSize:800,collectionTileMargin:80,imageLoaderLimit:0,maxImageCacheCount:200,timeout:3e4,useCanvas:!0,prefixUrl:"/images/",navImages:{zoomIn:{REST:"zoomin_rest.png",GROUP:"zoomin_grouphover.png",HOVER:"zoomin_hover.png",DOWN:"zoomin_pressed.png"},zoomOut:{REST:"zoomout_rest.png",GROUP:"zoomout_grouphover.png",HOVER:"zoomout_hover.png",DOWN:"zoomout_pressed.png"},home:{REST:"home_rest.png",GROUP:"home_grouphover.png",HOVER:"home_hover.png",DOWN:"home_pressed.png"},fullpage:{REST:"fullpage_rest.png",GROUP:"fullpage_grouphover.png",HOVER:"fullpage_hover.png",DOWN:"fullpage_pressed.png"},rotateleft:{REST:"rotateleft_rest.png",GROUP:"rotateleft_grouphover.png",HOVER:"rotateleft_hover.png",DOWN:"rotateleft_pressed.png"},rotateright:{REST:"rotateright_rest.png",GROUP:"rotateright_grouphover.png",HOVER:"rotateright_hover.png",DOWN:"rotateright_pressed.png"},previous:{REST:"previous_rest.png",GROUP:"previous_grouphover.png",HOVER:"previous_hover.png",DOWN:"previous_pressed.png"},next:{REST:"next_rest.png",GROUP:"next_grouphover.png",HOVER:"next_hover.png",DOWN:"next_pressed.png"}},debugMode:!1,debugGridColor:["#437AB2","#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666"]},SIGNAL:"----seadragon----",delegate:function(e,t){return function(){var n=arguments;return void 0===n&&(n=[]),t.apply(e,n)}},BROWSERS:{UNKNOWN:0,IE:1,FIREFOX:2,SAFARI:3,CHROME:4,OPERA:5},getElement:function(e){return"string"==typeof e&&(e=document.getElementById(e)),e},getElementPosition:function(e){var t,n,i=new $.Point;for(n=getOffsetParent(e=$.getElement(e),t="fixed"==$.getElementStyle(e).position);n;)i.x+=e.offsetLeft,i.y+=e.offsetTop,t&&(i=i.plus($.getPageScroll())),n=getOffsetParent(e=n,t="fixed"==$.getElementStyle(e).position);return i},getElementOffset:function(e){var t,n,i=(e=$.getElement(e))&&e.ownerDocument,r={top:0,left:0};return i?(t=i.documentElement,void 0!==e.getBoundingClientRect&&(r=e.getBoundingClientRect()),n=i==i.window?i:9===i.nodeType&&(i.defaultView||i.parentWindow),new $.Point(r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0),r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0))):new $.Point},getElementSize:function(e){return e=$.getElement(e),new $.Point(e.clientWidth,e.clientHeight)},getElementStyle:document.documentElement.currentStyle?function(e){return(e=$.getElement(e)).currentStyle}:function(e){return e=$.getElement(e),window.getComputedStyle(e,"")},getCssPropertyWithVendorPrefix:function(e){var t={};return $.getCssPropertyWithVendorPrefix=function(e){if(void 0!==t[e])return t[e];var n=document.createElement("div").style,i=null;if(void 0!==n[e])i=e;else for(var r=["Webkit","Moz","MS","O","webkit","moz","ms","o"],o=$.capitalizeFirstLetter(e),s=0;s<r.length;s++){var a=r[s]+o;if(void 0!==n[a]){i=a;break}}return t[e]=i,i},$.getCssPropertyWithVendorPrefix(e)},capitalizeFirstLetter:function(e){return e.charAt(0).toUpperCase()+e.slice(1)},positiveModulo:function(e,t){var n=e%t;return n<0&&(n+=t),n},pointInElement:function(e,t){e=$.getElement(e);var n=$.getElementOffset(e),i=$.getElementSize(e);return t.x>=n.x&&t.x<n.x+i.x&&t.y<n.y+i.y&&t.y>=n.y},getEvent:function(e){return $.getEvent=e?function(e){return e}:function(){return window.event},$.getEvent(e)},getMousePosition:function(e){if("number"==typeof e.pageX)$.getMousePosition=function(e){var t=new $.Point;return e=$.getEvent(e),t.x=e.pageX,t.y=e.pageY,t};else{if("number"!=typeof e.clientX)throw new Error("Unknown event mouse position, no known technique.");$.getMousePosition=function(e){var t=new $.Point;return e=$.getEvent(e),t.x=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,t.y=e.clientY+document.body.scrollTop+document.documentElement.scrollTop,t}}return $.getMousePosition(e)},getPageScroll:function(){var e=document.documentElement||{},t=document.body||{};if("number"==typeof window.pageXOffset)$.getPageScroll=function(){return new $.Point(window.pageXOffset,window.pageYOffset)};else if(t.scrollLeft||t.scrollTop)$.getPageScroll=function(){return new $.Point(document.body.scrollLeft,document.body.scrollTop)};else{if(!e.scrollLeft&&!e.scrollTop)return new $.Point(0,0);$.getPageScroll=function(){return new $.Point(document.documentElement.scrollLeft,document.documentElement.scrollTop)}}return $.getPageScroll()},setPageScroll:function(e){if(void 0!==window.scrollTo)$.setPageScroll=function(e){window.scrollTo(e.x,e.y)};else{var t=$.getPageScroll();if(t.x===e.x&&t.y===e.y)return;document.body.scrollLeft=e.x,document.body.scrollTop=e.y;var n=$.getPageScroll();if(n.x!==t.x&&n.y!==t.y)return void($.setPageScroll=function(e){document.body.scrollLeft=e.x,document.body.scrollTop=e.y});if(document.documentElement.scrollLeft=e.x,document.documentElement.scrollTop=e.y,(n=$.getPageScroll()).x!==t.x&&n.y!==t.y)return void($.setPageScroll=function(e){document.documentElement.scrollLeft=e.x,document.documentElement.scrollTop=e.y});$.setPageScroll=function(e){}}return $.setPageScroll(e)},getWindowSize:function(){var e=document.documentElement||{},t=document.body||{};if("number"==typeof window.innerWidth)$.getWindowSize=function(){return new $.Point(window.innerWidth,window.innerHeight)};else if(e.clientWidth||e.clientHeight)$.getWindowSize=function(){return new $.Point(document.documentElement.clientWidth,document.documentElement.clientHeight)};else{if(!t.clientWidth&&!t.clientHeight)throw new Error("Unknown window size, no known technique.");$.getWindowSize=function(){return new $.Point(document.body.clientWidth,document.body.clientHeight)}}return $.getWindowSize()},makeCenteredNode:function(e){e=$.getElement(e);var t=[$.makeNeutralElement("div"),$.makeNeutralElement("div"),$.makeNeutralElement("div")];return $.extend(t[0].style,{display:"table",height:"100%",width:"100%"}),$.extend(t[1].style,{display:"table-row"}),$.extend(t[2].style,{display:"table-cell",verticalAlign:"middle",textAlign:"center"}),t[0].appendChild(t[1]),t[1].appendChild(t[2]),t[2].appendChild(e),t[0]},makeNeutralElement:function(e){var t=document.createElement(e),n=t.style;return n.background="transparent none",n.border="none",n.margin="0px",n.padding="0px",n.position="static",t},now:function(){return Date.now?$.now=Date.now:$.now=function(){return(new Date).getTime()},$.now()},makeTransparentImage:function(e){return $.makeTransparentImage=function(e){var t=$.makeNeutralElement("img");return t.src=e,t},$.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<7&&($.makeTransparentImage=function(e){var t=$.makeNeutralElement("img"),n=null;return(n=$.makeNeutralElement("span")).style.display="inline-block",t.onload=function(){n.style.width=n.style.width||t.width+"px",n.style.height=n.style.height||t.height+"px",t.onload=null,t=null},t.src=e,n.style.filter="progid:DXImageTransform.Microsoft.AlphaImageLoader(src='"+e+"', sizingMethod='scale')",n}),$.makeTransparentImage(e)},setElementOpacity:function(e,t,n){var i;e=$.getElement(e),n&&!$.Browser.alpha&&(t=Math.round(t)),$.Browser.opacity?e.style.opacity=t<1?t:"":t<1?(i="alpha(opacity="+Math.round(100*t)+")",e.style.filter=i):e.style.filter=""},setElementTouchActionNone:function(e){void 0!==(e=$.getElement(e)).style.touchAction?e.style.touchAction="none":void 0!==e.style.msTouchAction&&(e.style.msTouchAction="none")},addClass:function(e,t){(e=$.getElement(e)).className?-1===(" "+e.className+" ").indexOf(" "+t+" ")&&(e.className+=" "+t):e.className=t},indexOf:function(e,t,n){return Array.prototype.indexOf?this.indexOf=function(e,t,n){return e.indexOf(t,n)}:this.indexOf=function(e,t,n){var i,r,o=n||0;if(!e)throw new TypeError;if(0===(r=e.length)||o>=r)return-1;for(o<0&&(o=r-Math.abs(o)),i=o;i<r;i++)if(e[i]===t)return i;return-1},this.indexOf(e,t,n)},removeClass:function(e,t){var n,i,r=[];for(n=(e=$.getElement(e)).className.split(/\s+/),i=0;i<n.length;i++)n[i]&&n[i]!==t&&r.push(n[i]);e.className=r.join(" ")},addEvent:function(){if(window.addEventListener)return function(e,t,n,i){(e=$.getElement(e)).addEventListener(t,n,i)};if(window.attachEvent)return function(e,t,n,i){(e=$.getElement(e)).attachEvent("on"+t,n)};throw new Error("No known event model.")}(),removeEvent:function(){if(window.removeEventListener)return function(e,t,n,i){(e=$.getElement(e)).removeEventListener(t,n,i)};if(window.detachEvent)return function(e,t,n,i){(e=$.getElement(e)).detachEvent("on"+t,n)};throw new Error("No known event model.")}(),cancelEvent:function(e){(e=$.getEvent(e)).preventDefault?$.cancelEvent=function(e){e.preventDefault()}:$.cancelEvent=function(e){(e=$.getEvent(e)).cancel=!0,e.returnValue=!1},$.cancelEvent(e)},stopEvent:function(e){(e=$.getEvent(e)).stopPropagation?$.stopEvent=function(e){e.stopPropagation()}:$.stopEvent=function(e){(e=$.getEvent(e)).cancelBubble=!0},$.stopEvent(e)},createCallback:function(e,t){var n,i=[];for(n=2;n<arguments.length;n++)i.push(arguments[n]);return function(){var n,r=i.concat([]);for(n=0;n<arguments.length;n++)r.push(arguments[n]);return t.apply(e,r)}},getUrlParameter:function(e){var t=URLPARAMS[e];return t||null},getUrlProtocol:function(e){var t=e.match(/^([a-z]+:)\/\//i);return null===t?window.location.protocol:t[1].toLowerCase()},createAjaxRequest:function(e){var t;try{t=!!new ActiveXObject("Microsoft.XMLHTTP")}catch(e){t=!1}if(t)window.XMLHttpRequest?$.createAjaxRequest=function(e){return e?new ActiveXObject("Microsoft.XMLHTTP"):new XMLHttpRequest}:$.createAjaxRequest=function(){return new ActiveXObject("Microsoft.XMLHTTP")};else{if(!window.XMLHttpRequest)throw new Error("Browser doesn't support XMLHttpRequest.");$.createAjaxRequest=function(){return new XMLHttpRequest}}return $.createAjaxRequest(e)},makeAjaxRequest:function(e,t,n){var i,r,o;$.isPlainObject(e)&&(t=e.success,n=e.error,i=e.withCredentials,r=e.headers,o=e.responseType||null,e=e.url);var s=$.getUrlProtocol(e),a=$.createAjaxRequest("file:"===s);if(!$.isFunction(t))throw new Error("makeAjaxRequest requires a success callback");a.onreadystatechange=function(){4==a.readyState&&(a.onreadystatechange=function(){},a.status>=200&&a.status<300||0===a.status&&"http:"!==s&&"https:"!==s?t(a):($.console.log("AJAX request returned %d: %s",a.status,e),$.isFunction(n)&&n(a)))};try{if(a.open("GET",e,!0),o&&(a.responseType=o),r)for(var l in r)r.hasOwnProperty(l)&&r[l]&&a.setRequestHeader(l,r[l]);i&&(a.withCredentials=!0),a.send(null)}catch(i){var u=i.message;if($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<10&&void 0!==i.number&&-2147024891==i.number&&(u+="\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain"),$.console.log("%s while making AJAX request: %s",i.name,u),a.onreadystatechange=function(){},window.XDomainRequest){var c=new XDomainRequest;if(c){c.onload=function(e){$.isFunction(t)&&t({responseText:c.responseText,status:200,statusText:"OK"})},c.onerror=function(e){$.isFunction(n)&&n({responseText:c.responseText,status:444,statusText:"An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser."})};try{c.open("GET",e),c.send()}catch(e){$.isFunction(n)&&n(a,i)}}}else $.isFunction(n)&&n(a,i)}return a},jsonp:function(e){var t,n=e.url,i=document.head||document.getElementsByTagName("head")[0]||document.documentElement,r=e.callbackName||"openseadragon"+$.now(),o=window[r],s="$1"+r+"$2",a=e.param||"callback",l=e.callback;n=n.replace(/(\=)\?(&|$)|\?\?/i,s),n+=(/\?/.test(n)?"&":"?")+a+"="+r,window[r]=function(e){if(o)window[r]=o;else try{delete window[r]}catch(e){}l&&$.isFunction(l)&&l(e)},t=document.createElement("script"),void 0===e.async&&!1===e.async||(t.async="async"),e.scriptCharset&&(t.charset=e.scriptCharset),t.src=n,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,i&&t.parentNode&&i.removeChild(t),t=void 0)},i.insertBefore(t,i.firstChild)},createFromDZI:function(){throw"OpenSeadragon.createFromDZI is deprecated, use Viewer.open."},parseXml:function(e){if(window.DOMParser)$.parseXml=function(e){return(new DOMParser).parseFromString(e,"text/xml")};else{if(!window.ActiveXObject)throw new Error("Browser doesn't support XML DOM.");$.parseXml=function(e){var t=null;return(t=new ActiveXObject("Microsoft.XMLDOM")).async=!1,t.loadXML(e),t}}return $.parseXml(e)},parseJSON:function(string){return window.JSON&&window.JSON.parse?$.parseJSON=window.JSON.parse:$.parseJSON=function(string){return eval("("+string+")")},$.parseJSON(string)},imageFormatSupported:function(e){return!!FILEFORMATS[(e=e||"").toLowerCase()]}}),$.Browser={vendor:$.BROWSERS.UNKNOWN,version:0,alpha:!0};var FILEFORMATS={bmp:!1,jpeg:!0,jpg:!0,png:!0,tif:!1,wdp:!1},URLPARAMS={};!function(){var e=navigator.appVersion,t=navigator.userAgent;switch(navigator.appName){case"Microsoft Internet Explorer":window.attachEvent&&window.ActiveXObject&&($.Browser.vendor=$.BROWSERS.IE,$.Browser.version=parseFloat(t.substring(t.indexOf("MSIE")+5,t.indexOf(";",t.indexOf("MSIE")))));break;case"Netscape":window.addEventListener&&(t.indexOf("Firefox")>=0?($.Browser.vendor=$.BROWSERS.FIREFOX,$.Browser.version=parseFloat(t.substring(t.indexOf("Firefox")+8))):t.indexOf("Safari")>=0?($.Browser.vendor=t.indexOf("Chrome")>=0?$.BROWSERS.CHROME:$.BROWSERS.SAFARI,$.Browser.version=parseFloat(t.substring(t.substring(0,t.indexOf("Safari")).lastIndexOf("/")+1,t.indexOf("Safari")))):null!==new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})").exec(t)&&($.Browser.vendor=$.BROWSERS.IE,$.Browser.version=parseFloat(RegExp.$1)));break;case"Opera":$.Browser.vendor=$.BROWSERS.OPERA,$.Browser.version=parseFloat(e)}var n,i,r,o=window.location.search.substring(1).split("&");for(r=0;r<o.length;r++)(i=(n=o[r]).indexOf("="))>0&&(URLPARAMS[n.substring(0,i)]=decodeURIComponent(n.substring(i+1)));$.Browser.alpha=!($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<9||$.Browser.vendor==$.BROWSERS.CHROME&&$.Browser.version<2),$.Browser.opacity=!($.Browser.vendor==$.BROWSERS.IE&&$.Browser.version<9)}();var nullfunction=function(e){};function getOffsetParent(e,t){return t&&e!=document.body?document.body:e.offsetParent}$.console=window.console||{log:nullfunction,debug:nullfunction,info:nullfunction,warn:nullfunction,error:nullfunction,assert:nullfunction},function(e){var t=e.requestAnimationFrame||e.mozRequestAnimationFrame||e.webkitRequestAnimationFrame||e.msRequestAnimationFrame,n=e.cancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelAnimationFrame||e.msCancelAnimationFrame;if(t&&n)$.requestAnimationFrame=function(){return t.apply(e,arguments)},$.cancelAnimationFrame=function(){return n.apply(e,arguments)};else{var i,r=[],o=[],s=0;$.requestAnimationFrame=function(e){return r.push([++s,e]),i||(i=setInterval(function(){if(r.length){var e=$.now(),t=o;for(o=r,r=t;o.length;)o.shift()[1](e)}else clearInterval(i),i=void 0},20)),s},$.cancelAnimationFrame=function(e){var t,n;for(t=0,n=r.length;t<n;t+=1)if(r[t][0]===e)return void r.splice(t,1);for(t=0,n=o.length;t<n;t+=1)if(o[t][0]===e)return void o.splice(t,1)}}}(window)}(OpenSeadragon),__WEBPACK_AMD_DEFINE_ARRAY__=[],void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=function(){return OpenSeadragon})?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__),$=OpenSeadragon,fullScreenApi={supportsFullScreen:!1,isFullScreen:function(){return!1},getFullScreenElement:function(){return null},requestFullScreen:function(){},exitFullScreen:function(){},cancelFullScreen:function(){},fullScreenEventName:"",fullScreenErrorEventName:""},document.exitFullscreen?(fullScreenApi.supportsFullScreen=!0,fullScreenApi.getFullScreenElement=function(){return document.fullscreenElement},fullScreenApi.requestFullScreen=function(e){return e.requestFullscreen()},fullScreenApi.exitFullScreen=function(){document.exitFullscreen()},fullScreenApi.fullScreenEventName="fullscreenchange",fullScreenApi.fullScreenErrorEventName="fullscreenerror"):document.msExitFullscreen?(fullScreenApi.supportsFullScreen=!0,fullScreenApi.getFullScreenElement=function(){return document.msFullscreenElement},fullScreenApi.requestFullScreen=function(e){return e.msRequestFullscreen()},fullScreenApi.exitFullScreen=function(){document.msExitFullscreen()},fullScreenApi.fullScreenEventName="MSFullscreenChange",fullScreenApi.fullScreenErrorEventName="MSFullscreenError"):document.webkitExitFullscreen?(fullScreenApi.supportsFullScreen=!0,fullScreenApi.getFullScreenElement=function(){return document.webkitFullscreenElement},fullScreenApi.requestFullScreen=function(e){return e.webkitRequestFullscreen()},fullScreenApi.exitFullScreen=function(){document.webkitExitFullscreen()},fullScreenApi.fullScreenEventName="webkitfullscreenchange",fullScreenApi.fullScreenErrorEventName="webkitfullscreenerror"):document.webkitCancelFullScreen?(fullScreenApi.supportsFullScreen=!0,fullScreenApi.getFullScreenElement=function(){return document.webkitCurrentFullScreenElement},fullScreenApi.requestFullScreen=function(e){return e.webkitRequestFullScreen()},fullScreenApi.exitFullScreen=function(){document.webkitCancelFullScreen()},fullScreenApi.fullScreenEventName="webkitfullscreenchange",fullScreenApi.fullScreenErrorEventName="webkitfullscreenerror"):document.mozCancelFullScreen&&(fullScreenApi.supportsFullScreen=!0,fullScreenApi.getFullScreenElement=function(){return document.mozFullScreenElement},fullScreenApi.requestFullScreen=function(e){return e.mozRequestFullScreen()},fullScreenApi.exitFullScreen=function(){document.mozCancelFullScreen()},fullScreenApi.fullScreenEventName="mozfullscreenchange",fullScreenApi.fullScreenErrorEventName="mozfullscreenerror"),fullScreenApi.isFullScreen=function(){return null!==fullScreenApi.getFullScreenElement()},fullScreenApi.cancelFullScreen=function(){$.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead."),fullScreenApi.exitFullScreen()},$.extend($,fullScreenApi),function(e){e.EventSource=function(){this.events={}},e.EventSource.prototype={addOnceHandler:function(e,t,n,i){var r=this;i=i||1;var o=0,s=function(n){++o===i&&r.removeHandler(e,s),t(n)};this.addHandler(e,s,n)},addHandler:function(t,n,i){var r=this.events[t];r||(this.events[t]=r=[]),n&&e.isFunction(n)&&(r[r.length]={handler:n,userData:i||null})},removeHandler:function(t,n){var i,r=this.events[t],o=[];if(r&&e.isArray(r)){for(i=0;i<r.length;i++)r[i].handler!==n&&o.push(r[i]);this.events[t]=o}},removeAllHandlers:function(e){if(e)this.events[e]=[];else for(var t in this.events)this.events[t]=[]},getHandler:function(e){var t=this.events[e];return t&&t.length?(t=1===t.length?[t[0]]:Array.apply(null,t),function(e,n){var i,r=t.length;for(i=0;i<r;i++)t[i]&&(n.eventSource=e,n.userData=t[i].userData,t[i].handler(n))}):null},raiseEvent:function(e,t){var n=this.getHandler(e);n&&(t||(t={}),n(this,t))}}}(OpenSeadragon),function(e){var t,n,i,r,o,s,a=[],l={};function u(t){var n,i=l[t.hash],r=i.activePointersLists.length;for(n=0;n<r;n++)i.activePointersLists[n].captureCount>0&&(e.removeEvent(e.MouseTracker.captureElement,"mousemove",i.mousemovecaptured,!0),e.removeEvent(e.MouseTracker.captureElement,"mouseup",i.mouseupcaptured,!0),e.removeEvent(e.MouseTracker.captureElement,e.MouseTracker.unprefixedPointerEvents?"pointermove":"MSPointerMove",i.pointermovecaptured,!0),e.removeEvent(e.MouseTracker.captureElement,e.MouseTracker.unprefixedPointerEvents?"pointerup":"MSPointerUp",i.pointerupcaptured,!0),e.removeEvent(e.MouseTracker.captureElement,"touchmove",i.touchmovecaptured,!0),e.removeEvent(e.MouseTracker.captureElement,"touchend",i.touchendcaptured,!0),i.activePointersLists[n].captureCount=0);for(n=0;n<r;n++)i.activePointersLists.pop()}function c(t){var n,i,r=l[t.hash];if(r.tracking){for(i=0;i<e.MouseTracker.subscribeEvents.length;i++)n=e.MouseTracker.subscribeEvents[i],e.removeEvent(t.element,n,r[n],!1);u(t),r.tracking=!1}}function h(t,n){var i=l[t.hash];if("pointerevent"===n)return{upName:e.MouseTracker.unprefixedPointerEvents?"pointerup":"MSPointerUp",upHandler:i.pointerupcaptured,moveName:e.MouseTracker.unprefixedPointerEvents?"pointermove":"MSPointerMove",moveHandler:i.pointermovecaptured};if("mouse"===n)return{upName:"mouseup",upHandler:i.mouseupcaptured,moveName:"mousemove",moveHandler:i.mousemovecaptured};if("touch"===n)return{upName:"touchend",upHandler:i.touchendcaptured,moveName:"touchmove",moveHandler:i.touchmovecaptured};throw new Error("MouseTracker.getCaptureEventParams: Unknown pointer type.")}function d(t,n,i){var r,o=t.getActivePointersListByType(n);o.captureCount+=i||1,1===o.captureCount&&(e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?t.element.setCapture(!0):(r=h(t,e.MouseTracker.havePointerEvents?"pointerevent":n),$&&V(window.top)&&e.addEvent(window.top,r.upName,r.upHandler,!0),e.addEvent(e.MouseTracker.captureElement,r.upName,r.upHandler,!0),e.addEvent(e.MouseTracker.captureElement,r.moveName,r.moveHandler,!0)))}function p(t,n,i){var r,o=t.getActivePointersListByType(n);o.captureCount-=i||1,0===o.captureCount&&(e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?t.element.releaseCapture():(r=h(t,e.MouseTracker.havePointerEvents?"pointerevent":n),$&&V(window.top)&&e.removeEvent(window.top,r.upName,r.upHandler,!0),e.removeEvent(e.MouseTracker.captureElement,r.moveName,r.moveHandler,!0),e.removeEvent(e.MouseTracker.captureElement,r.upName,r.upHandler,!0)))}function f(t){var n;if(e.MouseTracker.unprefixedPointerEvents)n=t.pointerType;else switch(t.pointerType){case 2:n="touch";break;case 3:n="pen";break;case 4:n="mouse";break;default:n=""}return n}function g(t){return e.getMousePosition(t)}function m(e,t){return v(g(e),t)}function v(t,n){var i=e.getElementOffset(n);return t.minus(i)}function y(t,n){return new e.Point((t.x+n.x)/2,(t.y+n.y)/2)}function w(t,n){var i={target:(n=e.getEvent(n)).target||n.srcElement,type:"wheel",shiftKey:n.shiftKey||!1,clientX:n.clientX,clientY:n.clientY,pageX:n.pageX?n.pageX:n.clientX,pageY:n.pageY?n.pageY:n.clientY,deltaMode:"MozMousePixelScroll"==n.type?0:1,deltaX:0,deltaZ:0};"mousewheel"==e.MouseTracker.wheelEventName?i.deltaY=-n.wheelDelta/e.DEFAULT_SETTINGS.pixelsPerWheelLine:i.deltaY=n.detail,x(t,i,n)}function x(t,n,i){var r;r=n.deltaY<0?1:-1,t.scrollHandler&&!1===t.scrollHandler({eventSource:t,pointerType:"mouse",position:m(n,t.element),scroll:r,shift:n.shiftKey,isTouchEvent:!1,originalEvent:i,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(i)}function T(e,t){if(e===t)return!1;for(;t&&t!==e;)t=t.parentNode;return t===e}function _(t,n){F(t,n,[{id:e.MouseTracker.mousePointerId,type:"mouse",isPrimary:!0,currentPos:g(n),currentTime:e.now()}])}function S(t,n){j(t,n,[{id:e.MouseTracker.mousePointerId,type:"mouse",isPrimary:!0,currentPos:g(n),currentTime:e.now()}])}function b(t){return e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?1===t?0:2===t?2:4===t?1:-1:t}function E(t,n){q(t,n=e.getEvent(n),[{id:e.MouseTracker.mousePointerId,type:"mouse",isPrimary:!0,currentPos:g(n),currentTime:e.now()}],b(n.button))&&p(t,"mouse")}function P(t,n){U(t,n=e.getEvent(n),[{id:e.MouseTracker.mousePointerId,type:"mouse",isPrimary:!0,currentPos:g(n),currentTime:e.now()}])}function C(e,t,n){var i,r=n.getLength(),o=[];if("touch"===n.type||n.contacts>0){for(i=0;i<r;i++)o.push(n.getByIndex(i));o.length>0&&(q(e,t,o,0),n.captureCount=1,p(e,n.type),j(e,t,o))}}function R(t,n){var i,r,o,s,l=n.changedTouches.length,u=[];for(i=e.now(),r=0;r<l;r++)u.push({id:n.changedTouches[r].identifier,type:"touch",currentPos:g(n.changedTouches[r]),currentTime:i});for(q(t,n,u,0)&&p(t,"touch",l),j(t,n,u),r=0;r<a.length;r++)if(a[r]!==t&&a[r].isTracking()&&T(a[r].element,t.element)){for(s=[],o=0;o<l;o++)s.push({id:n.changedTouches[o].identifier,type:"touch",currentPos:g(n.changedTouches[o]),currentTime:i});j(a[r],n,s)}e.cancelEvent(n)}function k(t,n){var i,r=n.changedTouches.length,o=[];for(i=0;i<r;i++)o.push({id:n.changedTouches[i].identifier,type:"touch",currentPos:g(n.changedTouches[i]),currentTime:e.now()});U(t,n,o),e.cancelEvent(n)}function O(t,n){n.currentTarget===n.relatedTarget||T(n.currentTarget,n.relatedTarget)||F(t,n,[{id:n.pointerId,type:f(n),isPrimary:n.isPrimary,currentPos:g(n),currentTime:e.now()}])}function D(t,n){n.currentTarget===n.relatedTarget||T(n.currentTarget,n.relatedTarget)||j(t,n,[{id:n.pointerId,type:f(n),isPrimary:n.isPrimary,currentPos:g(n),currentTime:e.now()}])}function I(t,n){var i;W(t,n,[i={id:n.pointerId,type:f(n),isPrimary:n.isPrimary,currentPos:g(n),currentTime:e.now()}],n.button)&&(e.stopEvent(n),d(t,i.type)),(t.clickHandler||t.dblClickHandler||t.pressHandler||t.dragHandler||t.dragEndHandler||t.pinchHandler)&&e.cancelEvent(n)}function A(e,t){L(e,t)}function L(t,n){var i;q(t,n,[i={id:n.pointerId,type:f(n),isPrimary:n.isPrimary,currentPos:g(n),currentTime:e.now()}],n.button)&&p(t,i.type)}function B(e,t){M(e,t)}function M(t,n){U(t,n,[{id:n.pointerId,type:f(n),isPrimary:n.isPrimary,currentPos:g(n),currentTime:e.now()}])}function N(e,t){!function(e,t,n){q(e,t,n,0),j(e,t,n)}(e,t,[{id:t.pointerId,type:f(t)}])}function H(e,t){return t.hasOwnProperty("isPrimary")||(0===e.getLength()?t.isPrimary=!0:t.isPrimary=!1),t.speed=0,t.direction=0,t.contactPos=t.currentPos,t.contactTime=t.currentTime,t.lastPos=t.currentPos,t.lastTime=t.currentTime,e.add(t)}function z(e,t){var n,i;return e.getById(t.id)?(n=e.removeById(t.id),t.hasOwnProperty("isPrimary")||(i=e.getPrimary())||(i=e.getByIndex(0))&&(i.isPrimary=!0)):n=e.getLength(),n}function F(t,n,i){var r,o,s,a=t.getActivePointersListByType(i[0].type),l=i.length;for(r=0;r<l;r++)o=i[r],(s=a.getById(o.id))?(s.insideElement=!0,s.lastPos=s.currentPos,s.lastTime=s.currentTime,s.currentPos=o.currentPos,s.currentTime=o.currentTime,o=s):(o.captured=!1,o.insideElementPressed=!1,o.insideElement=!0,H(a,o)),t.enterHandler&&!1===t.enterHandler({eventSource:t,pointerType:o.type,position:v(o.currentPos,t.element),buttons:a.buttons,pointers:t.getActivePointerCount(),insideElementPressed:o.insideElementPressed,buttonDownAny:0!==a.buttons,isTouchEvent:"touch"===o.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n)}function j(t,n,i){var r,o,s,a=t.getActivePointersListByType(i[0].type),l=i.length;for(r=0;r<l;r++)o=i[r],(s=a.getById(o.id))&&(s.captured?(s.insideElement=!1,s.lastPos=s.currentPos,s.lastTime=s.currentTime,s.currentPos=o.currentPos,s.currentTime=o.currentTime):z(a,s),o=s),t.exitHandler&&!1===t.exitHandler({eventSource:t,pointerType:o.type,position:v(o.currentPos,t.element),buttons:a.buttons,pointers:t.getActivePointerCount(),insideElementPressed:!!s&&s.insideElementPressed,buttonDownAny:0!==a.buttons,isTouchEvent:"touch"===o.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n)}function W(t,n,i,r){var o,s,a,u=l[t.hash],c=t.getActivePointersListByType(i[0].type),h=i.length;void 0!==n.buttons?c.buttons=n.buttons:e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?0===r?c.buttons+=1:1===r?c.buttons+=4:2===r?c.buttons+=2:3===r?c.buttons+=8:4===r?c.buttons+=16:5===r&&(c.buttons+=32):0===r?c.buttons|=1:1===r?c.buttons|=4:2===r?c.buttons|=2:3===r?c.buttons|=8:4===r?c.buttons|=16:5===r&&(c.buttons|=32);var d=t.getActivePointersListsExceptType(i[0].type);for(o=0;o<d.length;o++)C(t,n,d[o]);if(0!==r)return t.nonPrimaryPressHandler&&!1===t.nonPrimaryPressHandler({eventSource:t,pointerType:i[0].type,position:v(i[0].currentPos,t.element),button:r,buttons:c.buttons,isTouchEvent:"touch"===i[0].type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),!1;for(o=0;o<h;o++)s=i[o],(a=c.getById(s.id))?(a.captured=!0,a.insideElementPressed=!0,a.insideElement=!0,a.contactPos=s.currentPos,a.contactTime=s.currentTime,a.lastPos=a.currentPos,a.lastTime=a.currentTime,a.currentPos=s.currentPos,a.currentTime=s.currentTime,s=a):(s.captured=!0,s.insideElementPressed=!0,s.insideElement=!0,H(c,s)),c.addContact(),(t.dragHandler||t.dragEndHandler||t.pinchHandler)&&e.MouseTracker.gesturePointVelocityTracker.addPoint(t,s),1===c.contacts?t.pressHandler&&!1===t.pressHandler({eventSource:t,pointerType:s.type,position:v(s.contactPos,t.element),buttons:c.buttons,isTouchEvent:"touch"===s.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n):2===c.contacts&&t.pinchHandler&&"touch"===s.type&&(u.pinchGPoints=c.asArray(),u.lastPinchDist=u.currentPinchDist=u.pinchGPoints[0].currentPos.distanceTo(u.pinchGPoints[1].currentPos),u.lastPinchCenter=u.currentPinchCenter=y(u.pinchGPoints[0].currentPos,u.pinchGPoints[1].currentPos));return!0}function q(t,n,i,r){var o,s,a,u,c,h,d=l[t.hash],p=t.getActivePointersListByType(i[0].type),f=i.length,g=!1,m=!1;if(void 0!==n.buttons?p.buttons=n.buttons:e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?0===r?p.buttons-=1:1===r?p.buttons-=4:2===r?p.buttons-=2:3===r?p.buttons-=8:4===r?p.buttons-=16:5===r&&(p.buttons-=32):0===r?p.buttons^=-2:1===r?p.buttons^=-5:2===r?p.buttons^=-3:3===r?p.buttons^=-9:4===r?p.buttons^=-17:5===r&&(p.buttons^=-33),0!==r)return t.nonPrimaryReleaseHandler&&!1===t.nonPrimaryReleaseHandler({eventSource:t,pointerType:i[0].type,position:v(i[0].currentPos,t.element),button:r,buttons:p.buttons,isTouchEvent:"touch"===i[0].type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),C(t,n,t.getActivePointersListByType("mouse")),!1;for(a=0;a<f;a++)u=i[a],(c=p.getById(u.id))&&(c.captured&&(c.captured=!1,g=!0,m=!0),c.lastPos=c.currentPos,c.lastTime=c.currentTime,c.currentPos=u.currentPos,c.currentTime=u.currentTime,c.insideElement||z(p,c),o=c.currentPos,s=c.currentTime,m?(p.removeContact(),(t.dragHandler||t.dragEndHandler||t.pinchHandler)&&e.MouseTracker.gesturePointVelocityTracker.removePoint(t,c),0===p.contacts?(t.releaseHandler&&!1===t.releaseHandler({eventSource:t,pointerType:c.type,position:v(o,t.element),buttons:p.buttons,insideElementPressed:c.insideElementPressed,insideElementReleased:c.insideElement,isTouchEvent:"touch"===c.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),t.dragEndHandler&&!c.currentPos.equals(c.contactPos)&&!1===t.dragEndHandler({eventSource:t,pointerType:c.type,position:v(c.currentPos,t.element),speed:c.speed,direction:c.direction,shift:n.shiftKey,isTouchEvent:"touch"===c.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),(t.clickHandler||t.dblClickHandler)&&c.insideElement&&(h=s-c.contactTime<=t.clickTimeThreshold&&c.contactPos.distanceTo(o)<=t.clickDistThreshold,t.clickHandler&&!1===t.clickHandler({eventSource:t,pointerType:c.type,position:v(c.currentPos,t.element),quick:h,shift:n.shiftKey,isTouchEvent:"touch"===c.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),t.dblClickHandler&&h&&(p.clicks++,1===p.clicks?(d.lastClickPos=o,d.dblClickTimeOut=setTimeout(function(){p.clicks=0},t.dblClickTimeThreshold)):2===p.clicks&&(clearTimeout(d.dblClickTimeOut),p.clicks=0,d.lastClickPos.distanceTo(o)<=t.dblClickDistThreshold&&!1===t.dblClickHandler({eventSource:t,pointerType:c.type,position:v(c.currentPos,t.element),shift:n.shiftKey,isTouchEvent:"touch"===c.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n),d.lastClickPos=null)))):2===p.contacts&&t.pinchHandler&&"touch"===c.type&&(d.pinchGPoints=p.asArray(),d.lastPinchDist=d.currentPinchDist=d.pinchGPoints[0].currentPos.distanceTo(d.pinchGPoints[1].currentPos),d.lastPinchCenter=d.currentPinchCenter=y(d.pinchGPoints[0].currentPos,d.pinchGPoints[1].currentPos))):t.releaseHandler&&!1===t.releaseHandler({eventSource:t,pointerType:c.type,position:v(o,t.element),buttons:p.buttons,insideElementPressed:c.insideElementPressed,insideElementReleased:c.insideElement,isTouchEvent:"touch"===c.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n));return g}function U(t,n,i){var r,o,s,a,u,c=l[t.hash],h=t.getActivePointersListByType(i[0].type),d=i.length;for(void 0!==n.buttons&&(h.buttons=n.buttons),r=0;r<d;r++)o=i[r],(s=h.getById(o.id))?(o.hasOwnProperty("isPrimary")&&(s.isPrimary=o.isPrimary),s.lastPos=s.currentPos,s.lastTime=s.currentTime,s.currentPos=o.currentPos,s.currentTime=o.currentTime):(o.captured=!1,o.insideElementPressed=!1,o.insideElement=!0,H(h,o));t.stopHandler&&"mouse"===i[0].type&&(clearTimeout(t.stopTimeOut),t.stopTimeOut=setTimeout(function(){!function(e,t,n){e.stopHandler&&e.stopHandler({eventSource:e,pointerType:n,position:m(t,e.element),buttons:e.getActivePointersListByType(n).buttons,isTouchEvent:"touch"===n,originalEvent:t,preventDefaultAction:!1,userData:e.userData})}(t,n,i[0].type)},t.stopDelay)),0===h.contacts?t.moveHandler&&!1===t.moveHandler({eventSource:t,pointerType:i[0].type,position:v(i[0].currentPos,t.element),buttons:h.buttons,isTouchEvent:"touch"===i[0].type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n):1===h.contacts?(t.moveHandler&&(s=h.asArray()[0],!1===t.moveHandler({eventSource:t,pointerType:s.type,position:v(s.currentPos,t.element),buttons:h.buttons,isTouchEvent:"touch"===s.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n)),t.dragHandler&&(u=(s=h.asArray()[0]).currentPos.minus(s.lastPos),!1===t.dragHandler({eventSource:t,pointerType:s.type,position:v(s.currentPos,t.element),buttons:h.buttons,delta:u,speed:s.speed,direction:s.direction,shift:n.shiftKey,isTouchEvent:"touch"===s.type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n))):2===h.contacts&&(t.moveHandler&&(a=h.asArray(),!1===t.moveHandler({eventSource:t,pointerType:a[0].type,position:v(y(a[0].currentPos,a[1].currentPos),t.element),buttons:h.buttons,isTouchEvent:"touch"===a[0].type,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n)),t.pinchHandler&&"touch"===i[0].type&&(u=c.pinchGPoints[0].currentPos.distanceTo(c.pinchGPoints[1].currentPos))!=c.currentPinchDist&&(c.lastPinchDist=c.currentPinchDist,c.currentPinchDist=u,c.lastPinchCenter=c.currentPinchCenter,c.currentPinchCenter=y(c.pinchGPoints[0].currentPos,c.pinchGPoints[1].currentPos),!1===t.pinchHandler({eventSource:t,pointerType:"touch",gesturePoints:c.pinchGPoints,lastCenter:v(c.lastPinchCenter,t.element),center:v(c.currentPinchCenter,t.element),lastDistance:c.lastPinchDist,distance:c.currentPinchDist,shift:n.shiftKey,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n)))}e.MouseTracker=function(t){a.push(this);var n=arguments;e.isPlainObject(t)||(t={element:n[0],clickTimeThreshold:n[1],clickDistThreshold:n[2]}),this.hash=Math.random(),this.element=e.getElement(t.element),this.clickTimeThreshold=t.clickTimeThreshold||e.DEFAULT_SETTINGS.clickTimeThreshold,this.clickDistThreshold=t.clickDistThreshold||e.DEFAULT_SETTINGS.clickDistThreshold,this.dblClickTimeThreshold=t.dblClickTimeThreshold||e.DEFAULT_SETTINGS.dblClickTimeThreshold,this.dblClickDistThreshold=t.dblClickDistThreshold||e.DEFAULT_SETTINGS.dblClickDistThreshold,this.userData=t.userData||null,this.stopDelay=t.stopDelay||50,this.enterHandler=t.enterHandler||null,this.exitHandler=t.exitHandler||null,this.pressHandler=t.pressHandler||null,this.nonPrimaryPressHandler=t.nonPrimaryPressHandler||null,this.releaseHandler=t.releaseHandler||null,this.nonPrimaryReleaseHandler=t.nonPrimaryReleaseHandler||null,this.moveHandler=t.moveHandler||null,this.scrollHandler=t.scrollHandler||null,this.clickHandler=t.clickHandler||null,this.dblClickHandler=t.dblClickHandler||null,this.dragHandler=t.dragHandler||null,this.dragEndHandler=t.dragEndHandler||null,this.pinchHandler=t.pinchHandler||null,this.stopHandler=t.stopHandler||null,this.keyDownHandler=t.keyDownHandler||null,this.keyUpHandler=t.keyUpHandler||null,this.keyHandler=t.keyHandler||null,this.focusHandler=t.focusHandler||null,this.blurHandler=t.blurHandler||null;var i=this;l[this.hash]={click:function(t){!function(t,n){t.clickHandler&&e.cancelEvent(n)}(i,t)},dblclick:function(t){!function(t,n){t.dblClickHandler&&e.cancelEvent(n)}(i,t)},keydown:function(t){!function(t,n){t.keyDownHandler&&(n=e.getEvent(n),t.keyDownHandler({eventSource:t,keyCode:n.keyCode?n.keyCode:n.charCode,ctrl:n.ctrlKey,shift:n.shiftKey,alt:n.altKey,meta:n.metaKey,originalEvent:n,preventDefaultAction:!1,userData:t.userData})||e.cancelEvent(n))}(i,t)},keyup:function(t){!function(t,n){t.keyUpHandler&&(n=e.getEvent(n),t.keyUpHandler({eventSource:t,keyCode:n.keyCode?n.keyCode:n.charCode,ctrl:n.ctrlKey,shift:n.shiftKey,alt:n.altKey,meta:n.metaKey,originalEvent:n,preventDefaultAction:!1,userData:t.userData})||e.cancelEvent(n))}(i,t)},keypress:function(t){!function(t,n){t.keyHandler&&(n=e.getEvent(n),t.keyHandler({eventSource:t,keyCode:n.keyCode?n.keyCode:n.charCode,ctrl:n.ctrlKey,shift:n.shiftKey,alt:n.altKey,meta:n.metaKey,originalEvent:n,preventDefaultAction:!1,userData:t.userData})||e.cancelEvent(n))}(i,t)},focus:function(t){!function(t,n){t.focusHandler&&(n=e.getEvent(n),!1===t.focusHandler({eventSource:t,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n))}(i,t)},blur:function(t){!function(t,n){t.blurHandler&&(n=e.getEvent(n),!1===t.blurHandler({eventSource:t,originalEvent:n,preventDefaultAction:!1,userData:t.userData})&&e.cancelEvent(n))}(i,t)},wheel:function(e){!function(e,t){x(e,t,t)}(i,e)},mousewheel:function(e){w(i,e)},DOMMouseScroll:function(e){w(i,e)},MozMousePixelScroll:function(e){w(i,e)},mouseenter:function(t){!function(t,n){n=e.getEvent(n),_(t,n)}(i,t)},mouseleave:function(t){!function(t,n){n=e.getEvent(n),S(t,n)}(i,t)},mouseover:function(t){!function(t,n){if((n=e.getEvent(n)).currentTarget===n.relatedTarget||T(n.currentTarget,n.relatedTarget))return;_(t,n)}(i,t)},mouseout:function(t){!function(t,n){if((n=e.getEvent(n)).currentTarget===n.relatedTarget||T(n.currentTarget,n.relatedTarget))return;S(t,n)}(i,t)},mousedown:function(t){!function(t,n){var i;n=e.getEvent(n),i={id:e.MouseTracker.mousePointerId,type:"mouse",isPrimary:!0,currentPos:g(n),currentTime:e.now()},W(t,n,[i],b(n.button))&&(e.stopEvent(n),d(t,"mouse"));(t.clickHandler||t.dblClickHandler||t.pressHandler||t.dragHandler||t.dragEndHandler)&&e.cancelEvent(n)}(i,t)},mouseup:function(e){!function(e,t){E(e,t)}(i,e)},mouseupcaptured:function(t){!function(t,n){E(t,n),e.stopEvent(n)}(i,t)},mousemove:function(e){!function(e,t){P(e,t)}(i,e)},mousemovecaptured:function(t){!function(t,n){P(t,n),e.stopEvent(n)}(i,t)},touchstart:function(t){!function(t,n){var i,r,o,s,l=n.changedTouches.length,u=[],c=t.getActivePointersListByType("touch");i=e.now(),c.getLength()>n.touches.length-l&&(e.console.warn("Tracked touch contact count doesn't match event.touches.length. Removing all tracked touch pointers."),C(t,n,c));for(r=0;r<l;r++)u.push({id:n.changedTouches[r].identifier,type:"touch",currentPos:g(n.changedTouches[r]),currentTime:i});for(F(t,n,u),r=0;r<a.length;r++)if(a[r]!==t&&a[r].isTracking()&&T(a[r].element,t.element)){for(s=[],o=0;o<l;o++)s.push({id:n.changedTouches[o].identifier,type:"touch",currentPos:g(n.changedTouches[o]),currentTime:i});F(a[r],n,s)}W(t,n,u,0)&&(e.stopEvent(n),d(t,"touch",l));e.cancelEvent(n)}(i,t)},touchend:function(e){!function(e,t){R(e,t)}(i,e)},touchendcaptured:function(t){!function(t,n){R(t,n),e.stopEvent(n)}(i,t)},touchmove:function(e){!function(e,t){k(e,t)}(i,e)},touchmovecaptured:function(t){!function(t,n){k(t,n),e.stopEvent(n)}(i,t)},touchcancel:function(e){!function(e,t){var n=e.getActivePointersListByType("touch");C(e,t,n)}(i,e)},gesturestart:function(e){!function(e,t){t.stopPropagation(),t.preventDefault()}(0,e)},gesturechange:function(e){!function(e,t){t.stopPropagation(),t.preventDefault()}(0,e)},pointerover:function(e){O(i,e)},MSPointerOver:function(e){O(i,e)},pointerout:function(e){D(i,e)},MSPointerOut:function(e){D(i,e)},pointerdown:function(e){I(i,e)},MSPointerDown:function(e){I(i,e)},pointerup:function(e){A(i,e)},MSPointerUp:function(e){A(i,e)},pointermove:function(e){B(i,e)},MSPointerMove:function(e){B(i,e)},pointercancel:function(e){N(i,e)},MSPointerCancel:function(e){N(i,e)},pointerupcaptured:function(t){!function(t,n){t.getActivePointersListByType(f(n)).getById(n.pointerId)&&L(t,n);e.stopEvent(n)}(i,t)},pointermovecaptured:function(t){!function(t,n){t.getActivePointersListByType(f(n)).getById(n.pointerId)&&M(t,n);e.stopEvent(n)}(i,t)},tracking:!1,activePointersLists:[],lastClickPos:null,dblClickTimeOut:null,pinchGPoints:[],lastPinchDist:0,currentPinchDist:0,lastPinchCenter:null,currentPinchCenter:null},t.startDisabled||this.setTracking(!0)},e.MouseTracker.prototype={destroy:function(){var e;for(c(this),this.element=null,e=0;e<a.length;e++)if(a[e]===this){a.splice(e,1);break}l[this.hash]=null,delete l[this.hash]},isTracking:function(){return l[this.hash].tracking},setTracking:function(t){return t?function(t){var n,i,r=l[t.hash];if(!r.tracking){for(i=0;i<e.MouseTracker.subscribeEvents.length;i++)n=e.MouseTracker.subscribeEvents[i],e.addEvent(t.element,n,r[n],!1);u(t),r.tracking=!0}}(this):c(this),this},getActivePointersListsExceptType:function(e){for(var t=l[this.hash],n=[],i=0;i<t.activePointersLists.length;++i)t.activePointersLists[i].type!==e&&n.push(t.activePointersLists[i]);return n},getActivePointersListByType:function(t){var n,i,r=l[this.hash],o=r.activePointersLists.length;for(n=0;n<o;n++)if(r.activePointersLists[n].type===t)return r.activePointersLists[n];return i=new e.MouseTracker.GesturePointList(t),r.activePointersLists.push(i),i},getActivePointerCount:function(){var e,t=l[this.hash],n=t.activePointersLists.length,i=0;for(e=0;e<n;e++)i+=t.activePointersLists[e].getLength();return i},enterHandler:function(){},exitHandler:function(){},pressHandler:function(){},nonPrimaryPressHandler:function(){},releaseHandler:function(){},nonPrimaryReleaseHandler:function(){},moveHandler:function(){},scrollHandler:function(){},clickHandler:function(){},dblClickHandler:function(){},dragHandler:function(){},dragEndHandler:function(){},pinchHandler:function(){},stopHandler:function(){},keyDownHandler:function(){},keyUpHandler:function(){},keyHandler:function(){},focusHandler:function(){},blurHandler:function(){}},e.MouseTracker.resetAllMouseTrackers=function(){for(var e=0;e<a.length;e++)a[e].isTracking()&&(a[e].setTracking(!1),a[e].setTracking(!0))},e.MouseTracker.gesturePointVelocityTracker=(t=[],n=0,i=0,r=function(e,t){return e.hash.toString()+t.type+t.id.toString()},o=function(){var n,r,o,s,a,l,u=t.length,c=e.now();for(s=c-i,i=c,n=0;n<u;n++)(o=(r=t[n]).gPoint).direction=Math.atan2(o.currentPos.y-r.lastPos.y,o.currentPos.x-r.lastPos.x),a=r.lastPos.distanceTo(o.currentPos),r.lastPos=o.currentPos,l=1e3*a/(s+1),o.speed=.75*l+.25*o.speed},{addPoint:function(s,a){var l=r(s,a);t.push({guid:l,gPoint:a,lastPos:a.currentPos}),1===t.length&&(i=e.now(),n=window.setInterval(o,50))},removePoint:function(e,i){var o,s=r(e,i),a=t.length;for(o=0;o<a;o++)if(t[o].guid===s){t.splice(o,1),0==--a&&window.clearInterval(n);break}}}),e.MouseTracker.captureElement=document,e.MouseTracker.wheelEventName=e.Browser.vendor==e.BROWSERS.IE&&e.Browser.version>8||"onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll",e.MouseTracker.supportsMouseCapture=(s=document.createElement("div"),e.isFunction(s.setCapture)&&e.isFunction(s.releaseCapture)),e.MouseTracker.subscribeEvents=["click","dblclick","keydown","keyup","keypress","focus","blur",e.MouseTracker.wheelEventName],"DOMMouseScroll"==e.MouseTracker.wheelEventName&&e.MouseTracker.subscribeEvents.push("MozMousePixelScroll"),window.PointerEvent&&(window.navigator.pointerEnabled||e.Browser.vendor!==e.BROWSERS.IE)?(e.MouseTracker.havePointerEvents=!0,e.MouseTracker.subscribeEvents.push("pointerover","pointerout","pointerdown","pointerup","pointermove","pointercancel"),e.MouseTracker.unprefixedPointerEvents=!0,navigator.maxTouchPoints?e.MouseTracker.maxTouchPoints=navigator.maxTouchPoints:e.MouseTracker.maxTouchPoints=0,e.MouseTracker.haveMouseEnter=!1):window.MSPointerEvent&&window.navigator.msPointerEnabled?(e.MouseTracker.havePointerEvents=!0,e.MouseTracker.subscribeEvents.push("MSPointerOver","MSPointerOut","MSPointerDown","MSPointerUp","MSPointerMove","MSPointerCancel"),e.MouseTracker.unprefixedPointerEvents=!1,navigator.msMaxTouchPoints?e.MouseTracker.maxTouchPoints=navigator.msMaxTouchPoints:e.MouseTracker.maxTouchPoints=0,e.MouseTracker.haveMouseEnter=!1):(e.MouseTracker.havePointerEvents=!1,e.Browser.vendor===e.BROWSERS.IE&&e.Browser.version<9?(e.MouseTracker.subscribeEvents.push("mouseenter","mouseleave"),e.MouseTracker.haveMouseEnter=!0):(e.MouseTracker.subscribeEvents.push("mouseover","mouseout"),e.MouseTracker.haveMouseEnter=!1),e.MouseTracker.subscribeEvents.push("mousedown","mouseup","mousemove"),"ontouchstart"in window&&e.MouseTracker.subscribeEvents.push("touchstart","touchend","touchmove","touchcancel"),"ongesturestart"in window&&e.MouseTracker.subscribeEvents.push("gesturestart","gesturechange"),e.MouseTracker.mousePointerId="legacy-mouse",e.MouseTracker.maxTouchPoints=10),e.MouseTracker.GesturePointList=function(e){this._gPoints=[],this.type=e,this.buttons=0,this.contacts=0,this.clicks=0,this.captureCount=0},e.MouseTracker.GesturePointList.prototype={getLength:function(){return this._gPoints.length},asArray:function(){return this._gPoints},add:function(e){return this._gPoints.push(e)},removeById:function(e){var t,n=this._gPoints.length;for(t=0;t<n;t++)if(this._gPoints[t].id===e){this._gPoints.splice(t,1);break}return this._gPoints.length},getByIndex:function(e){return e<this._gPoints.length?this._gPoints[e]:null},getById:function(e){var t,n=this._gPoints.length;for(t=0;t<n;t++)if(this._gPoints[t].id===e)return this._gPoints[t];return null},getPrimary:function(e){var t,n=this._gPoints.length;for(t=0;t<n;t++)if(this._gPoints[t].isPrimary)return this._gPoints[t];return null},addContact:function(){++this.contacts,this.contacts>1&&("mouse"===this.type||"pen"===this.type)&&(this.contacts=1)},removeContact:function(){--this.contacts,this.contacts<0&&(this.contacts=0)}};var $=function(){try{return window.self!==window.top}catch(e){return!0}}();function V(e){try{return e.addEventListener&&e.removeEventListener}catch(e){return!1}}}(OpenSeadragon),function(e){e.ControlAnchor={NONE:0,TOP_LEFT:1,TOP_RIGHT:2,BOTTOM_RIGHT:3,BOTTOM_LEFT:4,ABSOLUTE:5},e.Control=function(t,n,i){var r=t.parentNode;"number"==typeof n&&(e.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; please use an options object instead.  Support for this deprecated variant is scheduled for removal in December 2013"),n={anchor:n}),n.attachToViewer=void 0===n.attachToViewer||n.attachToViewer,this.autoFade=void 0===n.autoFade||n.autoFade,this.element=t,this.anchor=n.anchor,this.container=i,this.anchor==e.ControlAnchor.ABSOLUTE?(this.wrapper=e.makeNeutralElement("div"),this.wrapper.style.position="absolute",this.wrapper.style.top="number"==typeof n.top?n.top+"px":n.top,this.wrapper.style.left="number"==typeof n.left?n.left+"px":n.left,this.wrapper.style.height="number"==typeof n.height?n.height+"px":n.height,this.wrapper.style.width="number"==typeof n.width?n.width+"px":n.width,this.wrapper.style.margin="0px",this.wrapper.style.padding="0px",this.element.style.position="relative",this.element.style.top="0px",this.element.style.left="0px",this.element.style.height="100%",this.element.style.width="100%"):(this.wrapper=e.makeNeutralElement("div"),this.wrapper.style.display="inline-block",this.anchor==e.ControlAnchor.NONE&&(this.wrapper.style.width=this.wrapper.style.height="100%")),this.wrapper.appendChild(this.element),n.attachToViewer?this.anchor==e.ControlAnchor.TOP_RIGHT||this.anchor==e.ControlAnchor.BOTTOM_RIGHT?this.container.insertBefore(this.wrapper,this.container.firstChild):this.container.appendChild(this.wrapper):r.appendChild(this.wrapper)},e.Control.prototype={destroy:function(){this.wrapper.removeChild(this.element),this.container.removeChild(this.wrapper)},isVisible:function(){return"none"!=this.wrapper.style.display},setVisible:function(t){this.wrapper.style.display=t?this.anchor==e.ControlAnchor.ABSOLUTE?"block":"inline-block":"none"},setOpacity:function(t){this.element[e.SIGNAL]&&e.Browser.vendor==e.BROWSERS.IE?e.setElementOpacity(this.element,t,!0):e.setElementOpacity(this.wrapper,t,!0)}}}(OpenSeadragon),function(e){function t(e,t){var n,i=e.controls;for(n=i.length-1;n>=0;n--)if(i[n].element==t)return n;return-1}e.ControlDock=function(t){var n,i,r=["topleft","topright","bottomright","bottomleft"];for(e.extend(!0,this,{id:"controldock-"+e.now()+"-"+Math.floor(1e6*Math.random()),container:e.makeNeutralElement("div"),controls:[]},t),this.container.onsubmit=function(){return!1},this.element&&(this.element=e.getElement(this.element),this.element.appendChild(this.container),this.element.style.position="relative",this.container.style.width="100%",this.container.style.height="100%"),i=0;i<r.length;i++)n=r[i],this.controls[n]=e.makeNeutralElement("div"),this.controls[n].style.position="absolute",n.match("left")&&(this.controls[n].style.left="0px"),n.match("right")&&(this.controls[n].style.right="0px"),n.match("top")&&(this.controls[n].style.top="0px"),n.match("bottom")&&(this.controls[n].style.bottom="0px");this.container.appendChild(this.controls.topleft),this.container.appendChild(this.controls.topright),this.container.appendChild(this.controls.bottomright),this.container.appendChild(this.controls.bottomleft)},e.ControlDock.prototype={addControl:function(n,i){var r=null;if(!(t(this,n=e.getElement(n))>=0)){switch(i.anchor){case e.ControlAnchor.TOP_RIGHT:r=this.controls.topright,n.style.position="relative",n.style.paddingRight="0px",n.style.paddingTop="0px";break;case e.ControlAnchor.BOTTOM_RIGHT:r=this.controls.bottomright,n.style.position="relative",n.style.paddingRight="0px",n.style.paddingBottom="0px";break;case e.ControlAnchor.BOTTOM_LEFT:r=this.controls.bottomleft,n.style.position="relative",n.style.paddingLeft="0px",n.style.paddingBottom="0px";break;case e.ControlAnchor.TOP_LEFT:r=this.controls.topleft,n.style.position="relative",n.style.paddingLeft="0px",n.style.paddingTop="0px";break;case e.ControlAnchor.ABSOLUTE:r=this.container,n.style.margin="0px",n.style.padding="0px";break;default:case e.ControlAnchor.NONE:r=this.container,n.style.margin="0px",n.style.padding="0px"}this.controls.push(new e.Control(n,i,r)),n.style.display="inline-block"}},removeControl:function(n){var i=t(this,n=e.getElement(n));return i>=0&&(this.controls[i].destroy(),this.controls.splice(i,1)),this},clearControls:function(){for(;this.controls.length>0;)this.controls.pop().destroy();return this},areControlsEnabled:function(){var e;for(e=this.controls.length-1;e>=0;e--)if(this.controls[e].isVisible())return!0;return!1},setControlsEnabled:function(e){var t;for(t=this.controls.length-1;t>=0;t--)this.controls[t].setVisible(e);return this}}}(OpenSeadragon),function(e){e.Placement=e.freezeObject({CENTER:0,TOP_LEFT:1,TOP:2,TOP_RIGHT:3,RIGHT:4,BOTTOM_RIGHT:5,BOTTOM:6,BOTTOM_LEFT:7,LEFT:8,properties:{0:{isLeft:!1,isHorizontallyCentered:!0,isRight:!1,isTop:!1,isVerticallyCentered:!0,isBottom:!1},1:{isLeft:!0,isHorizontallyCentered:!1,isRight:!1,isTop:!0,isVerticallyCentered:!1,isBottom:!1},2:{isLeft:!1,isHorizontallyCentered:!0,isRight:!1,isTop:!0,isVerticallyCentered:!1,isBottom:!1},3:{isLeft:!1,isHorizontallyCentered:!1,isRight:!0,isTop:!0,isVerticallyCentered:!1,isBottom:!1},4:{isLeft:!1,isHorizontallyCentered:!1,isRight:!0,isTop:!1,isVerticallyCentered:!0,isBottom:!1},5:{isLeft:!1,isHorizontallyCentered:!1,isRight:!0,isTop:!1,isVerticallyCentered:!1,isBottom:!0},6:{isLeft:!1,isHorizontallyCentered:!0,isRight:!1,isTop:!1,isVerticallyCentered:!1,isBottom:!0},7:{isLeft:!0,isHorizontallyCentered:!1,isRight:!1,isTop:!1,isVerticallyCentered:!1,isBottom:!0},8:{isLeft:!0,isHorizontallyCentered:!1,isRight:!1,isTop:!1,isVerticallyCentered:!0,isBottom:!1}}})}(OpenSeadragon),function(e){var t={},n=1;function i(t){return t=e.getElement(t),new e.Point(0===t.clientWidth?1:t.clientWidth,0===t.clientHeight?1:t.clientHeight)}function r(t,n){if(n instanceof e.Overlay)return n;var i=null;if(n.element)i=e.getElement(n.element);else{var r=n.id?n.id:"openseadragon-overlay-"+Math.floor(1e7*Math.random());(i=e.getElement(n.id))||((i=document.createElement("a")).href="#/overlay/"+r),i.id=r,e.addClass(i,n.className?n.className:"openseadragon-overlay")}var o=n.location,s=n.width,a=n.height;if(!o){var l=n.x,u=n.y;if(void 0!==n.px){var c=t.viewport.imageToViewportRectangle(new e.Rect(n.px,n.py,s||0,a||0));l=c.x,u=c.y,s=void 0!==s?c.width:void 0,a=void 0!==a?c.height:void 0}o=new e.Point(l,u)}var h=n.placement;return h&&"string"===e.type(h)&&(h=e.Placement[n.placement.toUpperCase()]),new e.Overlay({element:i,location:o,placement:h,onDraw:n.onDraw,checkResize:n.checkResize,width:s,height:a,rotationMode:n.rotationMode})}function o(e,t){var n;for(n=e.length-1;n>=0;n--)if(e[n].element===t)return n;return-1}function s(t,n){return e.requestAnimationFrame(function(){n(t)})}function a(t){e.requestAnimationFrame(function(){!function(t){var n,i,r,o;if(t.controlsShouldFade){for(n=e.now(),i=n-t.controlsFadeBeginTime,r=1-i/t.controlsFadeLength,r=Math.min(1,r),r=Math.max(0,r),o=t.controls.length-1;o>=0;o--)t.controls[o].autoFade&&t.controls[o].setOpacity(r);r>0&&a(t)}}(t)})}function l(t){t.autoHideControls&&(t.controlsShouldFade=!0,t.controlsFadeBeginTime=e.now()+t.controlsFadeDelay,window.setTimeout(function(){a(t)},t.controlsFadeDelay))}function u(e){var t;for(e.controlsShouldFade=!1,t=e.controls.length-1;t>=0;t--)e.controls[t].setOpacity(1)}function c(){u(this)}function h(){l(this)}function d(t){if(t.preventDefaultAction||t.ctrl||t.alt||t.meta)return!0;switch(t.keyCode){case 38:return t.shift?this.viewport.zoomBy(1.1):this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(0,-40))),this.viewport.applyConstraints(),!1;case 40:return t.shift?this.viewport.zoomBy(.9):this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(0,40))),this.viewport.applyConstraints(),!1;case 37:return this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(-40,0))),this.viewport.applyConstraints(),!1;case 39:return this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(40,0))),this.viewport.applyConstraints(),!1;default:return!0}}function p(t){if(t.preventDefaultAction||t.ctrl||t.alt||t.meta)return!0;switch(t.keyCode){case 43:case 61:return this.viewport.zoomBy(1.1),this.viewport.applyConstraints(),!1;case 45:return this.viewport.zoomBy(.9),this.viewport.applyConstraints(),!1;case 48:return this.viewport.goHome(),this.viewport.applyConstraints(),!1;case 119:case 87:return t.shift?this.viewport.zoomBy(1.1):this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(0,-40))),this.viewport.applyConstraints(),!1;case 115:case 83:return t.shift?this.viewport.zoomBy(.9):this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(0,40))),this.viewport.applyConstraints(),!1;case 97:return this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(-40,0))),this.viewport.applyConstraints(),!1;case 100:return this.viewport.panBy(this.viewport.deltaPointsFromPixels(new e.Point(40,0))),this.viewport.applyConstraints(),!1;default:return!0}}function f(e){document.activeElement==this.canvas||this.canvas.focus();var t={tracker:e.eventSource,position:e.position,quick:e.quick,shift:e.shift,originalEvent:e.originalEvent,preventDefaultAction:e.preventDefaultAction};this.raiseEvent("canvas-click",t),!t.preventDefaultAction&&this.viewport&&e.quick&&this.gestureSettingsByDeviceType(e.pointerType).clickToZoom&&(this.viewport.zoomBy(e.shift?1/this.zoomPerClick:this.zoomPerClick,this.viewport.pointFromPixel(e.position,!0)),this.viewport.applyConstraints())}function g(e){!e.preventDefaultAction&&this.viewport&&this.gestureSettingsByDeviceType(e.pointerType).dblClickToZoom&&(this.viewport.zoomBy(e.shift?1/this.zoomPerClick:this.zoomPerClick,this.viewport.pointFromPixel(e.position,!0)),this.viewport.applyConstraints()),this.raiseEvent("canvas-double-click",{tracker:e.eventSource,position:e.position,shift:e.shift,originalEvent:e.originalEvent})}function m(e){var t,n={tracker:e.eventSource,position:e.position,delta:e.delta,speed:e.speed,direction:e.direction,shift:e.shift,originalEvent:e.originalEvent,preventDefaultAction:e.preventDefaultAction};if(this.raiseEvent("canvas-drag",n),!n.preventDefaultAction&&this.viewport){if(t=this.gestureSettingsByDeviceType(e.pointerType),this.panHorizontal||(e.delta.x=0),this.panVertical||(e.delta.y=0),this.constrainDuringPan){var i=this.viewport.deltaPointsFromPixels(e.delta.negate());this.viewport.centerSpringX.target.value+=i.x,this.viewport.centerSpringY.target.value+=i.y;var r=this.viewport.getBounds(),o=this.viewport.getConstrainedBounds();this.viewport.centerSpringX.target.value-=i.x,this.viewport.centerSpringY.target.value-=i.y,r.x!=o.x&&(e.delta.x=0),r.y!=o.y&&(e.delta.y=0)}this.viewport.panBy(this.viewport.deltaPointsFromPixels(e.delta.negate()),t.flickEnabled&&!this.constrainDuringPan)}}function v(t){if(!t.preventDefaultAction&&this.viewport){var n=this.gestureSettingsByDeviceType(t.pointerType);if(n.flickEnabled&&t.speed>=n.flickMinSpeed){var i=0;this.panHorizontal&&(i=n.flickMomentum*t.speed*Math.cos(t.direction));var r=0;this.panVertical&&(r=n.flickMomentum*t.speed*Math.sin(t.direction));var o=this.viewport.pixelFromPoint(this.viewport.getCenter(!0)),s=this.viewport.pointFromPixel(new e.Point(o.x-i,o.y-r));this.viewport.panTo(s,!1)}this.viewport.applyConstraints()}this.raiseEvent("canvas-drag-end",{tracker:t.eventSource,position:t.position,speed:t.speed,direction:t.direction,shift:t.shift,originalEvent:t.originalEvent})}function y(e){this.raiseEvent("canvas-enter",{tracker:e.eventSource,pointerType:e.pointerType,position:e.position,buttons:e.buttons,pointers:e.pointers,insideElementPressed:e.insideElementPressed,buttonDownAny:e.buttonDownAny,originalEvent:e.originalEvent})}function w(t){window.location!=window.parent.location&&e.MouseTracker.resetAllMouseTrackers(),this.raiseEvent("canvas-exit",{tracker:t.eventSource,pointerType:t.pointerType,position:t.position,buttons:t.buttons,pointers:t.pointers,insideElementPressed:t.insideElementPressed,buttonDownAny:t.buttonDownAny,originalEvent:t.originalEvent})}function x(e){this.raiseEvent("canvas-press",{tracker:e.eventSource,pointerType:e.pointerType,position:e.position,insideElementPressed:e.insideElementPressed,insideElementReleased:e.insideElementReleased,originalEvent:e.originalEvent})}function T(e){this.raiseEvent("canvas-release",{tracker:e.eventSource,pointerType:e.pointerType,position:e.position,insideElementPressed:e.insideElementPressed,insideElementReleased:e.insideElementReleased,originalEvent:e.originalEvent})}function _(e){this.raiseEvent("canvas-nonprimary-press",{tracker:e.eventSource,position:e.position,pointerType:e.pointerType,button:e.button,buttons:e.buttons,originalEvent:e.originalEvent})}function S(e){this.raiseEvent("canvas-nonprimary-release",{tracker:e.eventSource,position:e.position,pointerType:e.pointerType,button:e.button,buttons:e.buttons,originalEvent:e.originalEvent})}function b(e){var t,n,i;if(!e.preventDefaultAction&&this.viewport&&((t=this.gestureSettingsByDeviceType(e.pointerType)).pinchToZoom&&(n=this.viewport.pointFromPixel(e.center,!0),i=this.viewport.pointFromPixel(e.lastCenter,!0).minus(n),this.panHorizontal||(i.x=0),this.panVertical||(i.y=0),this.viewport.zoomBy(e.distance/e.lastDistance,n,!0),this.viewport.panBy(i,!0),this.viewport.applyConstraints()),t.pinchRotate)){var r=Math.atan2(e.gesturePoints[0].currentPos.y-e.gesturePoints[1].currentPos.y,e.gesturePoints[0].currentPos.x-e.gesturePoints[1].currentPos.x),o=Math.atan2(e.gesturePoints[0].lastPos.y-e.gesturePoints[1].lastPos.y,e.gesturePoints[0].lastPos.x-e.gesturePoints[1].lastPos.x);this.viewport.setRotation(this.viewport.getRotation()+(r-o)*(180/Math.PI))}return this.raiseEvent("canvas-pinch",{tracker:e.eventSource,gesturePoints:e.gesturePoints,lastCenter:e.lastCenter,center:e.center,lastDistance:e.lastDistance,distance:e.distance,shift:e.shift,originalEvent:e.originalEvent}),!1}function E(t){var n,i,r;if((r=e.now())-this._lastScrollTime>this.minScrollDeltaTime){if(this._lastScrollTime=r,!t.preventDefaultAction&&this.viewport&&(n=this.gestureSettingsByDeviceType(t.pointerType)).scrollToZoom&&(i=Math.pow(this.zoomPerScroll,t.scroll),this.viewport.zoomBy(i,this.viewport.pointFromPixel(t.position,!0)),this.viewport.applyConstraints()),this.raiseEvent("canvas-scroll",{tracker:t.eventSource,position:t.position,scroll:t.scroll,shift:t.shift,originalEvent:t.originalEvent}),n&&n.scrollToZoom)return!1}else if((n=this.gestureSettingsByDeviceType(t.pointerType))&&n.scrollToZoom)return!1}function P(e){t[this.hash].mouseInside=!0,u(this),this.raiseEvent("container-enter",{tracker:e.eventSource,position:e.position,buttons:e.buttons,pointers:e.pointers,insideElementPressed:e.insideElementPressed,buttonDownAny:e.buttonDownAny,originalEvent:e.originalEvent})}function C(e){e.pointers<1&&(t[this.hash].mouseInside=!1,t[this.hash].animating||l(this)),this.raiseEvent("container-exit",{tracker:e.eventSource,position:e.position,buttons:e.buttons,pointers:e.pointers,insideElementPressed:e.insideElementPressed,buttonDownAny:e.buttonDownAny,originalEvent:e.originalEvent})}function R(e){!function(e){if(e._opening)return;if(e.autoResize){var n=i(e.container),r=t[e.hash].prevContainerSize;if(!n.equals(r)){var o=e.viewport;if(e.preserveImageSizeOnResize){var s=r.x/n.x,a=o.getZoom()*s,c=o.getCenter();o.resize(n,!1),o.zoomTo(a,null,!0),o.panTo(c,!0)}else{var h=o.getBounds();o.resize(n,!0),o.fitBoundsWithConstraints(h,!0)}t[e.hash].prevContainerSize=n,t[e.hash].forceRedraw=!0}}var d=e.viewport.update(),p=e.world.update()||d;d&&e.raiseEvent("viewport-change");e.referenceStrip&&(p=e.referenceStrip.update(e.viewport)||p);!t[e.hash].animating&&p&&(e.raiseEvent("animation-start"),u(e));(p||t[e.hash].forceRedraw||e.world.needsDraw())&&(!function(e){e.imageLoader.clear(),e.drawer.clear(),e.world.draw(),e.raiseEvent("update-viewport",{})}(e),e._drawOverlays(),e.navigator&&e.navigator.update(e.viewport),t[e.hash].forceRedraw=!1,p&&e.raiseEvent("animation"));t[e.hash].animating&&!p&&(e.raiseEvent("animation-finish"),t[e.hash].mouseInside||l(e));t[e.hash].animating=p}(e),e.isOpen()?e._updateRequestId=s(e,R):e._updateRequestId=!1}function k(e,t){return e?e+t:t}function O(){t[this.hash].lastZoomTime=e.now(),t[this.hash].zoomFactor=this.zoomPerSecond,t[this.hash].zooming=!0,A(this)}function D(){t[this.hash].lastZoomTime=e.now(),t[this.hash].zoomFactor=1/this.zoomPerSecond,t[this.hash].zooming=!0,A(this)}function I(){t[this.hash].zooming=!1}function A(t){e.requestAnimationFrame(e.delegate(t,L))}function L(){var n,i,r;t[this.hash].zooming&&this.viewport&&(i=(n=e.now())-t[this.hash].lastZoomTime,r=Math.pow(t[this.hash].zoomFactor,i/1e3),this.viewport.zoomBy(r),this.viewport.applyConstraints(),t[this.hash].lastZoomTime=n,A(this))}function B(){this.viewport&&(t[this.hash].zooming=!1,this.viewport.zoomBy(this.zoomPerClick/1),this.viewport.applyConstraints())}function M(){this.viewport&&(t[this.hash].zooming=!1,this.viewport.zoomBy(1/this.zoomPerClick),this.viewport.applyConstraints())}function N(){this.buttons.emulateEnter(),this.buttons.emulateExit()}function H(){this.viewport&&this.viewport.goHome()}function z(){this.isFullPage()&&!e.isFullScreen()?this.setFullPage(!1):this.setFullScreen(!this.isFullPage()),this.buttons&&this.buttons.emulateExit(),this.fullPageButton.element.focus(),this.viewport&&this.viewport.applyConstraints()}function F(){if(this.viewport){var e=this.viewport.getRotation();0===e?e=270:e-=90,this.viewport.setRotation(e)}}function j(){if(this.viewport){var e=this.viewport.getRotation();270===e?e=0:e+=90,this.viewport.setRotation(e)}}function W(){var e=this._sequenceIndex-1;this.navPrevNextWrap&&e<0&&(e+=this.tileSources.length),this.goToPage(e)}function q(){var e=this._sequenceIndex+1;this.navPrevNextWrap&&e>=this.tileSources.length&&(e=0),this.goToPage(e)}e.Viewer=function(r){var o,a,u=arguments,c=this;if(e.isPlainObject(r)||(r={id:u[0],xmlPath:u.length>1?u[1]:void 0,prefixUrl:u.length>2?u[2]:void 0,controls:u.length>3?u[3]:void 0,overlays:u.length>4?u[4]:void 0}),r.config&&(e.extend(!0,r,r.config),delete r.config),e.extend(!0,this,{id:r.id,hash:r.hash||n++,initialPage:0,element:null,container:null,canvas:null,overlays:[],overlaysContainer:null,previousBody:[],customControls:[],source:null,drawer:null,world:null,viewport:null,navigator:null,collectionViewport:null,collectionDrawer:null,navImages:null,buttons:null,profiler:null},e.DEFAULT_SETTINGS,r),void 0===this.hash)throw new Error("A hash must be defined, either by specifying options.id or options.hash.");for(void 0!==t[this.hash]&&e.console.warn("Hash "+this.hash+" has already been used."),t[this.hash]={fsBoundsDelta:new e.Point(1,1),prevContainerSize:null,animating:!1,forceRedraw:!1,mouseInside:!1,group:null,zooming:!1,zoomFactor:null,lastZoomTime:null,fullPage:!1,onfullscreenchange:null},this._sequenceIndex=0,this._firstOpen=!0,this._updateRequestId=null,this._loadQueue=[],this.currentOverlays=[],this._lastScrollTime=e.now(),e.EventSource.call(this),this.addHandler("open-failed",function(t){var n=e.getString("Errors.OpenFailed",t.eventSource,t.message);c._showMessage(n)}),e.ControlDock.call(this,r),this.xmlPath&&(this.tileSources=[this.xmlPath]),this.element=this.element||document.getElementById(this.id),this.canvas=e.makeNeutralElement("div"),this.canvas.className="openseadragon-canvas",(a=this.canvas.style).width="100%",a.height="100%",a.overflow="hidden",a.position="absolute",a.top="0px",a.left="0px",e.setElementTouchActionNone(this.canvas),""!==r.tabIndex&&(this.canvas.tabIndex=void 0===r.tabIndex?0:r.tabIndex),this.container.className="openseadragon-container",function(e){e.width="100%",e.height="100%",e.position="relative",e.overflow="hidden",e.left="0px",e.top="0px",e.textAlign="left"}(this.container.style),this.container.insertBefore(this.canvas,this.container.firstChild),this.element.appendChild(this.container),this.bodyWidth=document.body.style.width,this.bodyHeight=document.body.style.height,this.bodyOverflow=document.body.style.overflow,this.docOverflow=document.documentElement.style.overflow,this.innerTracker=new e.MouseTracker({element:this.canvas,startDisabled:!this.mouseNavEnabled,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,dblClickTimeThreshold:this.dblClickTimeThreshold,dblClickDistThreshold:this.dblClickDistThreshold,keyDownHandler:e.delegate(this,d),keyHandler:e.delegate(this,p),clickHandler:e.delegate(this,f),dblClickHandler:e.delegate(this,g),dragHandler:e.delegate(this,m),dragEndHandler:e.delegate(this,v),enterHandler:e.delegate(this,y),exitHandler:e.delegate(this,w),pressHandler:e.delegate(this,x),releaseHandler:e.delegate(this,T),nonPrimaryPressHandler:e.delegate(this,_),nonPrimaryReleaseHandler:e.delegate(this,S),scrollHandler:e.delegate(this,E),pinchHandler:e.delegate(this,b)}),this.outerTracker=new e.MouseTracker({element:this.container,startDisabled:!this.mouseNavEnabled,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,dblClickTimeThreshold:this.dblClickTimeThreshold,dblClickDistThreshold:this.dblClickDistThreshold,enterHandler:e.delegate(this,P),exitHandler:e.delegate(this,C)}),this.toolbar&&(this.toolbar=new e.ControlDock({element:this.toolbar})),this.bindStandardControls(),t[this.hash].prevContainerSize=i(this.container),this.world=new e.World({viewer:this}),this.world.addHandler("add-item",function(e){c.source=c.world.getItemAt(0).source,t[c.hash].forceRedraw=!0,c._updateRequestId||(c._updateRequestId=s(c,R))}),this.world.addHandler("remove-item",function(e){c.world.getItemCount()?c.source=c.world.getItemAt(0).source:c.source=null,t[c.hash].forceRedraw=!0}),this.world.addHandler("metrics-change",function(e){c.viewport&&c.viewport._setContentBounds(c.world.getHomeBounds(),c.world.getContentFactor())}),this.world.addHandler("item-index-change",function(e){c.source=c.world.getItemAt(0).source}),this.viewport=new e.Viewport({containerSize:t[this.hash].prevContainerSize,springStiffness:this.springStiffness,animationTime:this.animationTime,minZoomImageRatio:this.minZoomImageRatio,maxZoomPixelRatio:this.maxZoomPixelRatio,visibilityRatio:this.visibilityRatio,wrapHorizontal:this.wrapHorizontal,wrapVertical:this.wrapVertical,defaultZoomLevel:this.defaultZoomLevel,minZoomLevel:this.minZoomLevel,maxZoomLevel:this.maxZoomLevel,viewer:this,degrees:this.degrees,navigatorRotate:this.navigatorRotate,homeFillsViewer:this.homeFillsViewer,margins:this.viewportMargins}),this.viewport._setContentBounds(this.world.getHomeBounds(),this.world.getContentFactor()),this.imageLoader=new e.ImageLoader({jobLimit:this.imageLoaderLimit,timeout:r.timeout}),this.tileCache=new e.TileCache({maxImageCacheCount:this.maxImageCacheCount}),this.drawer=new e.Drawer({viewer:this,viewport:this.viewport,element:this.canvas,debugGridColor:this.debugGridColor}),this.overlaysContainer=e.makeNeutralElement("div"),this.canvas.appendChild(this.overlaysContainer),this.drawer.canRotate()||(this.rotateLeft&&(o=this.buttons.buttons.indexOf(this.rotateLeft),this.buttons.buttons.splice(o,1),this.buttons.element.removeChild(this.rotateLeft.element)),this.rotateRight&&(o=this.buttons.buttons.indexOf(this.rotateRight),this.buttons.buttons.splice(o,1),this.buttons.element.removeChild(this.rotateRight.element))),this.showNavigator&&(this.navigator=new e.Navigator({id:this.navigatorId,position:this.navigatorPosition,sizeRatio:this.navigatorSizeRatio,maintainSizeRatio:this.navigatorMaintainSizeRatio,top:this.navigatorTop,left:this.navigatorLeft,width:this.navigatorWidth,height:this.navigatorHeight,autoResize:this.navigatorAutoResize,autoFade:this.navigatorAutoFade,prefixUrl:this.prefixUrl,viewer:this,navigatorRotate:this.navigatorRotate,crossOriginPolicy:this.crossOriginPolicy})),this.sequenceMode&&this.bindSequenceControls(),this.tileSources&&this.open(this.tileSources),o=0;o<this.customControls.length;o++)this.addControl(this.customControls[o].id,{anchor:this.customControls[o].anchor});e.requestAnimationFrame(function(){l(c)})},e.extend(e.Viewer.prototype,e.EventSource.prototype,e.ControlDock.prototype,{isOpen:function(){return!!this.world.getItemCount()},openDzi:function(t){return e.console.error("[Viewer.openDzi] this function is deprecated; use Viewer.open() instead."),this.open(t)},openTileSource:function(t){return e.console.error("[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead."),this.open(t)},open:function(t,n){var i=this;if(this.close(),t){if(this.sequenceMode&&e.isArray(t))return this.referenceStrip&&(this.referenceStrip.destroy(),this.referenceStrip=null),void 0===n||isNaN(n)||(this.initialPage=n),this.tileSources=t,this._sequenceIndex=Math.max(0,Math.min(this.tileSources.length-1,this.initialPage)),this.tileSources.length&&(this.open(this.tileSources[this._sequenceIndex]),this.showReferenceStrip&&this.addReferenceStrip()),void this._updateSequenceButtons(this._sequenceIndex);if(e.isArray(t)||(t=[t]),t.length){this._opening=!0;for(var o,s=t.length,a=0,l=0,u=function(){if(a+l===s)if(a){!i._firstOpen&&i.preserveViewport||(i.viewport.goHome(!0),i.viewport.update()),i._firstOpen=!1;var e=t[0];if(e.tileSource&&(e=e.tileSource),i.overlays&&!i.preserveOverlays)for(var n=0;n<i.overlays.length;n++)i.currentOverlays[n]=r(i,i.overlays[n]);i._drawOverlays(),i._opening=!1,i.raiseEvent("open",{source:e})}else i._opening=!1,i.raiseEvent("open-failed",o)},c=function(t){e.isPlainObject(t)&&t.tileSource||(t={tileSource:t}),void 0!==t.index&&(e.console.error("[Viewer.open] setting indexes here is not supported; use addTiledImage instead"),delete t.index),void 0===t.collectionImmediately&&(t.collectionImmediately=!0);var n=t.success;t.success=function(e){if(a++,t.tileSource.overlays)for(var r=0;r<t.tileSource.overlays.length;r++)i.addOverlay(t.tileSource.overlays[r]);n&&n(e),u()};var r=t.error;t.error=function(e){l++,o||(o=e),r&&r(e),u()},i.addTiledImage(t)},h=0;h<t.length;h++)c(t[h]);return this}}},close:function(){return t[this.hash]?(this._opening=!1,this.navigator&&this.navigator.close(),this.preserveOverlays||(this.clearOverlays(),this.overlaysContainer.innerHTML=""),t[this.hash].animating=!1,this.world.removeAll(),this.imageLoader.clear(),this.raiseEvent("close"),this):this},destroy:function(){if(t[this.hash]){if(this.close(),this.clearOverlays(),this.overlaysContainer.innerHTML="",this.referenceStrip&&(this.referenceStrip.destroy(),this.referenceStrip=null),null!==this._updateRequestId&&(e.cancelAnimationFrame(this._updateRequestId),this._updateRequestId=null),this.drawer&&this.drawer.destroy(),this.removeAllHandlers(),this.element)for(;this.element.firstChild;)this.element.removeChild(this.element.firstChild);this.innerTracker&&this.innerTracker.destroy(),this.outerTracker&&this.outerTracker.destroy(),t[this.hash]=null,delete t[this.hash],this.canvas=null,this.container=null,this.element=null}},isMouseNavEnabled:function(){return this.innerTracker.isTracking()},setMouseNavEnabled:function(e){return this.innerTracker.setTracking(e),this.outerTracker.setTracking(e),this.raiseEvent("mouse-enabled",{enabled:e}),this},areControlsEnabled:function(){var e,t=this.controls.length;for(e=0;e<this.controls.length;e++)t=t&&this.controls[e].isVisibile();return t},setControlsEnabled:function(e){return e?u(this):l(this),this.raiseEvent("controls-enabled",{enabled:e}),this},setDebugMode:function(e){for(var t=0;t<this.world.getItemCount();t++)this.world.getItemAt(t).debugMode=e;this.debugMode=e,this.forceRedraw()},isFullPage:function(){return t[this.hash].fullPage},setFullPage:function(n){var i,r,o=document.body,s=o.style,a=document.documentElement.style,l=this;if(n==this.isFullPage())return this;var u={fullPage:n,preventDefaultAction:!1};if(this.raiseEvent("pre-full-page",u),u.preventDefaultAction)return this;if(n){for(this.elementSize=e.getElementSize(this.element),this.pageScroll=e.getPageScroll(),this.elementMargin=this.element.style.margin,this.element.style.margin="0",this.elementPadding=this.element.style.padding,this.element.style.padding="0",this.bodyMargin=s.margin,this.docMargin=a.margin,s.margin="0",a.margin="0",this.bodyPadding=s.padding,this.docPadding=a.padding,s.padding="0",a.padding="0",this.bodyWidth=s.width,this.docWidth=a.width,s.width="100%",a.width="100%",this.bodyHeight=s.height,this.docHeight=a.height,s.height="100%",a.height="100%",this.previousBody=[],t[this.hash].prevElementParent=this.element.parentNode,t[this.hash].prevNextSibling=this.element.nextSibling,t[this.hash].prevElementWidth=this.element.style.width,t[this.hash].prevElementHeight=this.element.style.height,i=o.childNodes.length,r=0;r<i;r++)this.previousBody.push(o.childNodes[0]),o.removeChild(o.childNodes[0]);this.toolbar&&this.toolbar.element&&(this.toolbar.parentNode=this.toolbar.element.parentNode,this.toolbar.nextSibling=this.toolbar.element.nextSibling,o.appendChild(this.toolbar.element),e.addClass(this.toolbar.element,"fullpage")),e.addClass(this.element,"fullpage"),o.appendChild(this.element),this.element.style.height=e.getWindowSize().y+"px",this.element.style.width=e.getWindowSize().x+"px",this.toolbar&&this.toolbar.element&&(this.element.style.height=e.getElementSize(this.element).y-e.getElementSize(this.toolbar.element).y+"px"),t[this.hash].fullPage=!0,e.delegate(this,P)({})}else{for(this.element.style.margin=this.elementMargin,this.element.style.padding=this.elementPadding,s.margin=this.bodyMargin,a.margin=this.docMargin,s.padding=this.bodyPadding,a.padding=this.docPadding,s.width=this.bodyWidth,a.width=this.docWidth,s.height=this.bodyHeight,a.height=this.docHeight,o.removeChild(this.element),i=this.previousBody.length,r=0;r<i;r++)o.appendChild(this.previousBody.shift());e.removeClass(this.element,"fullpage"),t[this.hash].prevElementParent.insertBefore(this.element,t[this.hash].prevNextSibling),this.toolbar&&this.toolbar.element&&(o.removeChild(this.toolbar.element),e.removeClass(this.toolbar.element,"fullpage"),this.toolbar.parentNode.insertBefore(this.toolbar.element,this.toolbar.nextSibling),delete this.toolbar.parentNode,delete this.toolbar.nextSibling),this.element.style.width=t[this.hash].prevElementWidth,this.element.style.height=t[this.hash].prevElementHeight;var c=0,h=function(){e.setPageScroll(l.pageScroll);var t=e.getPageScroll();++c<10&&(t.x!==l.pageScroll.x||t.y!==l.pageScroll.y)&&e.requestAnimationFrame(h)};e.requestAnimationFrame(h),t[this.hash].fullPage=!1,e.delegate(this,C)({})}return this.navigator&&this.viewport&&this.navigator.update(this.viewport),this.raiseEvent("full-page",{fullPage:n}),this},setFullScreen:function(t){var n=this;if(!e.supportsFullScreen)return this.setFullPage(t);if(e.isFullScreen()===t)return this;var i={fullScreen:t,preventDefaultAction:!1};if(this.raiseEvent("pre-full-screen",i),i.preventDefaultAction)return this;if(t){if(this.setFullPage(!0),!this.isFullPage())return this;this.fullPageStyleWidth=this.element.style.width,this.fullPageStyleHeight=this.element.style.height,this.element.style.width="100%",this.element.style.height="100%";var r=function(){var t=e.isFullScreen();t||(e.removeEvent(document,e.fullScreenEventName,r),e.removeEvent(document,e.fullScreenErrorEventName,r),n.setFullPage(!1),n.isFullPage()&&(n.element.style.width=n.fullPageStyleWidth,n.element.style.height=n.fullPageStyleHeight)),n.navigator&&n.viewport&&n.navigator.update(n.viewport),n.raiseEvent("full-screen",{fullScreen:t})};e.addEvent(document,e.fullScreenEventName,r),e.addEvent(document,e.fullScreenErrorEventName,r),e.requestFullScreen(document.body)}else e.exitFullScreen();return this},isVisible:function(){return"hidden"!=this.container.style.visibility},setVisible:function(e){return this.container.style.visibility=e?"":"hidden",this.raiseEvent("visible",{visible:e}),this},addTiledImage:function(t){e.console.assert(t,"[Viewer.addTiledImage] options is required"),e.console.assert(t.tileSource,"[Viewer.addTiledImage] options.tileSource is required"),e.console.assert(!t.replace||t.index>-1&&t.index<this.world.getItemCount(),"[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world");var n=this;t.replace&&(t.replaceItem=n.world.getItemAt(t.index)),this._hideMessage(),void 0===t.placeholderFillStyle&&(t.placeholderFillStyle=this.placeholderFillStyle),void 0===t.opacity&&(t.opacity=this.opacity),void 0===t.preload&&(t.preload=this.preload),void 0===t.compositeOperation&&(t.compositeOperation=this.compositeOperation),void 0===t.crossOriginPolicy&&(t.crossOriginPolicy=void 0!==t.tileSource.crossOriginPolicy?t.tileSource.crossOriginPolicy:this.crossOriginPolicy),void 0===t.ajaxWithCredentials&&(t.ajaxWithCredentials=this.ajaxWithCredentials),void 0===t.loadTilesWithAjax&&(t.loadTilesWithAjax=this.loadTilesWithAjax),void 0===t.ajaxHeaders||null===t.ajaxHeaders?t.ajaxHeaders=this.ajaxHeaders:e.isPlainObject(t.ajaxHeaders)&&e.isPlainObject(this.ajaxHeaders)&&(t.ajaxHeaders=e.extend({},this.ajaxHeaders,t.ajaxHeaders));var i={options:t};function r(e){for(var r=0;r<n._loadQueue.length;r++)if(n._loadQueue[r]===i){n._loadQueue.splice(r,1);break}0===n._loadQueue.length&&o(i),n.raiseEvent("add-item-failed",e),t.error&&t.error(e)}function o(e){n.collectionMode&&(n.world.arrange({immediately:e.options.collectionImmediately,rows:n.collectionRows,columns:n.collectionColumns,layout:n.collectionLayout,tileSize:n.collectionTileSize,tileMargin:n.collectionTileMargin}),n.world.setAutoRefigureSizes(!0))}function s(){for(var t,i,r;n._loadQueue.length&&(t=n._loadQueue[0]).tileSource;){if(n._loadQueue.splice(0,1),t.options.replace){var s=n.world.getIndexOfItem(t.options.replaceItem);-1!=s&&(t.options.index=s),n.world.removeItem(t.options.replaceItem)}i=new e.TiledImage({viewer:n,source:t.tileSource,viewport:n.viewport,drawer:n.drawer,tileCache:n.tileCache,imageLoader:n.imageLoader,x:t.options.x,y:t.options.y,width:t.options.width,height:t.options.height,fitBounds:t.options.fitBounds,fitBoundsPlacement:t.options.fitBoundsPlacement,clip:t.options.clip,placeholderFillStyle:t.options.placeholderFillStyle,opacity:t.options.opacity,preload:t.options.preload,degrees:t.options.degrees,compositeOperation:t.options.compositeOperation,springStiffness:n.springStiffness,animationTime:n.animationTime,minZoomImageRatio:n.minZoomImageRatio,wrapHorizontal:n.wrapHorizontal,wrapVertical:n.wrapVertical,immediateRender:n.immediateRender,blendTime:n.blendTime,alwaysBlend:n.alwaysBlend,minPixelRatio:n.minPixelRatio,smoothTileEdgesMinZoom:n.smoothTileEdgesMinZoom,iOSDevice:n.iOSDevice,crossOriginPolicy:t.options.crossOriginPolicy,ajaxWithCredentials:t.options.ajaxWithCredentials,loadTilesWithAjax:t.options.loadTilesWithAjax,ajaxHeaders:t.options.ajaxHeaders,debugMode:n.debugMode}),n.collectionMode&&n.world.setAutoRefigureSizes(!1),n.world.addItem(i,{index:t.options.index}),0===n._loadQueue.length&&o(t),1!==n.world.getItemCount()||n.preserveViewport||n.viewport.goHome(!0),n.navigator&&(r=e.extend({},t.options,{replace:!1,originalTiledImage:i,tileSource:t.tileSource}),n.navigator.addTiledImage(r)),t.options.success&&t.options.success({item:i})}}e.isArray(t.tileSource)?setTimeout(function(){r({message:"[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",source:t.tileSource,options:t})}):(this._loadQueue.push(i),function(t,n,i,r,o){var s=t;if("string"==e.type(n))if(n.match(/^\s*<.*>\s*$/))n=e.parseXml(n);else if(n.match(/^\s*[\{\[].*[\}\]]\s*$/))try{var a=e.parseJSON(n);n=a}catch(e){}function l(e,t){e.ready?r(e):(e.addHandler("ready",function(){r(e)}),e.addHandler("open-failed",function(e){o({message:e.message,source:t})}))}setTimeout(function(){if("string"==e.type(n))(n=new e.TileSource({url:n,crossOriginPolicy:void 0!==i.crossOriginPolicy?i.crossOriginPolicy:t.crossOriginPolicy,ajaxWithCredentials:t.ajaxWithCredentials,ajaxHeaders:t.ajaxHeaders,useCanvas:t.useCanvas,success:function(e){r(e.tileSource)}})).addHandler("open-failed",function(e){o(e)});else if(e.isPlainObject(n)||n.nodeType)if(void 0!==n.crossOriginPolicy||void 0===i.crossOriginPolicy&&void 0===t.crossOriginPolicy||(n.crossOriginPolicy=void 0!==i.crossOriginPolicy?i.crossOriginPolicy:t.crossOriginPolicy),void 0===n.ajaxWithCredentials&&(n.ajaxWithCredentials=t.ajaxWithCredentials),void 0===n.useCanvas&&(n.useCanvas=t.useCanvas),e.isFunction(n.getTileUrl)){var a=new e.TileSource(n);a.getTileUrl=n.getTileUrl,r(a)}else{var u=e.TileSource.determineType(s,n);if(!u)return void o({message:"Unable to load TileSource",source:n});var c=u.prototype.configure.apply(s,[n]);l(new u(c),n)}else l(n,n)})}(this,t.tileSource,t,function(e){i.tileSource=e,s()},function(e){e.options=t,r(e),s()}))},addSimpleImage:function(t){e.console.assert(t,"[Viewer.addSimpleImage] options is required"),e.console.assert(t.url,"[Viewer.addSimpleImage] options.url is required");var n=e.extend({},t,{tileSource:{type:"image",url:t.url}});delete n.url,this.addTiledImage(n)},addLayer:function(t){var n=this;e.console.error("[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.");var i=e.extend({},t,{success:function(e){n.raiseEvent("add-layer",{options:t,drawer:e.item})},error:function(e){n.raiseEvent("add-layer-failed",e)}});return this.addTiledImage(i),this},getLayerAtLevel:function(t){return e.console.error("[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead."),this.world.getItemAt(t)},getLevelOfLayer:function(t){return e.console.error("[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead."),this.world.getIndexOfItem(t)},getLayersCount:function(){return e.console.error("[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead."),this.world.getItemCount()},setLayerLevel:function(t,n){return e.console.error("[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead."),this.world.setItemIndex(t,n)},removeLayer:function(t){return e.console.error("[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead."),this.world.removeItem(t)},forceRedraw:function(){return t[this.hash].forceRedraw=!0,this},bindSequenceControls:function(){var t=e.delegate(this,c),n=e.delegate(this,h),i=e.delegate(this,q),r=e.delegate(this,W),o=this.navImages,s=!0;return this.showSequenceControl&&((this.previousButton||this.nextButton)&&(s=!1),this.previousButton=new e.Button({element:this.previousButton?e.getElement(this.previousButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.PreviousPage"),srcRest:k(this.prefixUrl,o.previous.REST),srcGroup:k(this.prefixUrl,o.previous.GROUP),srcHover:k(this.prefixUrl,o.previous.HOVER),srcDown:k(this.prefixUrl,o.previous.DOWN),onRelease:r,onFocus:t,onBlur:n}),this.nextButton=new e.Button({element:this.nextButton?e.getElement(this.nextButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.NextPage"),srcRest:k(this.prefixUrl,o.next.REST),srcGroup:k(this.prefixUrl,o.next.GROUP),srcHover:k(this.prefixUrl,o.next.HOVER),srcDown:k(this.prefixUrl,o.next.DOWN),onRelease:i,onFocus:t,onBlur:n}),this.navPrevNextWrap||this.previousButton.disable(),this.tileSources&&this.tileSources.length||this.nextButton.disable(),s&&(this.paging=new e.ButtonGroup({buttons:[this.previousButton,this.nextButton],clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold}),this.pagingControl=this.paging.element,this.toolbar?this.toolbar.addControl(this.pagingControl,{anchor:e.ControlAnchor.BOTTOM_RIGHT}):this.addControl(this.pagingControl,{anchor:this.sequenceControlAnchor||e.ControlAnchor.TOP_LEFT}))),this},bindStandardControls:function(){var t=e.delegate(this,O),n=e.delegate(this,I),i=e.delegate(this,B),r=e.delegate(this,D),o=e.delegate(this,M),s=e.delegate(this,H),a=e.delegate(this,z),l=e.delegate(this,F),u=e.delegate(this,j),d=e.delegate(this,c),p=e.delegate(this,h),f=this.navImages,g=[],m=!0;return this.showNavigationControl&&((this.zoomInButton||this.zoomOutButton||this.homeButton||this.fullPageButton||this.rotateLeftButton||this.rotateRightButton)&&(m=!1),this.showZoomControl&&(g.push(this.zoomInButton=new e.Button({element:this.zoomInButton?e.getElement(this.zoomInButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.ZoomIn"),srcRest:k(this.prefixUrl,f.zoomIn.REST),srcGroup:k(this.prefixUrl,f.zoomIn.GROUP),srcHover:k(this.prefixUrl,f.zoomIn.HOVER),srcDown:k(this.prefixUrl,f.zoomIn.DOWN),onPress:t,onRelease:n,onClick:i,onEnter:t,onExit:n,onFocus:d,onBlur:p})),g.push(this.zoomOutButton=new e.Button({element:this.zoomOutButton?e.getElement(this.zoomOutButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.ZoomOut"),srcRest:k(this.prefixUrl,f.zoomOut.REST),srcGroup:k(this.prefixUrl,f.zoomOut.GROUP),srcHover:k(this.prefixUrl,f.zoomOut.HOVER),srcDown:k(this.prefixUrl,f.zoomOut.DOWN),onPress:r,onRelease:n,onClick:o,onEnter:r,onExit:n,onFocus:d,onBlur:p}))),this.showHomeControl&&g.push(this.homeButton=new e.Button({element:this.homeButton?e.getElement(this.homeButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.Home"),srcRest:k(this.prefixUrl,f.home.REST),srcGroup:k(this.prefixUrl,f.home.GROUP),srcHover:k(this.prefixUrl,f.home.HOVER),srcDown:k(this.prefixUrl,f.home.DOWN),onRelease:s,onFocus:d,onBlur:p})),this.showFullPageControl&&g.push(this.fullPageButton=new e.Button({element:this.fullPageButton?e.getElement(this.fullPageButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.FullPage"),srcRest:k(this.prefixUrl,f.fullpage.REST),srcGroup:k(this.prefixUrl,f.fullpage.GROUP),srcHover:k(this.prefixUrl,f.fullpage.HOVER),srcDown:k(this.prefixUrl,f.fullpage.DOWN),onRelease:a,onFocus:d,onBlur:p})),this.showRotationControl&&(g.push(this.rotateLeftButton=new e.Button({element:this.rotateLeftButton?e.getElement(this.rotateLeftButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.RotateLeft"),srcRest:k(this.prefixUrl,f.rotateleft.REST),srcGroup:k(this.prefixUrl,f.rotateleft.GROUP),srcHover:k(this.prefixUrl,f.rotateleft.HOVER),srcDown:k(this.prefixUrl,f.rotateleft.DOWN),onRelease:l,onFocus:d,onBlur:p})),g.push(this.rotateRightButton=new e.Button({element:this.rotateRightButton?e.getElement(this.rotateRightButton):null,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,tooltip:e.getString("Tooltips.RotateRight"),srcRest:k(this.prefixUrl,f.rotateright.REST),srcGroup:k(this.prefixUrl,f.rotateright.GROUP),srcHover:k(this.prefixUrl,f.rotateright.HOVER),srcDown:k(this.prefixUrl,f.rotateright.DOWN),onRelease:u,onFocus:d,onBlur:p}))),m&&(this.buttons=new e.ButtonGroup({buttons:g,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold}),this.navControl=this.buttons.element,this.addHandler("open",e.delegate(this,N)),this.toolbar?this.toolbar.addControl(this.navControl,{anchor:this.navigationControlAnchor||e.ControlAnchor.TOP_LEFT}):this.addControl(this.navControl,{anchor:this.navigationControlAnchor||e.ControlAnchor.TOP_LEFT}))),this},currentPage:function(){return this._sequenceIndex},goToPage:function(e){return this.tileSources&&e>=0&&e<this.tileSources.length&&(this.raiseEvent("page",{page:e}),this._sequenceIndex=e,this._updateSequenceButtons(e),this.open(this.tileSources[e]),this.referenceStrip&&this.referenceStrip.setFocus(e)),this},addOverlay:function(t,n,i,s){var a;if(a=e.isPlainObject(t)?t:{element:t,location:n,placement:i,onDraw:s},t=e.getElement(a.element),o(this.currentOverlays,t)>=0)return this;var l=r(this,a);return this.currentOverlays.push(l),l.drawHTML(this.overlaysContainer,this.viewport),this.raiseEvent("add-overlay",{element:t,location:a.location,placement:a.placement}),this},updateOverlay:function(n,i,r){var s;return n=e.getElement(n),(s=o(this.currentOverlays,n))>=0&&(this.currentOverlays[s].update(i,r),t[this.hash].forceRedraw=!0,this.raiseEvent("update-overlay",{element:n,location:i,placement:r})),this},removeOverlay:function(n){var i;return n=e.getElement(n),(i=o(this.currentOverlays,n))>=0&&(this.currentOverlays[i].destroy(),this.currentOverlays.splice(i,1),t[this.hash].forceRedraw=!0,this.raiseEvent("remove-overlay",{element:n})),this},clearOverlays:function(){for(;this.currentOverlays.length>0;)this.currentOverlays.pop().destroy();return t[this.hash].forceRedraw=!0,this.raiseEvent("clear-overlay",{}),this},getOverlayById:function(t){var n;return t=e.getElement(t),(n=o(this.currentOverlays,t))>=0?this.currentOverlays[n]:null},_updateSequenceButtons:function(e){this.nextButton&&(this.tileSources&&this.tileSources.length-1!==e?this.nextButton.enable():this.navPrevNextWrap||this.nextButton.disable()),this.previousButton&&(e>0?this.previousButton.enable():this.navPrevNextWrap||this.previousButton.disable())},_showMessage:function(t){this._hideMessage();var n=e.makeNeutralElement("div");n.appendChild(document.createTextNode(t)),this.messageDiv=e.makeCenteredNode(n),e.addClass(this.messageDiv,"openseadragon-message"),this.container.appendChild(this.messageDiv)},_hideMessage:function(){var e=this.messageDiv;e&&(e.parentNode.removeChild(e),delete this.messageDiv)},gestureSettingsByDeviceType:function(e){switch(e){case"mouse":return this.gestureSettingsMouse;case"touch":return this.gestureSettingsTouch;case"pen":return this.gestureSettingsPen;default:return this.gestureSettingsUnknown}},_drawOverlays:function(){var e,t=this.currentOverlays.length;for(e=0;e<t;e++)this.currentOverlays[e].drawHTML(this.overlaysContainer,this.viewport)},_cancelPendingImages:function(){this._loadQueue=[]},removeReferenceStrip:function(){this.showReferenceStrip=!1,this.referenceStrip&&(this.referenceStrip.destroy(),this.referenceStrip=null)},addReferenceStrip:function(){if(this.showReferenceStrip=!0,this.sequenceMode){if(this.referenceStrip)return;this.tileSources.length&&this.tileSources.length>1&&(this.referenceStrip=new e.ReferenceStrip({id:this.referenceStripElement,position:this.referenceStripPosition,sizeRatio:this.referenceStripSizeRatio,scroll:this.referenceStripScroll,height:this.referenceStripHeight,width:this.referenceStripWidth,tileSources:this.tileSources,prefixUrl:this.prefixUrl,viewer:this}),this.referenceStrip.setFocus(this._sequenceIndex))}else e.console.warn('Attempting to display a reference strip while "sequenceMode" is off.')}})}(OpenSeadragon),function(e){function t(e){e.quick&&this.viewer.viewport&&(this.viewer.viewport.panTo(this.viewport.pointFromPixel(e.position)),this.viewer.viewport.applyConstraints())}function n(e){this.viewer.viewport&&(this.panHorizontal||(e.delta.x=0),this.panVertical||(e.delta.y=0),this.viewer.viewport.panBy(this.viewport.deltaPointsFromPixels(e.delta)),this.viewer.constrainDuringPan&&this.viewer.viewport.applyConstraints())}function i(e){e.insideElementPressed&&this.viewer.viewport&&this.viewer.viewport.applyConstraints()}function r(e){return this.viewer.raiseEvent("navigator-scroll",{tracker:e.eventSource,position:e.position,scroll:e.scroll,shift:e.shift,originalEvent:e.originalEvent}),!1}function o(e,t){e.style.webkitTransform="rotate("+t+"deg)",e.style.mozTransform="rotate("+t+"deg)",e.style.msTransform="rotate("+t+"deg)",e.style.oTransform="rotate("+t+"deg)",e.style.transform="rotate("+t+"deg)"}e.Navigator=function(s){var a,l,u,c,h=s.viewer,d=this;function p(e){o(d.displayRegionContainer,e),o(d.displayRegion,-e),d.viewport.setRotation(e)}(s.id?(this.element=document.getElementById(s.id),s.controlOptions={anchor:e.ControlAnchor.NONE,attachToViewer:!1,autoFade:!1}):(s.id="navigator-"+e.now(),this.element=e.makeNeutralElement("div"),s.controlOptions={anchor:e.ControlAnchor.TOP_RIGHT,attachToViewer:!0,autoFade:s.autoFade},s.position&&("BOTTOM_RIGHT"==s.position?s.controlOptions.anchor=e.ControlAnchor.BOTTOM_RIGHT:"BOTTOM_LEFT"==s.position?s.controlOptions.anchor=e.ControlAnchor.BOTTOM_LEFT:"TOP_RIGHT"==s.position?s.controlOptions.anchor=e.ControlAnchor.TOP_RIGHT:"TOP_LEFT"==s.position?s.controlOptions.anchor=e.ControlAnchor.TOP_LEFT:"ABSOLUTE"==s.position&&(s.controlOptions.anchor=e.ControlAnchor.ABSOLUTE,s.controlOptions.top=s.top,s.controlOptions.left=s.left,s.controlOptions.height=s.height,s.controlOptions.width=s.width))),this.element.id=s.id,this.element.className+=" navigator",(s=e.extend(!0,{sizeRatio:e.DEFAULT_SETTINGS.navigatorSizeRatio},s,{element:this.element,tabIndex:-1,showNavigator:!1,mouseNavEnabled:!1,showNavigationControl:!1,showSequenceControl:!1,immediateRender:!0,blendTime:0,animationTime:0,autoResize:s.autoResize,minZoomImageRatio:1})).minPixelRatio=this.minPixelRatio=h.minPixelRatio,e.setElementTouchActionNone(this.element),this.borderWidth=2,this.fudge=new e.Point(1,1),this.totalBorderWidths=new e.Point(2*this.borderWidth,2*this.borderWidth).minus(this.fudge),s.controlOptions.anchor!=e.ControlAnchor.NONE&&(u=this.element.style,c=this.borderWidth,u.margin="0px",u.border=c+"px solid #555",u.padding="0px",u.background="#000",u.opacity=.8,u.overflow="hidden"),this.displayRegion=e.makeNeutralElement("div"),this.displayRegion.id=this.element.id+"-displayregion",this.displayRegion.className="displayregion",function(e,t){e.position="relative",e.top="0px",e.left="0px",e.fontSize="0px",e.overflow="hidden",e.border=t+"px solid #900",e.margin="0px",e.padding="0px",e.background="transparent",e.float="left",e.cssFloat="left",e.styleFloat="left",e.zIndex=999999999,e.cursor="default"}(this.displayRegion.style,this.borderWidth),this.displayRegionContainer=e.makeNeutralElement("div"),this.displayRegionContainer.id=this.element.id+"-displayregioncontainer",this.displayRegionContainer.className="displayregioncontainer",this.displayRegionContainer.style.width="100%",this.displayRegionContainer.style.height="100%",h.addControl(this.element,s.controlOptions),this._resizeWithViewer=s.controlOptions.anchor!=e.ControlAnchor.ABSOLUTE&&s.controlOptions.anchor!=e.ControlAnchor.NONE,this._resizeWithViewer&&(s.width&&s.height?(this.element.style.height="number"==typeof s.height?s.height+"px":s.height,this.element.style.width="number"==typeof s.width?s.width+"px":s.width):(a=e.getElementSize(h.element),this.element.style.height=Math.round(a.y*s.sizeRatio)+"px",this.element.style.width=Math.round(a.x*s.sizeRatio)+"px",this.oldViewerSize=a),l=e.getElementSize(this.element),this.elementArea=l.x*l.y),this.oldContainerSize=new e.Point(0,0),e.Viewer.apply(this,[s]),this.displayRegionContainer.appendChild(this.displayRegion),this.element.getElementsByTagName("div")[0].appendChild(this.displayRegionContainer),s.navigatorRotate)&&(p(s.viewer.viewport?s.viewer.viewport.getRotation():s.viewer.degrees||0),s.viewer.addHandler("rotate",function(e){p(e.degrees)}));this.innerTracker.destroy(),this.innerTracker=new e.MouseTracker({element:this.element,dragHandler:e.delegate(this,n),clickHandler:e.delegate(this,t),releaseHandler:e.delegate(this,i),scrollHandler:e.delegate(this,r)}),this.addHandler("reset-size",function(){d.viewport&&d.viewport.goHome(!0)}),h.world.addHandler("item-index-change",function(e){window.setTimeout(function(){var t=d.world.getItemAt(e.previousIndex);d.world.setItemIndex(t,e.newIndex)},1)}),h.world.addHandler("remove-item",function(e){var t=e.item,n=d._getMatchingItem(t);n&&d.world.removeItem(n)}),this.update(h.viewport)},e.extend(e.Navigator.prototype,e.EventSource.prototype,e.Viewer.prototype,{updateSize:function(){if(this.viewport){var t=new e.Point(0===this.container.clientWidth?1:this.container.clientWidth,0===this.container.clientHeight?1:this.container.clientHeight);t.equals(this.oldContainerSize)||(this.viewport.resize(t,!0),this.viewport.goHome(!0),this.oldContainerSize=t,this.drawer.clear(),this.world.draw())}},update:function(t){var n,i,r,o,s,a;if(n=e.getElementSize(this.viewer.element),this._resizeWithViewer&&n.x&&n.y&&!n.equals(this.oldViewerSize)&&(this.oldViewerSize=n,this.maintainSizeRatio||!this.elementArea?(i=n.x*this.sizeRatio,r=n.y*this.sizeRatio):(i=Math.sqrt(this.elementArea*(n.x/n.y)),r=this.elementArea/i),this.element.style.width=Math.round(i)+"px",this.element.style.height=Math.round(r)+"px",this.elementArea||(this.elementArea=i*r),this.updateSize()),t&&this.viewport){o=t.getBoundsNoRotate(!0),s=this.viewport.pixelFromPointNoRotate(o.getTopLeft(),!1),a=this.viewport.pixelFromPointNoRotate(o.getBottomRight(),!1).minus(this.totalBorderWidths);var l=this.displayRegion.style;l.display=this.world.getItemCount()?"block":"none",l.top=Math.round(s.y)+"px",l.left=Math.round(s.x)+"px";var u=Math.abs(s.x-a.x),c=Math.abs(s.y-a.y);l.width=Math.round(Math.max(u,0))+"px",l.height=Math.round(Math.max(c,0))+"px"}},addTiledImage:function(t){var n=this,i=t.originalTiledImage;delete t.original;var r=e.extend({},t,{success:function(e){var t=e.item;function r(){n._matchBounds(t,i)}t._originalForNavigator=i,n._matchBounds(t,i,!0),i.addHandler("bounds-change",r),i.addHandler("clip-change",r),i.addHandler("opacity-change",function(){n._matchOpacity(t,i)}),i.addHandler("composite-operation-change",function(){n._matchCompositeOperation(t,i)})}});return e.Viewer.prototype.addTiledImage.apply(this,[r])},_getMatchingItem:function(e){for(var t,n=this.world.getItemCount(),i=0;i<n;i++)if((t=this.world.getItemAt(i))._originalForNavigator===e)return t;return null},_matchBounds:function(e,t,n){var i=t.getBoundsNoRotate();e.setPosition(i.getTopLeft(),n),e.setWidth(i.width,n),e.setRotation(t.getRotation(),n),e.setClip(t.getClip())},_matchOpacity:function(e,t){e.setOpacity(t.opacity)},_matchCompositeOperation:function(e,t){e.setCompositeOperation(t.compositeOperation)}})}(OpenSeadragon),function(e){var t={Errors:{Dzc:"Sorry, we don't support Deep Zoom Collections!",Dzi:"Hmm, this doesn't appear to be a valid Deep Zoom Image.",Xml:"Hmm, this doesn't appear to be a valid Deep Zoom Image.",ImageFormat:"Sorry, we don't support {0}-based Deep Zoom Images.",Security:"It looks like a security restriction stopped us from loading this Deep Zoom Image.",Status:"This space unintentionally left blank ({0} {1}).",OpenFailed:"Unable to open {0}: {1}"},Tooltips:{FullPage:"Toggle full page",Home:"Go home",ZoomIn:"Zoom in",ZoomOut:"Zoom out",NextPage:"Next page",PreviousPage:"Previous page",RotateLeft:"Rotate left",RotateRight:"Rotate right"}};e.extend(e,{getString:function(n){var i,r=n.split("."),o=null,s=arguments,a=t;for(i=0;i<r.length-1;i++)a=a[r[i]]||{};return"string"!=typeof(o=a[r[i]])&&(e.console.log("Untranslated source string:",n),o=""),o.replace(/\{\d+\}/g,function(e){var t=parseInt(e.match(/\d+/),10)+1;return t<s.length?s[t]:""})},setString:function(e,n){var i,r=e.split("."),o=t;for(i=0;i<r.length-1;i++)o[r[i]]||(o[r[i]]={}),o=o[r[i]];o[r[i]]=n}})}(OpenSeadragon),function(e){e.Point=function(e,t){this.x="number"==typeof e?e:0,this.y="number"==typeof t?t:0},e.Point.prototype={clone:function(){return new e.Point(this.x,this.y)},plus:function(t){return new e.Point(this.x+t.x,this.y+t.y)},minus:function(t){return new e.Point(this.x-t.x,this.y-t.y)},times:function(t){return new e.Point(this.x*t,this.y*t)},divide:function(t){return new e.Point(this.x/t,this.y/t)},negate:function(){return new e.Point(-this.x,-this.y)},distanceTo:function(e){return Math.sqrt(Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2))},squaredDistanceTo:function(e){return Math.pow(this.x-e.x,2)+Math.pow(this.y-e.y,2)},apply:function(t){return new e.Point(t(this.x),t(this.y))},equals:function(t){return t instanceof e.Point&&this.x===t.x&&this.y===t.y},rotate:function(t,n){var i,r;if(n=n||new e.Point(0,0),t%90==0){switch(e.positiveModulo(t,360)){case 0:i=1,r=0;break;case 90:i=0,r=1;break;case 180:i=-1,r=0;break;case 270:i=0,r=-1}}else{var o=t*Math.PI/180;i=Math.cos(o),r=Math.sin(o)}var s=i*(this.x-n.x)-r*(this.y-n.y)+n.x,a=r*(this.x-n.x)+i*(this.y-n.y)+n.y;return new e.Point(s,a)},toString:function(){return"("+Math.round(100*this.x)/100+","+Math.round(100*this.y)/100+")"}}}(OpenSeadragon),function(e){e.TileSource=function(t,n,i,r,o,s){var a,l,u=this,c=arguments;if(a=e.isPlainObject(t)?t:{width:c[0],height:c[1],tileSize:c[2],tileOverlap:c[3],minLevel:c[4],maxLevel:c[5]},e.EventSource.call(this),e.extend(!0,this,a),!this.success)for(l=0;l<arguments.length;l++)if(e.isFunction(arguments[l])){this.success=arguments[l];break}this.success&&this.addHandler("ready",function(e){u.success(e)}),"string"==e.type(arguments[0])&&(this.url=arguments[0]),this.url?(this.aspectRatio=1,this.dimensions=new e.Point(10,10),this._tileWidth=0,this._tileHeight=0,this.tileOverlap=0,this.minLevel=0,this.maxLevel=0,this.ready=!1,this.getImageInfo(this.url)):(this.ready=!0,this.aspectRatio=a.width&&a.height?a.width/a.height:1,this.dimensions=new e.Point(a.width,a.height),this.tileSize?(this._tileWidth=this._tileHeight=this.tileSize,delete this.tileSize):(this.tileWidth?(this._tileWidth=this.tileWidth,delete this.tileWidth):this._tileWidth=0,this.tileHeight?(this._tileHeight=this.tileHeight,delete this.tileHeight):this._tileHeight=0),this.tileOverlap=a.tileOverlap?a.tileOverlap:0,this.minLevel=a.minLevel?a.minLevel:0,this.maxLevel=void 0!==a.maxLevel&&null!==a.maxLevel?a.maxLevel:a.width&&a.height?Math.ceil(Math.log(Math.max(a.width,a.height))/Math.log(2)):0,this.success&&e.isFunction(this.success)&&this.success(this))},e.TileSource.prototype={getTileSize:function(t){return e.console.error("[TileSource.getTileSize] is deprecated.Use TileSource.getTileWidth() and TileSource.getTileHeight() instead"),this._tileWidth},getTileWidth:function(e){return this._tileWidth?this._tileWidth:this.getTileSize(e)},getTileHeight:function(e){return this._tileHeight?this._tileHeight:this.getTileSize(e)},getLevelScale:function(e){var t,n={};for(t=0;t<=this.maxLevel;t++)n[t]=1/Math.pow(2,this.maxLevel-t);return this.getLevelScale=function(e){return n[e]},this.getLevelScale(e)},getNumTiles:function(t){var n=this.getLevelScale(t),i=Math.ceil(n*this.dimensions.x/this.getTileWidth(t)),r=Math.ceil(n*this.dimensions.y/this.getTileHeight(t));return new e.Point(i,r)},getPixelRatio:function(t){var n=this.dimensions.times(this.getLevelScale(t)),i=1/n.x,r=1/n.y;return new e.Point(i,r)},getClosestLevel:function(){var e,t;for(e=this.minLevel+1;e<=this.maxLevel&&!((t=this.getNumTiles(e)).x>1||t.y>1);e++);return e-1},getTileAtPoint:function(t,n){var i=n.x>=0&&n.x<=1&&n.y>=0&&n.y<=1/this.aspectRatio;e.console.assert(i,"[TileSource.getTileAtPoint] must be called with a valid point.");var r=this.dimensions.x*this.getLevelScale(t),o=n.x*r,s=n.y*r,a=Math.floor(o/this.getTileWidth(t)),l=Math.floor(s/this.getTileHeight(t));n.x>=1&&(a=this.getNumTiles(t).x-1);return n.y>=1/this.aspectRatio-1e-16&&(l=this.getNumTiles(t).y-1),new e.Point(a,l)},getTileBounds:function(t,n,i){var r=this.dimensions.times(this.getLevelScale(t)),o=this.getTileWidth(t),s=this.getTileHeight(t),a=0===n?0:o*n-this.tileOverlap,l=0===i?0:s*i-this.tileOverlap,u=o+(0===n?1:2)*this.tileOverlap,c=s+(0===i?1:2)*this.tileOverlap,h=1/r.x;return u=Math.min(u,r.x-a),c=Math.min(c,r.y-l),new e.Rect(a*h,l*h,u*h,c*h)},getImageInfo:function(t){var n,i,r,o,s,a,l,u=this;t&&(l=(a=(s=t.split("/"))[s.length-1]).lastIndexOf("."))>-1&&(s[s.length-1]=a.slice(0,l)),i=function(n){"string"==typeof n&&(n=e.parseXml(n));var i=e.TileSource.determineType(u,n,t);i?(void 0===(o=i.prototype.configure.apply(u,[n,t])).ajaxWithCredentials&&(o.ajaxWithCredentials=u.ajaxWithCredentials),r=new i(o),u.ready=!0,u.raiseEvent("ready",{tileSource:r})):u.raiseEvent("open-failed",{message:"Unable to load TileSource",source:t})},t.match(/\.js$/)?(n=t.split("/").pop().replace(".js",""),e.jsonp({url:t,async:!1,callbackName:n,callback:i})):e.makeAjaxRequest({url:t,withCredentials:this.ajaxWithCredentials,headers:this.ajaxHeaders,success:function(t){var n=function(t){var n,i,r=t.responseText,o=t.status;if(!t)throw new Error(e.getString("Errors.Security"));if(200!==t.status&&0!==t.status)throw o=t.status,n=404==o?"Not Found":t.statusText,new Error(e.getString("Errors.Status",o,n));if(r.match(/\s*<.*/))try{i=t.responseXML&&t.responseXML.documentElement?t.responseXML:e.parseXml(r)}catch(e){i=t.responseText}else if(r.match(/\s*[\{\[].*/))try{i=e.parseJSON(r)}catch(e){i=r}else i=r;return i}(t);i(n)},error:function(e,n){var i;try{i="HTTP "+e.status+" attempting to load TileSource"}catch(e){i=(void 0!==n&&n.toString?n.toString():"Unknown error")+" attempting to load TileSource"}u.raiseEvent("open-failed",{message:i,source:t})}})},supports:function(e,t){return!1},configure:function(e,t){throw new Error("Method not implemented.")},getTileUrl:function(e,t,n){throw new Error("Method not implemented.")},getTileAjaxHeaders:function(e,t,n){return{}},tileExists:function(e,t,n){var i=this.getNumTiles(e);return e>=this.minLevel&&e<=this.maxLevel&&t>=0&&n>=0&&t<i.x&&n<i.y}},e.extend(!0,e.TileSource.prototype,e.EventSource.prototype),e.TileSource.determineType=function(t,n,i){var r;for(r in OpenSeadragon)if(r.match(/.+TileSource$/)&&e.isFunction(OpenSeadragon[r])&&e.isFunction(OpenSeadragon[r].prototype.supports)&&OpenSeadragon[r].prototype.supports.call(t,n,i))return OpenSeadragon[r];e.console.error("No TileSource was able to open %s %s",i,n)}}(OpenSeadragon),function(e){function t(t,n){var i,r,o=n.Image,s=o.Url,a=o.Format,l=o.Size,u=o.DisplayRect||[],c=parseInt(l.Width,10),h=parseInt(l.Height,10),d=parseInt(o.TileSize,10),p=parseInt(o.Overlap,10),f=[];for(r=0;r<u.length;r++)i=u[r].Rect,f.push(new e.DisplayRect(parseInt(i.X,10),parseInt(i.Y,10),parseInt(i.Width,10),parseInt(i.Height,10),parseInt(i.MinLevel,10),parseInt(i.MaxLevel,10)));return e.extend(!0,{width:c,height:h,tileSize:d,tileOverlap:p,minLevel:null,maxLevel:null,tilesUrl:s,fileFormat:a,displayRects:f},n)}e.DziTileSource=function(t,n,i,r,o,s,a,l,u){var c,h,d,p;if(p=e.isPlainObject(t)?t:{width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4],fileFormat:arguments[5],displayRects:arguments[6],minLevel:arguments[7],maxLevel:arguments[8]},this._levelRects={},this.tilesUrl=p.tilesUrl,this.fileFormat=p.fileFormat,this.displayRects=p.displayRects,this.displayRects)for(c=this.displayRects.length-1;c>=0;c--)for(d=(h=this.displayRects[c]).minLevel;d<=h.maxLevel;d++)this._levelRects[d]||(this._levelRects[d]=[]),this._levelRects[d].push(h);e.TileSource.apply(this,[p])},e.extend(e.DziTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){var n;return e.Image?n=e.Image.xmlns:e.documentElement&&("Image"!=e.documentElement.localName&&"Image"!=e.documentElement.tagName||(n=e.documentElement.namespaceURI)),-1!==(n=(n||"").toLowerCase()).indexOf("schemas.microsoft.com/deepzoom/2008")||-1!==n.indexOf("schemas.microsoft.com/deepzoom/2009")},configure:function(n,i){var r;return r=e.isPlainObject(n)?t(this,n):function(n,i){if(!i||!i.documentElement)throw new Error(e.getString("Errors.Xml"));var r,o,s,a,l,u=i.documentElement,c=u.localName||u.tagName,h=i.documentElement.namespaceURI,d=null,p=[];if("Image"==c)try{if(void 0===(a=u.getElementsByTagName("Size")[0])&&(a=u.getElementsByTagNameNS(h,"Size")[0]),d={Image:{xmlns:"http://schemas.microsoft.com/deepzoom/2008",Url:u.getAttribute("Url"),Format:u.getAttribute("Format"),DisplayRect:null,Overlap:parseInt(u.getAttribute("Overlap"),10),TileSize:parseInt(u.getAttribute("TileSize"),10),Size:{Height:parseInt(a.getAttribute("Height"),10),Width:parseInt(a.getAttribute("Width"),10)}}},!e.imageFormatSupported(d.Image.Format))throw new Error(e.getString("Errors.ImageFormat",d.Image.Format.toUpperCase()));for(void 0===(r=u.getElementsByTagName("DisplayRect"))&&(r=u.getElementsByTagNameNS(h,"DisplayRect")[0]),l=0;l<r.length;l++)o=r[l],void 0===(s=o.getElementsByTagName("Rect")[0])&&(s=o.getElementsByTagNameNS(h,"Rect")[0]),p.push({Rect:{X:parseInt(s.getAttribute("X"),10),Y:parseInt(s.getAttribute("Y"),10),Width:parseInt(s.getAttribute("Width"),10),Height:parseInt(s.getAttribute("Height"),10),MinLevel:parseInt(o.getAttribute("MinLevel"),10),MaxLevel:parseInt(o.getAttribute("MaxLevel"),10)}});return p.length&&(d.Image.DisplayRect=p),t(n,d)}catch(t){throw t instanceof Error?t:new Error(e.getString("Errors.Dzi"))}else{if("Collection"==c)throw new Error(e.getString("Errors.Dzc"));if("Error"==c){var f=u.getElementsByTagName("Message")[0],g=f.firstChild.nodeValue;throw new Error(g)}}throw new Error(e.getString("Errors.Dzi"))}(this,n),i&&!r.tilesUrl&&(r.tilesUrl=i.replace(/([^\/]+?)(\.(dzi|xml|js)?(\?[^\/]*)?)?\/?$/,"$1_files/"),-1!=i.search(/\.(dzi|xml|js)\?/)?r.queryParams=i.match(/\?.*/):r.queryParams=""),r},getTileUrl:function(e,t,n){return[this.tilesUrl,e,"/",t,"_",n,".",this.fileFormat,this.queryParams].join("")},tileExists:function(e,t,n){var i,r,o,s,a,l,u,c=this._levelRects[e];if(!c||!c.length)return!0;for(u=c.length-1;u>=0;u--)if(!(e<(i=c[u]).minLevel||e>i.maxLevel)&&(r=this.getLevelScale(e),o=i.x*r,s=i.y*r,a=o+i.width*r,l=s+i.height*r,o=Math.floor(o/this._tileWidth),s=Math.floor(s/this._tileWidth),a=Math.ceil(a/this._tileWidth),l=Math.ceil(l/this._tileWidth),o<=t&&t<a&&s<=n&&n<l))return!0;return!1}})}(OpenSeadragon),function(e){e.IIIFTileSource=function(t){if(e.extend(!0,this,t),!(this.height&&this.width&&this["@id"]))throw new Error("IIIF required parameters not provided.");if(t.tileSizePerScaleFactor={},this.tile_width&&this.tile_height)t.tileWidth=this.tile_width,t.tileHeight=this.tile_height;else if(this.tile_width)t.tileSize=this.tile_width;else if(this.tile_height)t.tileSize=this.tile_height;else if(this.tiles)if(1==this.tiles.length)t.tileWidth=this.tiles[0].width,t.tileHeight=this.tiles[0].height||this.tiles[0].width,this.scale_factors=this.tiles[0].scaleFactors;else{this.scale_factors=[];for(var n=0;n<this.tiles.length;n++)for(var i=0;i<this.tiles[n].scaleFactors.length;i++){var r=this.tiles[n].scaleFactors[i];this.scale_factors.push(r),t.tileSizePerScaleFactor[r]={width:this.tiles[n].width,height:this.tiles[n].height||this.tiles[n].width}}}else if(u=t.profile,-1==["http://library.stanford.edu/iiif/image-api/compliance.html#level0","http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0","http://iiif.io/api/image/2/level0.json"].indexOf(u[0])||-1!=u.indexOf("sizeByW")){for(var o=Math.min(this.height,this.width),s=[256,512,1024],a=[],l=0;l<s.length;l++)s[l]<=o&&a.push(s[l]);a.length>0?t.tileSize=Math.max.apply(null,a):t.tileSize=o}else this.sizes&&this.sizes.length>0?(this.emulateLegacyImagePyramid=!0,t.levels=function(e){for(var t=[],n=0;n<e.sizes.length;n++)t.push({url:e["@id"]+"/full/"+e.sizes[n].width+",/0/default.jpg",width:e.sizes[n].width,height:e.sizes[n].height});return t.sort(function(e,t){return e.width-t.width})}(this),e.extend(!0,t,{width:t.levels[t.levels.length-1].width,height:t.levels[t.levels.length-1].height,tileSize:Math.max(t.height,t.width),tileOverlap:0,minLevel:0,maxLevel:t.levels.length-1}),this.levels=t.levels):e.console.error("Nothing in the info.json to construct image pyramids from");var u;t.maxLevel||this.emulateLegacyImagePyramid||(this.scale_factors?t.maxLevel=Math.floor(Math.pow(Math.max.apply(null,this.scale_factors),.5)):t.maxLevel=Number(Math.ceil(Math.log(Math.max(this.width,this.height),2)))),e.TileSource.apply(this,[t])},e.extend(e.IIIFTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){return!(!e.protocol||"http://iiif.io/api/image"!=e.protocol)||(!(!e["@context"]||"http://library.stanford.edu/iiif/image-api/1.1/context.json"!=e["@context"]&&"http://iiif.io/api/image/1/context.json"!=e["@context"])||(!(!e.profile||0!==e.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html"))||(!!(e.identifier&&e.width&&e.height)||!(!e.documentElement||"info"!=e.documentElement.tagName||"http://library.stanford.edu/iiif/image-api/ns/"!=e.documentElement.namespaceURI))))},configure:function(t,n){if(e.isPlainObject(t))return t["@context"]?t:(t["@context"]="http://iiif.io/api/image/1.0/context.json",t["@id"]=n.replace("/info.json",""),t);var i=function(t){if(!t||!t.documentElement)throw new Error(e.getString("Errors.Xml"));var n=t.documentElement,i=null;if("info"==n.tagName)try{return function t(n,i,r){var o,s;if(3==n.nodeType&&r)(s=n.nodeValue.trim()).match(/^\d*$/)&&(s=Number(s)),i[r]?(e.isArray(i[r])||(i[r]=[i[r]]),i[r].push(s)):i[r]=s;else if(1==n.nodeType)for(o=0;o<n.childNodes.length;o++)t(n.childNodes[o],i,n.nodeName)}(n,i={}),i}catch(t){throw t instanceof Error?t:new Error(e.getString("Errors.IIIF"))}throw new Error(e.getString("Errors.IIIF"))}(t);return i["@context"]="http://iiif.io/api/image/1.0/context.json",i["@id"]=n.replace("/info.xml",""),i},getTileWidth:function(t){if(this.emulateLegacyImagePyramid)return e.TileSource.prototype.getTileWidth.call(this,t);var n=Math.pow(2,this.maxLevel-t);return this.tileSizePerScaleFactor&&this.tileSizePerScaleFactor[n]?this.tileSizePerScaleFactor[n].width:this._tileWidth},getTileHeight:function(t){if(this.emulateLegacyImagePyramid)return e.TileSource.prototype.getTileHeight.call(this,t);var n=Math.pow(2,this.maxLevel-t);return this.tileSizePerScaleFactor&&this.tileSizePerScaleFactor[n]?this.tileSizePerScaleFactor[n].height:this._tileHeight},getLevelScale:function(t){if(this.emulateLegacyImagePyramid){var n=NaN;return this.levels.length>0&&t>=this.minLevel&&t<=this.maxLevel&&(n=this.levels[t].width/this.levels[this.maxLevel].width),n}return e.TileSource.prototype.getLevelScale.call(this,t)},getNumTiles:function(t){return this.emulateLegacyImagePyramid?this.getLevelScale(t)?new e.Point(1,1):new e.Point(0,0):e.TileSource.prototype.getNumTiles.call(this,t)},getTileAtPoint:function(t,n){return this.emulateLegacyImagePyramid?new e.Point(0,0):e.TileSource.prototype.getTileAtPoint.call(this,t,n)},getTileUrl:function(e,t,n){if(this.emulateLegacyImagePyramid){var i=null;return this.levels.length>0&&e>=this.minLevel&&e<=this.maxLevel&&(i=this.levels[e].url),i}var r,o,s,a,l,u,c,h,d,p,f,g=Math.pow(.5,this.maxLevel-e),m=Math.ceil(this.width*g),v=Math.ceil(this.height*g);return r=this.getTileWidth(e),o=this.getTileHeight(e),s=Math.ceil(r/g),a=Math.ceil(o/g),f=this["@context"].indexOf("/1.0/context.json")>-1||this["@context"].indexOf("/1.1/context.json")>-1||this["@context"].indexOf("/1/context.json")>-1?"native.jpg":"default.jpg",m<r&&v<o?(p=m+",",l="full"):(u=t*s,c=n*a,h=Math.min(s,this.width-u),d=Math.min(a,this.height-c),p=Math.ceil(h*g)+",",l=[u,c,h,d].join(",")),[this["@id"],l,p,"0",f].join("/")}})}(OpenSeadragon),function(e){e.OsmTileSource=function(t,n,i,r,o){var s;(s=e.isPlainObject(t)?t:{width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4]}).width&&s.height||(s.width=65572864,s.height=65572864),s.tileSize||(s.tileSize=256,s.tileOverlap=0),s.tilesUrl||(s.tilesUrl="http://tile.openstreetmap.org/"),s.minLevel=8,e.TileSource.apply(this,[s])},e.extend(e.OsmTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){return e.type&&"openstreetmaps"==e.type},configure:function(e,t){return e},getTileUrl:function(e,t,n){return this.tilesUrl+(e-8)+"/"+t+"/"+n+".png"}})}(OpenSeadragon),function(e){e.TmsTileSource=function(t,n,i,r,o){var s;s=e.isPlainObject(t)?t:{width:arguments[0],height:arguments[1],tileSize:arguments[2],tileOverlap:arguments[3],tilesUrl:arguments[4]};var a,l=256*Math.ceil(s.width/256),u=256*Math.ceil(s.height/256);a=l>u?l/256:u/256,s.maxLevel=Math.ceil(Math.log(a)/Math.log(2))-1,s.tileSize=256,s.width=l,s.height=u,e.TileSource.apply(this,[s])},e.extend(e.TmsTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){return e.type&&"tiledmapservice"==e.type},configure:function(e,t){return e},getTileUrl:function(e,t,n){var i=this.getNumTiles(e).y-1;return this.tilesUrl+e+"/"+t+"/"+(i-n)+".png"}})}(OpenSeadragon),function(e){e.ZoomifyTileSource=function(e){e.tileSize=256;var t={x:e.width,y:e.height};for(e.imageSizes=[{x:e.width,y:e.height}],e.gridSize=[this._getGridSize(e.width,e.height,e.tileSize)];parseInt(t.x,10)>e.tileSize||parseInt(t.y,10)>e.tileSize;)t.x=Math.floor(t.x/2),t.y=Math.floor(t.y/2),e.imageSizes.push({x:t.x,y:t.y}),e.gridSize.push(this._getGridSize(t.x,t.y,e.tileSize));e.imageSizes.reverse(),e.gridSize.reverse(),e.minLevel=0,e.maxLevel=e.gridSize.length-1,OpenSeadragon.TileSource.apply(this,[e])},e.extend(e.ZoomifyTileSource.prototype,e.TileSource.prototype,{_getGridSize:function(e,t,n){return{x:Math.ceil(e/n),y:Math.ceil(t/n)}},_calculateAbsoluteTileNumber:function(e,t,n){for(var i=0,r={},o=0;o<e;o++)i+=(r=this.gridSize[o]).x*r.y;return i+=(r=this.gridSize[e]).x*n+t},supports:function(e,t){return e.type&&"zoomifytileservice"==e.type},configure:function(e,t){return e},getTileUrl:function(e,t,n){var i,r=this._calculateAbsoluteTileNumber(e,t,n);return i=Math.floor(r/256),this.tilesUrl+"TileGroup"+i+"/"+e+"-"+t+"-"+n+".jpg"}})}(OpenSeadragon),function(e){function t(e,t){return t.levels}e.LegacyTileSource=function(t){var n,i,r;e.isArray(t)&&(n={type:"legacy-image-pyramid",levels:t}),n.levels=function(t){var n,i,r=[];for(i=0;i<t.length;i++)(n=t[i]).height&&n.width&&n.url?r.push({url:n.url,width:Number(n.width),height:Number(n.height)}):e.console.error("Unsupported image format: %s",n.url?n.url:"<no URL>");return r.sort(function(e,t){return e.height-t.height})}(n.levels),n.levels.length>0?(i=n.levels[n.levels.length-1].width,r=n.levels[n.levels.length-1].height):(i=0,r=0,e.console.error("No supported image formats found")),e.extend(!0,n,{width:i,height:r,tileSize:Math.max(r,i),tileOverlap:0,minLevel:0,maxLevel:n.levels.length>0?n.levels.length-1:0}),e.TileSource.apply(this,[n]),this.levels=n.levels},e.extend(e.LegacyTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){return e.type&&"legacy-image-pyramid"==e.type||e.documentElement&&"legacy-image-pyramid"==e.documentElement.getAttribute("type")},configure:function(n,i){return e.isPlainObject(n)?t(this,n):function(n,i){if(!i||!i.documentElement)throw new Error(e.getString("Errors.Xml"));var r,o,s=i.documentElement,a=s.tagName,l=null,u=[];if("image"==a)try{for(l={type:s.getAttribute("type"),levels:[]},u=s.getElementsByTagName("level"),o=0;o<u.length;o++)r=u[o],l.levels.push({url:r.getAttribute("url"),width:parseInt(r.getAttribute("width"),10),height:parseInt(r.getAttribute("height"),10)});return t(n,l)}catch(e){throw e instanceof Error?e:new Error("Unknown error parsing Legacy Image Pyramid XML.")}else{if("collection"==a)throw new Error("Legacy Image Pyramid Collections not yet supported.");if("error"==a)throw new Error("Error: "+i)}throw new Error("Unknown element "+a)}(this,n)},getLevelScale:function(e){var t=NaN;return this.levels.length>0&&e>=this.minLevel&&e<=this.maxLevel&&(t=this.levels[e].width/this.levels[this.maxLevel].width),t},getNumTiles:function(t){return this.getLevelScale(t)?new e.Point(1,1):new e.Point(0,0)},getTileUrl:function(e,t,n){var i=null;return this.levels.length>0&&e>=this.minLevel&&e<=this.maxLevel&&(i=this.levels[e].url),i}})}(OpenSeadragon),function(e){e.ImageTileSource=function(t){t=e.extend({buildPyramid:!0,crossOriginPolicy:!1,ajaxWithCredentials:!1,useCanvas:!0},t),e.TileSource.apply(this,[t])},e.extend(e.ImageTileSource.prototype,e.TileSource.prototype,{supports:function(e,t){return e.type&&"image"===e.type},configure:function(e,t){return e},getImageInfo:function(t){var n=this._image=new Image,i=this;this.crossOriginPolicy&&(n.crossOrigin=this.crossOriginPolicy),this.ajaxWithCredentials&&(n.useCredentials=this.ajaxWithCredentials),e.addEvent(n,"load",function(){i.width=Object.prototype.hasOwnProperty.call(n,"naturalWidth")?n.naturalWidth:n.width,i.height=Object.prototype.hasOwnProperty.call(n,"naturalHeight")?n.naturalHeight:n.height,i.aspectRatio=i.width/i.height,i.dimensions=new e.Point(i.width,i.height),i._tileWidth=i.width,i._tileHeight=i.height,i.tileOverlap=0,i.minLevel=0,i.levels=i._buildLevels(),i.maxLevel=i.levels.length-1,i.ready=!0,i.raiseEvent("ready",{tileSource:i})}),e.addEvent(n,"error",function(){i.raiseEvent("open-failed",{message:"Error loading image at "+t,source:t})}),n.src=t},getLevelScale:function(e){var t=NaN;return e>=this.minLevel&&e<=this.maxLevel&&(t=this.levels[e].width/this.levels[this.maxLevel].width),t},getNumTiles:function(t){return this.getLevelScale(t)?new e.Point(1,1):new e.Point(0,0)},getTileUrl:function(e,t,n){var i=null;return e>=this.minLevel&&e<=this.maxLevel&&(i=this.levels[e].url),i},getContext2D:function(e,t,n){var i=null;return e>=this.minLevel&&e<=this.maxLevel&&(i=this.levels[e].context2D),i},_buildLevels:function(){var t=[{url:this._image.src,width:Object.prototype.hasOwnProperty.call(this._image,"naturalWidth")?this._image.naturalWidth:this._image.width,height:Object.prototype.hasOwnProperty.call(this._image,"naturalHeight")?this._image.naturalHeight:this._image.height}];if(!this.buildPyramid||!e.supportsCanvas||!this.useCanvas)return delete this._image,t;var n=Object.prototype.hasOwnProperty.call(this._image,"naturalWidth")?this._image.naturalWidth:this._image.width,i=Object.prototype.hasOwnProperty.call(this._image,"naturalHeight")?this._image.naturalHeight:this._image.height,r=document.createElement("canvas"),o=r.getContext("2d");if(r.width=n,r.height=i,o.drawImage(this._image,0,0,n,i),t[0].context2D=o,delete this._image,e.isCanvasTainted(r))return t;for(;n>=2&&i>=2;){n=Math.floor(n/2),i=Math.floor(i/2);var s=document.createElement("canvas"),a=s.getContext("2d");s.width=n,s.height=i,a.drawImage(r,0,0,n,i),t.splice(0,0,{context2D:a,width:n,height:i}),r=s,o=a}return t}})}(OpenSeadragon),function(e){e.TileSourceCollection=function(t,n,i,r){e.console.error("TileSourceCollection is deprecated; use World instead")}}(OpenSeadragon),function(e){function t(n){e.requestAnimationFrame(function(){!function(n){var i,r,o;n.shouldFade&&(i=e.now(),r=i-n.fadeBeginTime,o=1-r/n.fadeLength,o=Math.min(1,o),o=Math.max(0,o),n.imgGroup&&e.setElementOpacity(n.imgGroup,o,!0),o>0&&t(n))}(n)})}function n(t,n){t.element.disabled||(n>=e.ButtonState.GROUP&&t.currentState==e.ButtonState.REST&&(!function(t){t.shouldFade=!1,t.imgGroup&&e.setElementOpacity(t.imgGroup,1,!0)}(t),t.currentState=e.ButtonState.GROUP),n>=e.ButtonState.HOVER&&t.currentState==e.ButtonState.GROUP&&(t.imgHover&&(t.imgHover.style.visibility=""),t.currentState=e.ButtonState.HOVER),n>=e.ButtonState.DOWN&&t.currentState==e.ButtonState.HOVER&&(t.imgDown&&(t.imgDown.style.visibility=""),t.currentState=e.ButtonState.DOWN))}function i(n,i){n.element.disabled||(i<=e.ButtonState.HOVER&&n.currentState==e.ButtonState.DOWN&&(n.imgDown&&(n.imgDown.style.visibility="hidden"),n.currentState=e.ButtonState.HOVER),i<=e.ButtonState.GROUP&&n.currentState==e.ButtonState.HOVER&&(n.imgHover&&(n.imgHover.style.visibility="hidden"),n.currentState=e.ButtonState.GROUP),i<=e.ButtonState.REST&&n.currentState==e.ButtonState.GROUP&&(!function(n){n.shouldFade=!0,n.fadeBeginTime=e.now()+n.fadeDelay,window.setTimeout(function(){t(n)},n.fadeDelay)}(n),n.currentState=e.ButtonState.REST))}e.ButtonState={REST:0,GROUP:1,HOVER:2,DOWN:3},e.Button=function(t){var r=this;e.EventSource.call(this),e.extend(!0,this,{tooltip:null,srcRest:null,srcGroup:null,srcHover:null,srcDown:null,clickTimeThreshold:e.DEFAULT_SETTINGS.clickTimeThreshold,clickDistThreshold:e.DEFAULT_SETTINGS.clickDistThreshold,fadeDelay:0,fadeLength:2e3,onPress:null,onRelease:null,onClick:null,onEnter:null,onExit:null,onFocus:null,onBlur:null},t),this.element=t.element||e.makeNeutralElement("div"),t.element||(this.imgRest=e.makeTransparentImage(this.srcRest),this.imgGroup=e.makeTransparentImage(this.srcGroup),this.imgHover=e.makeTransparentImage(this.srcHover),this.imgDown=e.makeTransparentImage(this.srcDown),this.imgRest.alt=this.imgGroup.alt=this.imgHover.alt=this.imgDown.alt=this.tooltip,this.element.style.position="relative",e.setElementTouchActionNone(this.element),this.imgGroup.style.position=this.imgHover.style.position=this.imgDown.style.position="absolute",this.imgGroup.style.top=this.imgHover.style.top=this.imgDown.style.top="0px",this.imgGroup.style.left=this.imgHover.style.left=this.imgDown.style.left="0px",this.imgHover.style.visibility=this.imgDown.style.visibility="hidden",e.Browser.vendor==e.BROWSERS.FIREFOX&&e.Browser.version<3&&(this.imgGroup.style.top=this.imgHover.style.top=this.imgDown.style.top=""),this.element.appendChild(this.imgRest),this.element.appendChild(this.imgGroup),this.element.appendChild(this.imgHover),this.element.appendChild(this.imgDown)),this.addHandler("press",this.onPress),this.addHandler("release",this.onRelease),this.addHandler("click",this.onClick),this.addHandler("enter",this.onEnter),this.addHandler("exit",this.onExit),this.addHandler("focus",this.onFocus),this.addHandler("blur",this.onBlur),this.currentState=e.ButtonState.GROUP,this.fadeBeginTime=null,this.shouldFade=!1,this.element.style.display="inline-block",this.element.style.position="relative",this.element.title=this.tooltip,this.tracker=new e.MouseTracker({element:this.element,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,enterHandler:function(t){t.insideElementPressed?(n(r,e.ButtonState.DOWN),r.raiseEvent("enter",{originalEvent:t.originalEvent})):t.buttonDownAny||n(r,e.ButtonState.HOVER)},focusHandler:function(e){this.enterHandler(e),r.raiseEvent("focus",{originalEvent:e.originalEvent})},exitHandler:function(t){i(r,e.ButtonState.GROUP),t.insideElementPressed&&r.raiseEvent("exit",{originalEvent:t.originalEvent})},blurHandler:function(e){this.exitHandler(e),r.raiseEvent("blur",{originalEvent:e.originalEvent})},pressHandler:function(t){n(r,e.ButtonState.DOWN),r.raiseEvent("press",{originalEvent:t.originalEvent})},releaseHandler:function(t){t.insideElementPressed&&t.insideElementReleased?(i(r,e.ButtonState.HOVER),r.raiseEvent("release",{originalEvent:t.originalEvent})):t.insideElementPressed?i(r,e.ButtonState.GROUP):n(r,e.ButtonState.HOVER)},clickHandler:function(e){e.quick&&r.raiseEvent("click",{originalEvent:e.originalEvent})},keyHandler:function(e){return 13!==e.keyCode||(r.raiseEvent("click",{originalEvent:e.originalEvent}),r.raiseEvent("release",{originalEvent:e.originalEvent}),!1)}}),i(this,e.ButtonState.REST)},e.extend(e.Button.prototype,e.EventSource.prototype,{notifyGroupEnter:function(){n(this,e.ButtonState.GROUP)},notifyGroupExit:function(){i(this,e.ButtonState.REST)},disable:function(){this.notifyGroupExit(),this.element.disabled=!0,e.setElementOpacity(this.element,.2,!0)},enable:function(){this.element.disabled=!1,e.setElementOpacity(this.element,1,!0),this.notifyGroupEnter()}})}(OpenSeadragon),function(e){e.ButtonGroup=function(t){e.extend(!0,this,{buttons:[],clickTimeThreshold:e.DEFAULT_SETTINGS.clickTimeThreshold,clickDistThreshold:e.DEFAULT_SETTINGS.clickDistThreshold,labelText:""},t);var n,i=this.buttons.concat([]),r=this;if(this.element=t.element||e.makeNeutralElement("div"),!t.group)for(this.label=e.makeNeutralElement("label"),this.element.style.display="inline-block",this.element.appendChild(this.label),n=0;n<i.length;n++)this.element.appendChild(i[n].element);e.setElementTouchActionNone(this.element),this.tracker=new e.MouseTracker({element:this.element,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,enterHandler:function(e){var t;for(t=0;t<r.buttons.length;t++)r.buttons[t].notifyGroupEnter()},exitHandler:function(e){var t;if(!e.insideElementPressed)for(t=0;t<r.buttons.length;t++)r.buttons[t].notifyGroupExit()}})},e.ButtonGroup.prototype={emulateEnter:function(){this.tracker.enterHandler({eventSource:this.tracker})},emulateExit:function(){this.tracker.exitHandler({eventSource:this.tracker})}}}(OpenSeadragon),function(e){e.Rect=function(t,n,i,r,o){var s,a;this.x="number"==typeof t?t:0,this.y="number"==typeof n?n:0,this.width="number"==typeof i?i:0,this.height="number"==typeof r?r:0,this.degrees="number"==typeof o?o:0,this.degrees=e.positiveModulo(this.degrees,360),this.degrees>=270?(s=this.getTopRight(),this.x=s.x,this.y=s.y,a=this.height,this.height=this.width,this.width=a,this.degrees-=270):this.degrees>=180?(s=this.getBottomRight(),this.x=s.x,this.y=s.y,this.degrees-=180):this.degrees>=90&&(s=this.getBottomLeft(),this.x=s.x,this.y=s.y,a=this.height,this.height=this.width,this.width=a,this.degrees-=90)},e.Rect.fromSummits=function(t,n,i){var r=t.distanceTo(n),o=t.distanceTo(i),s=n.minus(t),a=Math.atan(s.y/s.x);return s.x<0?a+=Math.PI:s.y<0&&(a+=2*Math.PI),new e.Rect(t.x,t.y,r,o,a/Math.PI*180)},e.Rect.prototype={clone:function(){return new e.Rect(this.x,this.y,this.width,this.height,this.degrees)},getAspectRatio:function(){return this.width/this.height},getTopLeft:function(){return new e.Point(this.x,this.y)},getBottomRight:function(){return new e.Point(this.x+this.width,this.y+this.height).rotate(this.degrees,this.getTopLeft())},getTopRight:function(){return new e.Point(this.x+this.width,this.y).rotate(this.degrees,this.getTopLeft())},getBottomLeft:function(){return new e.Point(this.x,this.y+this.height).rotate(this.degrees,this.getTopLeft())},getCenter:function(){return new e.Point(this.x+this.width/2,this.y+this.height/2).rotate(this.degrees,this.getTopLeft())},getSize:function(){return new e.Point(this.width,this.height)},equals:function(t){return t instanceof e.Rect&&this.x===t.x&&this.y===t.y&&this.width===t.width&&this.height===t.height&&this.degrees===t.degrees},times:function(t){return new e.Rect(this.x*t,this.y*t,this.width*t,this.height*t,this.degrees)},translate:function(t){return new e.Rect(this.x+t.x,this.y+t.y,this.width,this.height,this.degrees)},union:function(t){var n=this.getBoundingBox(),i=t.getBoundingBox(),r=Math.min(n.x,i.x),o=Math.min(n.y,i.y),s=Math.max(n.x+n.width,i.x+i.width),a=Math.max(n.y+n.height,i.y+i.height);return new e.Rect(r,o,s-r,a-o)},intersection:function(t){var n=1e-10,i=[],r=this.getTopLeft();t.containsPoint(r,n)&&i.push(r);var o=this.getTopRight();t.containsPoint(o,n)&&i.push(o);var s=this.getBottomLeft();t.containsPoint(s,n)&&i.push(s);var a=this.getBottomRight();t.containsPoint(a,n)&&i.push(a);var l=t.getTopLeft();this.containsPoint(l,n)&&i.push(l);var u=t.getTopRight();this.containsPoint(u,n)&&i.push(u);var c=t.getBottomLeft();this.containsPoint(c,n)&&i.push(c);var h=t.getBottomRight();this.containsPoint(h,n)&&i.push(h);for(var d=this._getSegments(),p=t._getSegments(),f=0;f<d.length;f++)for(var g=d[f],m=0;m<p.length;m++){var v=p[m],y=w(g[0],g[1],v[0],v[1]);y&&i.push(y)}function w(t,i,r,o){var s=i.minus(t),a=o.minus(r),l=-a.x*s.y+s.x*a.y;if(0===l)return null;var u=(s.x*(t.y-r.y)-s.y*(t.x-r.x))/l,c=(a.x*(t.y-r.y)-a.y*(t.x-r.x))/l;return-n<=u&&u<=1-n&&-n<=c&&c<=1-n?new e.Point(t.x+c*s.x,t.y+c*s.y):null}if(0===i.length)return null;for(var x=i[0].x,T=i[0].x,_=i[0].y,S=i[0].y,b=1;b<i.length;b++){var E=i[b];E.x<x&&(x=E.x),E.x>T&&(T=E.x),E.y<_&&(_=E.y),E.y>S&&(S=E.y)}return new e.Rect(x,_,T-x,S-_)},_getSegments:function(){var e=this.getTopLeft(),t=this.getTopRight(),n=this.getBottomLeft(),i=this.getBottomRight();return[[e,t],[t,i],[i,n],[n,e]]},rotate:function(t,n){if(0===(t=e.positiveModulo(t,360)))return this.clone();n=n||this.getCenter();var i=this.getTopLeft().rotate(t,n),r=this.getTopRight().rotate(t,n).minus(i);r=r.apply(function(e){return Math.abs(e)<1e-15?0:e});var o=Math.atan(r.y/r.x);return r.x<0?o+=Math.PI:r.y<0&&(o+=2*Math.PI),new e.Rect(i.x,i.y,this.width,this.height,o/Math.PI*180)},getBoundingBox:function(){if(0===this.degrees)return this.clone();var t=this.getTopLeft(),n=this.getTopRight(),i=this.getBottomLeft(),r=this.getBottomRight(),o=Math.min(t.x,n.x,i.x,r.x),s=Math.max(t.x,n.x,i.x,r.x),a=Math.min(t.y,n.y,i.y,r.y),l=Math.max(t.y,n.y,i.y,r.y);return new e.Rect(o,a,s-o,l-a)},getIntegerBoundingBox:function(){var t=this.getBoundingBox(),n=Math.floor(t.x),i=Math.floor(t.y),r=Math.ceil(t.width+t.x-n),o=Math.ceil(t.height+t.y-i);return new e.Rect(n,i,r,o)},containsPoint:function(e,t){t=t||0;var n=this.getTopLeft(),i=this.getTopRight(),r=this.getBottomLeft(),o=i.minus(n),s=r.minus(n);return(e.x-n.x)*o.x+(e.y-n.y)*o.y>=-t&&(e.x-i.x)*o.x+(e.y-i.y)*o.y<=t&&(e.x-n.x)*s.x+(e.y-n.y)*s.y>=-t&&(e.x-r.x)*s.x+(e.y-r.y)*s.y<=t},toString:function(){return"["+Math.round(100*this.x)/100+", "+Math.round(100*this.y)/100+", "+Math.round(100*this.width)/100+"x"+Math.round(100*this.height)/100+", "+Math.round(100*this.degrees)/100+"deg]"}}}(OpenSeadragon),function(e){var t={};function n(t){var n=Number(this.element.style.marginLeft.replace("px","")),i=Number(this.element.style.marginTop.replace("px","")),o=Number(this.element.style.width.replace("px","")),s=Number(this.element.style.height.replace("px","")),a=e.getElementSize(this.viewer.canvas);return this.dragging=!0,this.element&&("horizontal"==this.scroll?-t.delta.x>0?n>-(o-a.x)&&(this.element.style.marginLeft=n+2*t.delta.x+"px",r(this,a.x,n+2*t.delta.x)):-t.delta.x<0&&n<0&&(this.element.style.marginLeft=n+2*t.delta.x+"px",r(this,a.x,n+2*t.delta.x)):-t.delta.y>0?i>-(s-a.y)&&(this.element.style.marginTop=i+2*t.delta.y+"px",r(this,a.y,i+2*t.delta.y)):-t.delta.y<0&&i<0&&(this.element.style.marginTop=i+2*t.delta.y+"px",r(this,a.y,i+2*t.delta.y))),!1}function i(t){var n=Number(this.element.style.marginLeft.replace("px","")),i=Number(this.element.style.marginTop.replace("px","")),o=Number(this.element.style.width.replace("px","")),s=Number(this.element.style.height.replace("px","")),a=e.getElementSize(this.viewer.canvas);return this.element&&("horizontal"==this.scroll?t.scroll>0?n>-(o-a.x)&&(this.element.style.marginLeft=n-60*t.scroll+"px",r(this,a.x,n-60*t.scroll)):t.scroll<0&&n<0&&(this.element.style.marginLeft=n-60*t.scroll+"px",r(this,a.x,n-60*t.scroll)):t.scroll<0?i>a.y-s&&(this.element.style.marginTop=i+60*t.scroll+"px",r(this,a.y,i+60*t.scroll)):t.scroll>0&&i<0&&(this.element.style.marginTop=i+60*t.scroll+"px",r(this,a.y,i+60*t.scroll))),!1}function r(t,n,i){var r,o,s,a,l,u,c;for(r="horizontal"==t.scroll?t.panelWidth:t.panelHeight,o=Math.ceil(n/r)+5,u=o=(o=(s=Math.ceil((Math.abs(i)+n)/r)+1)-o)<0?0:o;u<s&&u<t.panels.length;u++)if(!(c=t.panels[u]).activePanel){var h,d=t.viewer.tileSources[u];h=d.referenceStripThumbnailUrl?{type:"image",url:d.referenceStripThumbnailUrl}:d,(a=new e.Viewer({id:c.id,tileSources:[h],element:c,navigatorSizeRatio:t.sizeRatio,showNavigator:!1,mouseNavEnabled:!1,showNavigationControl:!1,showSequenceControl:!1,immediateRender:!0,blendTime:0,animationTime:0})).displayRegion=e.makeNeutralElement("div"),a.displayRegion.id=c.id+"-displayregion",a.displayRegion.className="displayregion",(l=a.displayRegion.style).position="relative",l.top="0px",l.left="0px",l.fontSize="0px",l.overflow="hidden",l.float="left",l.cssFloat="left",l.styleFloat="left",l.zIndex=999999999,l.cursor="default",l.width=t.panelWidth-4+"px",l.height=t.panelHeight-4+"px",a.displayRegion.innerTracker=new e.MouseTracker({element:a.displayRegion,startDisabled:!0}),c.getElementsByTagName("div")[0].appendChild(a.displayRegion),t.miniViewers[c.id]=a,c.activePanel=!0}}function o(e){var t=e.eventSource.element;return"horizontal"==this.scroll?t.style.marginBottom="0px":t.style.marginLeft="0px",!1}function s(t){var n=t.eventSource.element;return"horizontal"==this.scroll?n.style.marginBottom="-"+e.getElementSize(n).y/2+"px":n.style.marginLeft="-"+e.getElementSize(n).x/2+"px",!1}function a(e){if(e.preventDefaultAction||e.ctrl||e.alt||e.meta)return!0;switch(e.keyCode){case 38:return i.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null}),!1;case 40:case 37:return i.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null}),!1;case 39:return i.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null}),!1;default:return!0}}function l(e){if(e.preventDefaultAction||e.ctrl||e.alt||e.meta)return!0;switch(e.keyCode){case 61:return i.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null}),!1;case 45:return i.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null}),!1;case 48:case 119:case 87:return i.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null}),!1;case 115:case 83:case 97:return i.call(this,{eventSource:this.tracker,position:null,scroll:-1,shift:null}),!1;case 100:return i.call(this,{eventSource:this.tracker,position:null,scroll:1,shift:null}),!1;default:return!0}}e.ReferenceStrip=function(u){var c,h,d,p=u.viewer,f=e.getElementSize(p.element);for(u.id||(u.id="referencestrip-"+e.now(),this.element=e.makeNeutralElement("div"),this.element.id=u.id,this.element.className="referencestrip"),u=e.extend(!0,{sizeRatio:e.DEFAULT_SETTINGS.referenceStripSizeRatio,position:e.DEFAULT_SETTINGS.referenceStripPosition,scroll:e.DEFAULT_SETTINGS.referenceStripScroll,clickTimeThreshold:e.DEFAULT_SETTINGS.clickTimeThreshold},u,{element:this.element,showNavigator:!1,mouseNavEnabled:!1,showNavigationControl:!1,showSequenceControl:!1}),e.extend(this,u),t[this.id]={animating:!1},this.minPixelRatio=this.viewer.minPixelRatio,(h=this.element.style).marginTop="0px",h.marginRight="0px",h.marginBottom="0px",h.marginLeft="0px",h.left="0px",h.bottom="0px",h.border="0px",h.background="#000",h.position="relative",e.setElementTouchActionNone(this.element),e.setElementOpacity(this.element,.8),this.viewer=p,this.innerTracker=new e.MouseTracker({element:this.element,dragHandler:e.delegate(this,n),scrollHandler:e.delegate(this,i),enterHandler:e.delegate(this,o),exitHandler:e.delegate(this,s),keyDownHandler:e.delegate(this,a),keyHandler:e.delegate(this,l)}),u.width&&u.height?(this.element.style.width=u.width+"px",this.element.style.height=u.height+"px",p.addControl(this.element,{anchor:e.ControlAnchor.BOTTOM_LEFT})):"horizontal"==u.scroll?(this.element.style.width=f.x*u.sizeRatio*p.tileSources.length+12*p.tileSources.length+"px",this.element.style.height=f.y*u.sizeRatio+"px",p.addControl(this.element,{anchor:e.ControlAnchor.BOTTOM_LEFT})):(this.element.style.height=f.y*u.sizeRatio*p.tileSources.length+12*p.tileSources.length+"px",this.element.style.width=f.x*u.sizeRatio+"px",p.addControl(this.element,{anchor:e.ControlAnchor.TOP_LEFT})),this.panelWidth=f.x*this.sizeRatio+8,this.panelHeight=f.y*this.sizeRatio+8,this.panels=[],this.miniViewers={},d=0;d<p.tileSources.length;d++)(c=e.makeNeutralElement("div")).id=this.element.id+"-"+d,c.style.width=this.panelWidth+"px",c.style.height=this.panelHeight+"px",c.style.display="inline",c.style.float="left",c.style.cssFloat="left",c.style.styleFloat="left",c.style.padding="2px",e.setElementTouchActionNone(c),c.innerTracker=new e.MouseTracker({element:c,clickTimeThreshold:this.clickTimeThreshold,clickDistThreshold:this.clickDistThreshold,pressHandler:function(t){t.eventSource.dragging=e.now()},releaseHandler:function(t){var n=t.eventSource,i=n.element.id,r=Number(i.split("-")[2]),o=e.now();t.insideElementPressed&&t.insideElementReleased&&n.dragging&&o-n.dragging<n.clickTimeThreshold&&(n.dragging=null,p.goToPage(r))}}),this.element.appendChild(c),c.activePanel=!1,this.panels.push(c);r(this,"vertical"==this.scroll?f.y:f.x,0),this.setFocus(0)},e.extend(e.ReferenceStrip.prototype,e.EventSource.prototype,e.Viewer.prototype,{setFocus:function(t){var n,i=e.getElement(this.element.id+"-"+t),s=e.getElementSize(this.viewer.canvas),a=Number(this.element.style.width.replace("px","")),l=Number(this.element.style.height.replace("px","")),u=-Number(this.element.style.marginLeft.replace("px","")),c=-Number(this.element.style.marginTop.replace("px",""));this.currentSelected!==i&&(this.currentSelected&&(this.currentSelected.style.background="#000"),this.currentSelected=i,this.currentSelected.style.background="#999","horizontal"==this.scroll?(n=Number(t)*(this.panelWidth+3))>u+s.x-this.panelWidth?(n=Math.min(n,a-s.x),this.element.style.marginLeft=-n+"px",r(this,s.x,-n)):n<u&&(n=Math.max(0,n-s.x/2),this.element.style.marginLeft=-n+"px",r(this,s.x,-n)):(n=Number(t)*(this.panelHeight+3))>c+s.y-this.panelHeight?(n=Math.min(n,l-s.y),this.element.style.marginTop=-n+"px",r(this,s.y,-n)):n<c&&(n=Math.max(0,n-s.y/2),this.element.style.marginTop=-n+"px",r(this,s.y,-n)),this.currentPage=t,o.call(this,{eventSource:this.innerTracker}))},update:function(){return!!t[this.id].animating&&(e.console.log("image reference strip update"),!0)},destroy:function(){if(this.miniViewers)for(var e in this.miniViewers)this.miniViewers[e].destroy();this.element&&this.element.parentNode.removeChild(this.element)}})}(OpenSeadragon),function(e){e.DisplayRect=function(t,n,i,r,o,s){e.Rect.apply(this,[t,n,i,r]),this.minLevel=o,this.maxLevel=s},e.extend(e.DisplayRect.prototype,e.Rect.prototype)}(OpenSeadragon),function(e){e.Spring=function(t){var n=arguments;"object"!=typeof t&&(t={initial:n.length&&"number"==typeof n[0]?n[0]:void 0,springStiffness:n.length>1?n[1].springStiffness:5,animationTime:n.length>1?n[1].animationTime:1.5}),e.console.assert("number"==typeof t.springStiffness&&0!==t.springStiffness,"[OpenSeadragon.Spring] options.springStiffness must be a non-zero number"),e.console.assert("number"==typeof t.animationTime&&t.animationTime>=0,"[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0"),t.exponential&&(this._exponential=!0,delete t.exponential),e.extend(!0,this,t),this.current={value:"number"==typeof this.initial?this.initial:this._exponential?0:1,time:e.now()},e.console.assert(!this._exponential||0!==this.current.value,"[OpenSeadragon.Spring] value must be non-zero for exponential springs"),this.start={value:this.current.value,time:this.current.time},this.target={value:this.current.value,time:this.current.time},this._exponential&&(this.start._logValue=Math.log(this.start.value),this.target._logValue=Math.log(this.target.value),this.current._logValue=Math.log(this.current.value))},e.Spring.prototype={resetTo:function(t){e.console.assert(!this._exponential||0!==t,"[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs"),this.start.value=this.target.value=this.current.value=t,this.start.time=this.target.time=this.current.time=e.now(),this._exponential&&(this.start._logValue=Math.log(this.start.value),this.target._logValue=Math.log(this.target.value),this.current._logValue=Math.log(this.current.value))},springTo:function(t){e.console.assert(!this._exponential||0!==t,"[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs"),this.start.value=this.current.value,this.start.time=this.current.time,this.target.value=t,this.target.time=this.start.time+1e3*this.animationTime,this._exponential&&(this.start._logValue=Math.log(this.start.value),this.target._logValue=Math.log(this.target.value))},shiftBy:function(t){this.start.value+=t,this.target.value+=t,this._exponential&&(e.console.assert(0!==this.target.value&&0!==this.start.value,"[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs"),this.start._logValue=Math.log(this.start.value),this.target._logValue=Math.log(this.target.value))},setExponential:function(t){this._exponential=t,this._exponential&&(e.console.assert(0!==this.current.value&&0!==this.target.value&&0!==this.start.value,"[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs"),this.start._logValue=Math.log(this.start.value),this.target._logValue=Math.log(this.target.value),this.current._logValue=Math.log(this.current.value))},update:function(){var t,n;this.current.time=e.now(),this._exponential?(t=this.start._logValue,n=this.target._logValue):(t=this.start.value,n=this.target.value);var i,r,o=this.current.time>=this.target.time?n:t+(n-t)*(i=this.springStiffness,r=(this.current.time-this.start.time)/(this.target.time-this.start.time),(1-Math.exp(i*-r))/(1-Math.exp(-i))),s=this.current.value;return this._exponential?this.current.value=Math.exp(o):this.current.value=o,s!=this.current.value},isAtTargetValue:function(){return this.current.value===this.target.value}}}(OpenSeadragon),function(e){function t(t){e.extend(!0,this,{timeout:e.DEFAULT_SETTINGS.timeout,jobId:null},t),this.image=null}t.prototype={errorMsg:null,start:function(){var t=this,n=this.abort;this.image=new Image,this.image.onload=function(){t.finish(!0)},this.image.onabort=this.image.onerror=function(){t.errorMsg="Image load aborted",t.finish(!1)},this.jobId=window.setTimeout(function(){t.errorMsg="Image load exceeded timeout",t.finish(!1)},this.timeout),this.loadWithAjax?(this.request=e.makeAjaxRequest({url:this.src,withCredentials:this.ajaxWithCredentials,headers:this.ajaxHeaders,responseType:"arraybuffer",success:function(e){var n;try{n=new window.Blob([e.response])}catch(t){var i=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;if("TypeError"===t.name&&i){var r=new i;r.append(e.response),n=r.getBlob()}}0===n.size&&(t.errorMsg="Empty image response.",t.finish(!1));var o=(window.URL||window.webkitURL).createObjectURL(n);t.image.src=o},error:function(e){t.errorMsg="Image load aborted - XHR error",t.finish(!1)}}),this.abort=function(){t.request.abort(),"function"==typeof n&&n()}):(!1!==this.crossOriginPolicy&&(this.image.crossOrigin=this.crossOriginPolicy),this.image.src=this.src)},finish:function(e){this.image.onload=this.image.onerror=this.image.onabort=null,e||(this.image=null),this.jobId&&window.clearTimeout(this.jobId),this.callback(this)}},e.ImageLoader=function(t){e.extend(!0,this,{jobLimit:e.DEFAULT_SETTINGS.imageLoaderLimit,timeout:e.DEFAULT_SETTINGS.timeout,jobQueue:[],jobsInProgress:0},t)},e.ImageLoader.prototype={addJob:function(e){var n=this,i=new t({src:e.src,loadWithAjax:e.loadWithAjax,ajaxHeaders:e.loadWithAjax?e.ajaxHeaders:null,crossOriginPolicy:e.crossOriginPolicy,ajaxWithCredentials:e.ajaxWithCredentials,callback:function(t){!function(e,t,n){e.jobsInProgress--,(!e.jobLimit||e.jobsInProgress<e.jobLimit)&&e.jobQueue.length>0&&(e.jobQueue.shift().start(),e.jobsInProgress++),n(t.image,t.errorMsg,t.request)}(n,t,e.callback)},abort:e.abort,timeout:this.timeout});!this.jobLimit||this.jobsInProgress<this.jobLimit?(i.start(),this.jobsInProgress++):this.jobQueue.push(i)},clear:function(){for(var e=0;e<this.jobQueue.length;e++){var t=this.jobQueue[e];"function"==typeof t.abort&&t.abort()}this.jobQueue=[]}}}(OpenSeadragon),function(e){e.Tile=function(e,t,n,i,r,o,s,a,l){this.level=e,this.x=t,this.y=n,this.bounds=i,this.exists=r,this.url=o,this.context2D=s,this.loadWithAjax=a,this.ajaxHeaders=l,this.ajaxHeaders?this.cacheKey=this.url+"+"+JSON.stringify(this.ajaxHeaders):this.cacheKey=this.url,this.loaded=!1,this.loading=!1,this.element=null,this.imgElement=null,this.image=null,this.style=null,this.position=null,this.size=null,this.blendStart=null,this.opacity=null,this.squaredDistance=null,this.visibility=null,this.beingDrawn=!1,this.lastTouchTime=0,this.isRightMost=!1,this.isBottomMost=!1},e.Tile.prototype={toString:function(){return this.level+"/"+this.x+"_"+this.y},_hasTransparencyChannel:function(){return!!this.context2D||this.url.match(".png")},drawHTML:function(t){this.cacheImageRecord?this.loaded?(this.element||(this.element=e.makeNeutralElement("div"),this.imgElement=this.cacheImageRecord.getImage().cloneNode(),this.imgElement.style.msInterpolationMode="nearest-neighbor",this.imgElement.style.width="100%",this.imgElement.style.height="100%",this.style=this.element.style,this.style.position="absolute"),this.element.parentNode!=t&&t.appendChild(this.element),this.imgElement.parentNode!=this.element&&this.element.appendChild(this.imgElement),this.style.top=this.position.y+"px",this.style.left=this.position.x+"px",this.style.height=this.size.y+"px",this.style.width=this.size.x+"px",e.setElementOpacity(this.element,this.opacity)):e.console.warn("Attempting to draw tile %s when it's not yet loaded.",this.toString()):e.console.warn("[Tile.drawHTML] attempting to draw tile %s when it's not cached",this.toString())},drawCanvas:function(t,n,i,r){var o,s=this.position.times(e.pixelDensityRatio),a=this.size.times(e.pixelDensityRatio);this.context2D||this.cacheImageRecord?(o=this.context2D||this.cacheImageRecord.getRenderedContext(),this.loaded&&o?(t.save(),t.globalAlpha=this.opacity,"number"==typeof i&&1!==i&&(s=s.times(i),a=a.times(i)),r instanceof e.Point&&(s=s.plus(r)),1===t.globalAlpha&&this._hasTransparencyChannel()&&t.clearRect(s.x+1,s.y+1,a.x-2,a.y-2),n({context:t,tile:this,rendered:o}),t.drawImage(o.canvas,0,0,o.canvas.width,o.canvas.height,s.x,s.y,a.x,a.y),t.restore()):e.console.warn("Attempting to draw tile %s when it's not yet loaded.",this.toString())):e.console.warn("[Tile.drawCanvas] attempting to draw tile %s when it's not cached",this.toString())},getScaleForEdgeSmoothing:function(){var t;if(this.cacheImageRecord)t=this.cacheImageRecord.getRenderedContext();else{if(!this.context2D)return e.console.warn("[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached",this.toString()),1;t=this.context2D}return t.canvas.width/(this.size.x*e.pixelDensityRatio)},getTranslationForEdgeSmoothing:function(t,n,i){var r=Math.max(1,Math.ceil((i.x-n.x)/2)),o=Math.max(1,Math.ceil((i.y-n.y)/2));return new e.Point(r,o).minus(this.position.times(e.pixelDensityRatio).times(t||1).apply(function(e){return e%1}))},unload:function(){this.imgElement&&this.imgElement.parentNode&&this.imgElement.parentNode.removeChild(this.imgElement),this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element),this.element=null,this.imgElement=null,this.loaded=!1,this.loading=!1}}}(OpenSeadragon),function(e){e.OverlayPlacement=e.Placement,e.OverlayRotationMode=e.freezeObject({NO_ROTATION:1,EXACT:2,BOUNDING_BOX:3}),e.Overlay=function(t,n,i){var r;r=e.isPlainObject(t)?t:{element:t,location:n,placement:i},this.element=r.element,this.style=r.element.style,this._init(r)},e.Overlay.prototype={_init:function(t){this.location=t.location,this.placement=void 0===t.placement?e.Placement.TOP_LEFT:t.placement,this.onDraw=t.onDraw,this.checkResize=void 0===t.checkResize||t.checkResize,this.width=void 0===t.width?null:t.width,this.height=void 0===t.height?null:t.height,this.rotationMode=t.rotationMode||e.OverlayRotationMode.EXACT,this.location instanceof e.Rect&&(this.width=this.location.width,this.height=this.location.height,this.location=this.location.getTopLeft(),this.placement=e.Placement.TOP_LEFT),this.scales=null!==this.width&&null!==this.height,this.bounds=new e.Rect(this.location.x,this.location.y,this.width,this.height),this.position=this.location},adjust:function(t,n){var i=e.Placement.properties[this.placement];i&&(i.isHorizontallyCentered?t.x-=n.x/2:i.isRight&&(t.x-=n.x),i.isVerticallyCentered?t.y-=n.y/2:i.isBottom&&(t.y-=n.y))},destroy:function(){var t=this.element,n=this.style;t.parentNode&&(t.parentNode.removeChild(t),t.prevElementParent&&(n.display="none",document.body.appendChild(t))),this.onDraw=null,n.top="",n.left="",n.position="",null!==this.width&&(n.width=""),null!==this.height&&(n.height="");var i=e.getCssPropertyWithVendorPrefix("transformOrigin"),r=e.getCssPropertyWithVendorPrefix("transform");i&&r&&(n[i]="",n[r]="")},drawHTML:function(t,n){var i=this.element;i.parentNode!==t&&(i.prevElementParent=i.parentNode,i.prevNextSibling=i.nextSibling,t.appendChild(i),this.style.position="absolute",this.size=e.getElementSize(i));var r=this._getOverlayPositionAndSize(n),o=r.position,s=this.size=r.size,a=r.rotate;if(this.onDraw)this.onDraw(o,s,this.element);else{var l=this.style;l.left=o.x+"px",l.top=o.y+"px",null!==this.width&&(l.width=s.x+"px"),null!==this.height&&(l.height=s.y+"px");var u=e.getCssPropertyWithVendorPrefix("transformOrigin"),c=e.getCssPropertyWithVendorPrefix("transform");u&&c&&(a?(l[u]=this._getTransformOrigin(),l[c]="rotate("+a+"deg)"):(l[u]="",l[c]="")),"none"!==l.display&&(l.display="block")}},_getOverlayPositionAndSize:function(t){var n=t.pixelFromPoint(this.location,!0),i=this._getSizeInPixels(t);this.adjust(n,i);var r=0;if(t.degrees&&this.rotationMode!==e.OverlayRotationMode.NO_ROTATION)if(this.rotationMode===e.OverlayRotationMode.BOUNDING_BOX&&null!==this.width&&null!==this.height){var o=new e.Rect(n.x,n.y,i.x,i.y),s=this._getBoundingBox(o,t.degrees);n=s.getTopLeft(),i=s.getSize()}else r=t.degrees;return{position:n,size:i,rotate:r}},_getSizeInPixels:function(t){var n=this.size.x,i=this.size.y;if(null!==this.width||null!==this.height){var r=t.deltaPixelsFromPointsNoRotate(new e.Point(this.width||0,this.height||0),!0);null!==this.width&&(n=r.x),null!==this.height&&(i=r.y)}if(this.checkResize&&(null===this.width||null===this.height)){var o=this.size=e.getElementSize(this.element);null===this.width&&(n=o.x),null===this.height&&(i=o.y)}return new e.Point(n,i)},_getBoundingBox:function(e,t){var n=this._getPlacementPoint(e);return e.rotate(t,n).getBoundingBox()},_getPlacementPoint:function(t){var n=new e.Point(t.x,t.y),i=e.Placement.properties[this.placement];return i&&(i.isHorizontallyCentered?n.x+=t.width/2:i.isRight&&(n.x+=t.width),i.isVerticallyCentered?n.y+=t.height/2:i.isBottom&&(n.y+=t.height)),n},_getTransformOrigin:function(){var t="",n=e.Placement.properties[this.placement];return n?(n.isLeft?t="left":n.isRight&&(t="right"),n.isTop?t+=" top":n.isBottom&&(t+=" bottom"),t):t},update:function(t,n){var i=e.isPlainObject(t)?t:{location:t,placement:n};this._init({location:i.location||this.location,placement:void 0!==i.placement?i.placement:this.placement,onDraw:i.onDraw||this.onDraw,checkResize:i.checkResize||this.checkResize,width:void 0!==i.width?i.width:this.width,height:void 0!==i.height?i.height:this.height,rotationMode:i.rotationMode||this.rotationMode})},getBounds:function(t){e.console.assert(t,"A viewport must now be passed to Overlay.getBounds.");var n=this.width,i=this.height;if(null===n||null===i){var r=t.deltaPointsFromPixelsNoRotate(this.size,!0);null===n&&(n=r.x),null===i&&(i=r.y)}var o=this.location.clone();return this.adjust(o,new e.Point(n,i)),this._adjustBoundsForRotation(t,new e.Rect(o.x,o.y,n,i))},_adjustBoundsForRotation:function(t,n){if(!t||0===t.degrees||this.rotationMode===e.OverlayRotationMode.EXACT)return n;if(this.rotationMode===e.OverlayRotationMode.BOUNDING_BOX){if(null===this.width||null===this.height)return n;var i=this._getOverlayPositionAndSize(t);return t.viewerElementToViewportRectangle(new e.Rect(i.position.x,i.position.y,i.size.x,i.size.y))}return n.rotate(-t.degrees,this._getPlacementPoint(n))}}}(OpenSeadragon),function(e){e.Drawer=function(t){e.console.assert(t.viewer,"[Drawer] options.viewer is required");var n=arguments;if(e.isPlainObject(t)||(t={source:n[0],viewport:n[1],element:n[2]}),e.console.assert(t.viewport,"[Drawer] options.viewport is required"),e.console.assert(t.element,"[Drawer] options.element is required"),t.source&&e.console.error("[Drawer] options.source is no longer accepted; use TiledImage instead"),this.viewer=t.viewer,this.viewport=t.viewport,this.debugGridColor="string"==typeof t.debugGridColor?[t.debugGridColor]:t.debugGridColor||e.DEFAULT_SETTINGS.debugGridColor,t.opacity&&e.console.error("[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead"),this.useCanvas=e.supportsCanvas&&(!this.viewer||this.viewer.useCanvas),this.container=e.getElement(t.element),this.canvas=e.makeNeutralElement(this.useCanvas?"canvas":"div"),this.context=this.useCanvas?this.canvas.getContext("2d"):null,this.sketchCanvas=null,this.sketchContext=null,this.element=this.container,this.container.dir="ltr",this.useCanvas){var i=this._calculateCanvasSize();this.canvas.width=i.x,this.canvas.height=i.y}this.canvas.style.width="100%",this.canvas.style.height="100%",this.canvas.style.position="absolute",e.setElementOpacity(this.canvas,this.opacity,!0),this.container.style.textAlign="left",this.container.appendChild(this.canvas)},e.Drawer.prototype={addOverlay:function(t,n,i,r){return e.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead."),this.viewer.addOverlay(t,n,i,r),this},updateOverlay:function(t,n,i){return e.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead."),this.viewer.updateOverlay(t,n,i),this},removeOverlay:function(t){return e.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead."),this.viewer.removeOverlay(t),this},clearOverlays:function(){return e.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead."),this.viewer.clearOverlays(),this},setOpacity:function(t){e.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");for(var n=this.viewer.world,i=0;i<n.getItemCount();i++)n.getItemAt(i).setOpacity(t);return this},getOpacity:function(){e.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");for(var t=this.viewer.world,n=0,i=0;i<t.getItemCount();i++){var r=t.getItemAt(i).getOpacity();r>n&&(n=r)}return n},needsUpdate:function(){return e.console.error("[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead."),this.viewer.world.needsDraw()},numTilesLoaded:function(){return e.console.error("[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead."),this.viewer.tileCache.numTilesLoaded()},reset:function(){return e.console.error("[Drawer.reset] this function is deprecated. Use World.resetItems instead."),this.viewer.world.resetItems(),this},update:function(){return e.console.error("[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead."),this.clear(),this.viewer.world.draw(),this},canRotate:function(){return this.useCanvas},destroy:function(){this.canvas.width=1,this.canvas.height=1,this.sketchCanvas=null,this.sketchContext=null},clear:function(){if(this.canvas.innerHTML="",this.useCanvas){var e=this._calculateCanvasSize();if((this.canvas.width!=e.x||this.canvas.height!=e.y)&&(this.canvas.width=e.x,this.canvas.height=e.y,null!==this.sketchCanvas)){var t=this._calculateSketchCanvasSize();this.sketchCanvas.width=t.x,this.sketchCanvas.height=t.y}this._clear()}},_clear:function(e,t){if(this.useCanvas){var n=this._getContext(e);if(t)n.clearRect(t.x,t.y,t.width,t.height);else{var i=n.canvas;n.clearRect(0,0,i.width,i.height)}}},viewportToDrawerRectangle:function(t){var n=this.viewport.pixelFromPointNoRotate(t.getTopLeft(),!0),i=this.viewport.deltaPixelsFromPointsNoRotate(t.getSize(),!0);return new e.Rect(n.x*e.pixelDensityRatio,n.y*e.pixelDensityRatio,i.x*e.pixelDensityRatio,i.y*e.pixelDensityRatio)},drawTile:function(t,n,i,r,o){if(e.console.assert(t,"[Drawer.drawTile] tile is required"),e.console.assert(n,"[Drawer.drawTile] drawingHandler is required"),this.useCanvas){var s=this._getContext(i);r=r||1,t.drawCanvas(s,n,r,o)}else t.drawHTML(this.canvas)},_getContext:function(e){var t=this.context;if(e){if(null===this.sketchCanvas){this.sketchCanvas=document.createElement("canvas");var n=this._calculateSketchCanvasSize();if(this.sketchCanvas.width=n.x,this.sketchCanvas.height=n.y,this.sketchContext=this.sketchCanvas.getContext("2d"),0===this.viewport.getRotation()){var i=this;this.viewer.addHandler("rotate",function e(){if(0!==i.viewport.getRotation()){i.viewer.removeHandler("rotate",e);var t=i._calculateSketchCanvasSize();i.sketchCanvas.width=t.x,i.sketchCanvas.height=t.y}})}}t=this.sketchContext}return t},saveContext:function(e){this.useCanvas&&this._getContext(e).save()},restoreContext:function(e){this.useCanvas&&this._getContext(e).restore()},setClip:function(e,t){if(this.useCanvas){var n=this._getContext(t);n.beginPath(),n.rect(e.x,e.y,e.width,e.height),n.clip()}},drawRectangle:function(e,t,n){if(this.useCanvas){var i=this._getContext(n);i.save(),i.fillStyle=t,i.fillRect(e.x,e.y,e.width,e.height),i.restore()}},blendSketch:function(t,n,i,r){var o=t;if(e.isPlainObject(o)||(o={opacity:t,scale:n,translate:i,compositeOperation:r}),this.useCanvas&&this.sketchCanvas){t=o.opacity,r=o.compositeOperation;var s=o.bounds;if(this.context.save(),this.context.globalAlpha=t,r&&(this.context.globalCompositeOperation=r),s)s.x<0&&(s.width+=s.x,s.x=0),s.x+s.width>this.canvas.width&&(s.width=this.canvas.width-s.x),s.y<0&&(s.height+=s.y,s.y=0),s.y+s.height>this.canvas.height&&(s.height=this.canvas.height-s.y),this.context.drawImage(this.sketchCanvas,s.x,s.y,s.width,s.height,s.x,s.y,s.width,s.height);else{n=o.scale||1;var a=(i=o.translate)instanceof e.Point?i:new e.Point(0,0),l=0,u=0;if(i){var c=this.sketchCanvas.width-this.canvas.width,h=this.sketchCanvas.height-this.canvas.height;l=Math.round(c/2),u=Math.round(h/2)}this.context.drawImage(this.sketchCanvas,a.x-l*n,a.y-u*n,(this.canvas.width+2*l)*n,(this.canvas.height+2*u)*n,-l,-u,this.canvas.width+2*l,this.canvas.height+2*u)}this.context.restore()}},drawDebugInfo:function(t,n,i,r){if(this.useCanvas){var o=this.viewer.world.getIndexOfItem(r)%this.debugGridColor.length,s=this.context;s.save(),s.lineWidth=2*e.pixelDensityRatio,s.font="small-caps bold "+13*e.pixelDensityRatio+"px arial",s.strokeStyle=this.debugGridColor[o],s.fillStyle=this.debugGridColor[o],0!==this.viewport.degrees&&this._offsetForRotation({degrees:this.viewport.degrees}),r.getRotation(!0)%360!=0&&this._offsetForRotation({degrees:r.getRotation(!0),point:r.viewport.pixelFromPointNoRotate(r._getRotationPoint(!0),!0)}),s.strokeRect(t.position.x*e.pixelDensityRatio,t.position.y*e.pixelDensityRatio,t.size.x*e.pixelDensityRatio,t.size.y*e.pixelDensityRatio);var a=(t.position.x+t.size.x/2)*e.pixelDensityRatio,l=(t.position.y+t.size.y/2)*e.pixelDensityRatio;s.translate(a,l),s.rotate(Math.PI/180*-this.viewport.degrees),s.translate(-a,-l),0===t.x&&0===t.y&&(s.fillText("Zoom: "+this.viewport.getZoom(),t.position.x*e.pixelDensityRatio,(t.position.y-30)*e.pixelDensityRatio),s.fillText("Pan: "+this.viewport.getBounds().toString(),t.position.x*e.pixelDensityRatio,(t.position.y-20)*e.pixelDensityRatio)),s.fillText("Level: "+t.level,(t.position.x+10)*e.pixelDensityRatio,(t.position.y+20)*e.pixelDensityRatio),s.fillText("Column: "+t.x,(t.position.x+10)*e.pixelDensityRatio,(t.position.y+30)*e.pixelDensityRatio),s.fillText("Row: "+t.y,(t.position.x+10)*e.pixelDensityRatio,(t.position.y+40)*e.pixelDensityRatio),s.fillText("Order: "+i+" of "+n,(t.position.x+10)*e.pixelDensityRatio,(t.position.y+50)*e.pixelDensityRatio),s.fillText("Size: "+t.size.toString(),(t.position.x+10)*e.pixelDensityRatio,(t.position.y+60)*e.pixelDensityRatio),s.fillText("Position: "+t.position.toString(),(t.position.x+10)*e.pixelDensityRatio,(t.position.y+70)*e.pixelDensityRatio),0!==this.viewport.degrees&&this._restoreRotationChanges(),r.getRotation(!0)%360!=0&&this._restoreRotationChanges(),s.restore()}},debugRect:function(t){if(this.useCanvas){var n=this.context;n.save(),n.lineWidth=2*e.pixelDensityRatio,n.strokeStyle=this.debugGridColor[0],n.fillStyle=this.debugGridColor[0],n.strokeRect(t.x*e.pixelDensityRatio,t.y*e.pixelDensityRatio,t.width*e.pixelDensityRatio,t.height*e.pixelDensityRatio),n.restore()}},getCanvasSize:function(t){var n=this._getContext(t).canvas;return new e.Point(n.width,n.height)},getCanvasCenter:function(){return new e.Point(this.canvas.width/2,this.canvas.height/2)},_offsetForRotation:function(t){var n=t.point?t.point.times(e.pixelDensityRatio):this.getCanvasCenter(),i=this._getContext(t.useSketch);i.save(),i.translate(n.x,n.y),i.rotate(Math.PI/180*t.degrees),i.translate(-n.x,-n.y)},_restoreRotationChanges:function(e){this._getContext(e).restore()},_calculateCanvasSize:function(){var t=e.pixelDensityRatio,n=this.viewport.getContainerSize();return{x:n.x*t,y:n.y*t}},_calculateSketchCanvasSize:function(){var e=this._calculateCanvasSize();if(0===this.viewport.getRotation())return e;var t=Math.ceil(Math.sqrt(e.x*e.x+e.y*e.y));return{x:t,y:t}}}}(OpenSeadragon),function(e){e.Viewport=function(t){var n=arguments;n.length&&n[0]instanceof e.Point&&(t={containerSize:n[0],contentSize:n[1],config:n[2]}),t.config&&(e.extend(!0,t,t.config),delete t.config),this._margins=e.extend({left:0,top:0,right:0,bottom:0},t.margins||{}),delete t.margins,e.extend(!0,this,{containerSize:null,contentSize:null,zoomPoint:null,viewer:null,springStiffness:e.DEFAULT_SETTINGS.springStiffness,animationTime:e.DEFAULT_SETTINGS.animationTime,minZoomImageRatio:e.DEFAULT_SETTINGS.minZoomImageRatio,maxZoomPixelRatio:e.DEFAULT_SETTINGS.maxZoomPixelRatio,visibilityRatio:e.DEFAULT_SETTINGS.visibilityRatio,wrapHorizontal:e.DEFAULT_SETTINGS.wrapHorizontal,wrapVertical:e.DEFAULT_SETTINGS.wrapVertical,defaultZoomLevel:e.DEFAULT_SETTINGS.defaultZoomLevel,minZoomLevel:e.DEFAULT_SETTINGS.minZoomLevel,maxZoomLevel:e.DEFAULT_SETTINGS.maxZoomLevel,degrees:e.DEFAULT_SETTINGS.degrees,homeFillsViewer:e.DEFAULT_SETTINGS.homeFillsViewer},t),this._updateContainerInnerSize(),this.centerSpringX=new e.Spring({initial:0,springStiffness:this.springStiffness,animationTime:this.animationTime}),this.centerSpringY=new e.Spring({initial:0,springStiffness:this.springStiffness,animationTime:this.animationTime}),this.zoomSpring=new e.Spring({exponential:!0,initial:1,springStiffness:this.springStiffness,animationTime:this.animationTime}),this._oldCenterX=this.centerSpringX.current.value,this._oldCenterY=this.centerSpringY.current.value,this._oldZoom=this.zoomSpring.current.value,this._setContentBounds(new e.Rect(0,0,1,1),1),this.goHome(!0),this.update()},e.Viewport.prototype={resetContentSize:function(t){return e.console.assert(t,"[Viewport.resetContentSize] contentSize is required"),e.console.assert(t instanceof e.Point,"[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point"),e.console.assert(t.x>0,"[Viewport.resetContentSize] contentSize.x must be greater than 0"),e.console.assert(t.y>0,"[Viewport.resetContentSize] contentSize.y must be greater than 0"),this._setContentBounds(new e.Rect(0,0,1,t.y/t.x),t.x),this},setHomeBounds:function(t,n){e.console.error("[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually."),this._setContentBounds(t,n)},_setContentBounds:function(t,n){e.console.assert(t,"[Viewport._setContentBounds] bounds is required"),e.console.assert(t instanceof e.Rect,"[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect"),e.console.assert(t.width>0,"[Viewport._setContentBounds] bounds.width must be greater than 0"),e.console.assert(t.height>0,"[Viewport._setContentBounds] bounds.height must be greater than 0"),this._contentBoundsNoRotate=t.clone(),this._contentSizeNoRotate=this._contentBoundsNoRotate.getSize().times(n),this._contentBounds=t.rotate(this.degrees).getBoundingBox(),this._contentSize=this._contentBounds.getSize().times(n),this._contentAspectRatio=this._contentSize.x/this._contentSize.y,this.viewer&&this.viewer.raiseEvent("reset-size",{contentSize:this._contentSizeNoRotate.clone(),contentFactor:n,homeBounds:this._contentBoundsNoRotate.clone(),contentBounds:this._contentBounds.clone()})},getHomeZoom:function(){if(this.defaultZoomLevel)return this.defaultZoomLevel;var e=this._contentAspectRatio/this.getAspectRatio();return(this.homeFillsViewer?e>=1?e:1:e>=1?1:e)/this._contentBounds.width},getHomeBounds:function(){return this.getHomeBoundsNoRotate().rotate(-this.getRotation())},getHomeBoundsNoRotate:function(){var t=this._contentBounds.getCenter(),n=1/this.getHomeZoom(),i=n/this.getAspectRatio();return new e.Rect(t.x-n/2,t.y-i/2,n,i)},goHome:function(e){return this.viewer&&this.viewer.raiseEvent("home",{immediately:e}),this.fitBounds(this.getHomeBounds(),e)},getMinZoom:function(){var e=this.getHomeZoom();return this.minZoomLevel?this.minZoomLevel:this.minZoomImageRatio*e},getMaxZoom:function(){var e=this.maxZoomLevel;return e||(e=this._contentSize.x*this.maxZoomPixelRatio/this._containerInnerSize.x,e/=this._contentBounds.width),Math.max(e,this.getHomeZoom())},getAspectRatio:function(){return this._containerInnerSize.x/this._containerInnerSize.y},getContainerSize:function(){return new e.Point(this.containerSize.x,this.containerSize.y)},getMargins:function(){return e.extend({},this._margins)},setMargins:function(t){e.console.assert("object"===e.type(t),"[Viewport.setMargins] margins must be an object"),this._margins=e.extend({left:0,top:0,right:0,bottom:0},t),this._updateContainerInnerSize(),this.viewer&&this.viewer.forceRedraw()},getBounds:function(e){return this.getBoundsNoRotate(e).rotate(-this.getRotation())},getBoundsNoRotate:function(t){var n=this.getCenter(t),i=1/this.getZoom(t),r=i/this.getAspectRatio();return new e.Rect(n.x-i/2,n.y-r/2,i,r)},getBoundsWithMargins:function(e){return this.getBoundsNoRotateWithMargins(e).rotate(-this.getRotation(),this.getCenter(e))},getBoundsNoRotateWithMargins:function(e){var t=this.getBoundsNoRotate(e),n=this._containerInnerSize.x*this.getZoom(e);return t.x-=this._margins.left/n,t.y-=this._margins.top/n,t.width+=(this._margins.left+this._margins.right)/n,t.height+=(this._margins.top+this._margins.bottom)/n,t},getCenter:function(t){var n,i,r,o,s,a,l=new e.Point(this.centerSpringX.current.value,this.centerSpringY.current.value),u=new e.Point(this.centerSpringX.target.value,this.centerSpringY.target.value);return t?l:this.zoomPoint?(n=this.pixelFromPoint(this.zoomPoint,!0),o=(r=1/(i=this.getZoom()))/this.getAspectRatio(),s=new e.Rect(l.x-r/2,l.y-o/2,r,o),a=this._pixelFromPoint(this.zoomPoint,s).minus(n).divide(this._containerInnerSize.x*i),u.plus(a)):u},getZoom:function(e){return e?this.zoomSpring.current.value:this.zoomSpring.target.value},_applyZoomConstraints:function(e){return Math.max(Math.min(e,this.getMaxZoom()),this.getMinZoom())},_applyBoundaryConstraints:function(t){var n=new e.Rect(t.x,t.y,t.width,t.height);if(this.wrapHorizontal);else{var i=this.visibilityRatio*n.width,r=n.x+n.width,o=this._contentBoundsNoRotate.x+this._contentBoundsNoRotate.width,s=this._contentBoundsNoRotate.x-r+i,a=o-n.x-i;i>this._contentBoundsNoRotate.width?n.x+=(s+a)/2:a<0?n.x+=a:s>0&&(n.x+=s)}if(this.wrapVertical);else{var l=this.visibilityRatio*n.height,u=n.y+n.height,c=this._contentBoundsNoRotate.y+this._contentBoundsNoRotate.height,h=this._contentBoundsNoRotate.y-u+l,d=c-n.y-l;l>this._contentBoundsNoRotate.height?n.y+=(h+d)/2:d<0?n.y+=d:h>0&&(n.y+=h)}return n},_raiseConstraintsEvent:function(e){this.viewer&&this.viewer.raiseEvent("constrain",{immediately:e})},applyConstraints:function(e){var t=this.getZoom(),n=this._applyZoomConstraints(t);t!==n&&this.zoomTo(n,this.zoomPoint,e);var i=this.getBoundsNoRotate(),r=this._applyBoundaryConstraints(i);return this._raiseConstraintsEvent(e),(i.x!==r.x||i.y!==r.y||e)&&this.fitBounds(r.rotate(-this.getRotation()),e),this},ensureVisible:function(e){return this.applyConstraints(e)},_fitBounds:function(t,n){var i=(n=n||{}).immediately||!1,r=n.constraints||!1,o=this.getAspectRatio(),s=t.getCenter(),a=new e.Rect(t.x,t.y,t.width,t.height,t.degrees+this.getRotation()).getBoundingBox();a.getAspectRatio()>=o?a.height=a.width/o:a.width=a.height*o,a.x=s.x-a.width/2,a.y=s.y-a.height/2;var l=1/a.width;if(r){var u=a.getAspectRatio(),c=this._applyZoomConstraints(l);l!==c&&(l=c,a.width=1/l,a.x=s.x-a.width/2,a.height=a.width/u,a.y=s.y-a.height/2),s=(a=this._applyBoundaryConstraints(a)).getCenter(),this._raiseConstraintsEvent(i)}if(i)return this.panTo(s,!0),this.zoomTo(l,null,!0);this.panTo(this.getCenter(!0),!0),this.zoomTo(this.getZoom(!0),null,!0);var h=this.getBounds(),d=this.getZoom();if(0===d||Math.abs(l/d-1)<1e-8)return this.zoomTo(l,!0),this.panTo(s,i);var p=(a=a.rotate(-this.getRotation())).getTopLeft().times(l).minus(h.getTopLeft().times(d)).divide(l-d);return this.zoomTo(l,p,i)},fitBounds:function(e,t){return this._fitBounds(e,{immediately:t,constraints:!1})},fitBoundsWithConstraints:function(e,t){return this._fitBounds(e,{immediately:t,constraints:!0})},fitVertically:function(t){var n=new e.Rect(this._contentBounds.x+this._contentBounds.width/2,this._contentBounds.y,0,this._contentBounds.height);return this.fitBounds(n,t)},fitHorizontally:function(t){var n=new e.Rect(this._contentBounds.x,this._contentBounds.y+this._contentBounds.height/2,this._contentBounds.width,0);return this.fitBounds(n,t)},getConstrainedBounds:function(e){var t;return t=this.getBounds(e),this._applyBoundaryConstraints(t)},panBy:function(t,n){var i=new e.Point(this.centerSpringX.target.value,this.centerSpringY.target.value);return this.panTo(i.plus(t),n)},panTo:function(e,t){return t?(this.centerSpringX.resetTo(e.x),this.centerSpringY.resetTo(e.y)):(this.centerSpringX.springTo(e.x),this.centerSpringY.springTo(e.y)),this.viewer&&this.viewer.raiseEvent("pan",{center:e,immediately:t}),this},zoomBy:function(e,t,n){return this.zoomTo(this.zoomSpring.target.value*e,t,n)},zoomTo:function(t,n,i){var r=this;return this.zoomPoint=n instanceof e.Point&&!isNaN(n.x)&&!isNaN(n.y)?n:null,i?this._adjustCenterSpringsForZoomPoint(function(){r.zoomSpring.resetTo(t)}):this.zoomSpring.springTo(t),this.viewer&&this.viewer.raiseEvent("zoom",{zoom:t,refPoint:n,immediately:i}),this},setRotation:function(t){return this.viewer&&this.viewer.drawer.canRotate()?(this.degrees=e.positiveModulo(t,360),this._setContentBounds(this.viewer.world.getHomeBounds(),this.viewer.world.getContentFactor()),this.viewer.forceRedraw(),this.viewer.raiseEvent("rotate",{degrees:t}),this):this},getRotation:function(){return this.degrees},resize:function(e,t){var n,i=this.getBoundsNoRotate(),r=i;return this.containerSize.x=e.x,this.containerSize.y=e.y,this._updateContainerInnerSize(),t&&(n=e.x/this.containerSize.x,r.width=i.width*n,r.height=r.width/this.getAspectRatio()),this.viewer&&this.viewer.raiseEvent("resize",{newContainerSize:e,maintain:t}),this.fitBounds(r,!0)},_updateContainerInnerSize:function(){this._containerInnerSize=new e.Point(Math.max(1,this.containerSize.x-(this._margins.left+this._margins.right)),Math.max(1,this.containerSize.y-(this._margins.top+this._margins.bottom)))},update:function(){var e=this;this._adjustCenterSpringsForZoomPoint(function(){e.zoomSpring.update()}),this.centerSpringX.update(),this.centerSpringY.update();var t=this.centerSpringX.current.value!==this._oldCenterX||this.centerSpringY.current.value!==this._oldCenterY||this.zoomSpring.current.value!==this._oldZoom;return this._oldCenterX=this.centerSpringX.current.value,this._oldCenterY=this.centerSpringY.current.value,this._oldZoom=this.zoomSpring.current.value,t},_adjustCenterSpringsForZoomPoint:function(e){if(this.zoomPoint){var t=this.pixelFromPoint(this.zoomPoint,!0);e();var n=this.pixelFromPoint(this.zoomPoint,!0).minus(t),i=this.deltaPointsFromPixels(n,!0);this.centerSpringX.shiftBy(i.x),this.centerSpringY.shiftBy(i.y),this.zoomSpring.isAtTargetValue()&&(this.zoomPoint=null)}else e()},deltaPixelsFromPointsNoRotate:function(e,t){return e.times(this._containerInnerSize.x*this.getZoom(t))},deltaPixelsFromPoints:function(e,t){return this.deltaPixelsFromPointsNoRotate(e.rotate(this.getRotation()),t)},deltaPointsFromPixelsNoRotate:function(e,t){return e.divide(this._containerInnerSize.x*this.getZoom(t))},deltaPointsFromPixels:function(e,t){return this.deltaPointsFromPixelsNoRotate(e,t).rotate(-this.getRotation())},pixelFromPointNoRotate:function(e,t){return this._pixelFromPointNoRotate(e,this.getBoundsNoRotate(t))},pixelFromPoint:function(e,t){return this._pixelFromPoint(e,this.getBoundsNoRotate(t))},_pixelFromPointNoRotate:function(t,n){return t.minus(n.getTopLeft()).times(this._containerInnerSize.x/n.width).plus(new e.Point(this._margins.left,this._margins.top))},_pixelFromPoint:function(e,t){return this._pixelFromPointNoRotate(e.rotate(this.getRotation(),this.getCenter(!0)),t)},pointFromPixelNoRotate:function(t,n){var i=this.getBoundsNoRotate(n);return t.minus(new e.Point(this._margins.left,this._margins.top)).divide(this._containerInnerSize.x/i.width).plus(i.getTopLeft())},pointFromPixel:function(e,t){return this.pointFromPixelNoRotate(e,t).rotate(-this.getRotation(),this.getCenter(!0))},_viewportToImageDelta:function(t,n){var i=this._contentBoundsNoRotate.width;return new e.Point(t*this._contentSizeNoRotate.x/i,n*this._contentSizeNoRotate.x/i)},viewportToImageCoordinates:function(t,n){if(t instanceof e.Point)return this.viewportToImageCoordinates(t.x,t.y);if(this.viewer){var i=this.viewer.world.getItemCount();if(i>1)e.console.error("[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.");else if(1===i){return this.viewer.world.getItemAt(0).viewportToImageCoordinates(t,n,!0)}}return this._viewportToImageDelta(t-this._contentBoundsNoRotate.x,n-this._contentBoundsNoRotate.y)},_imageToViewportDelta:function(t,n){var i=this._contentBoundsNoRotate.width;return new e.Point(t/this._contentSizeNoRotate.x*i,n/this._contentSizeNoRotate.x*i)},imageToViewportCoordinates:function(t,n){if(t instanceof e.Point)return this.imageToViewportCoordinates(t.x,t.y);if(this.viewer){var i=this.viewer.world.getItemCount();if(i>1)e.console.error("[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.");else if(1===i){return this.viewer.world.getItemAt(0).imageToViewportCoordinates(t,n,!0)}}var r=this._imageToViewportDelta(t,n);return r.x+=this._contentBoundsNoRotate.x,r.y+=this._contentBoundsNoRotate.y,r},imageToViewportRectangle:function(t,n,i,r){var o=t;if(o instanceof e.Rect||(o=new e.Rect(t,n,i,r)),this.viewer){var s=this.viewer.world.getItemCount();if(s>1)e.console.error("[Viewport.imageToViewportRectangle] is not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.");else if(1===s){return this.viewer.world.getItemAt(0).imageToViewportRectangle(t,n,i,r,!0)}}var a=this.imageToViewportCoordinates(o.x,o.y),l=this._imageToViewportDelta(o.width,o.height);return new e.Rect(a.x,a.y,l.x,l.y,o.degrees)},viewportToImageRectangle:function(t,n,i,r){var o=t;if(o instanceof e.Rect||(o=new e.Rect(t,n,i,r)),this.viewer){var s=this.viewer.world.getItemCount();if(s>1)e.console.error("[Viewport.viewportToImageRectangle] is not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.");else if(1===s){return this.viewer.world.getItemAt(0).viewportToImageRectangle(t,n,i,r,!0)}}var a=this.viewportToImageCoordinates(o.x,o.y),l=this._viewportToImageDelta(o.width,o.height);return new e.Rect(a.x,a.y,l.x,l.y,o.degrees)},viewerElementToImageCoordinates:function(e){var t=this.pointFromPixel(e,!0);return this.viewportToImageCoordinates(t)},imageToViewerElementCoordinates:function(e){var t=this.imageToViewportCoordinates(e);return this.pixelFromPoint(t,!0)},windowToImageCoordinates:function(t){e.console.assert(this.viewer,"[Viewport.windowToImageCoordinates] the viewport must have a viewer.");var n=t.minus(e.getElementPosition(this.viewer.element));return this.viewerElementToImageCoordinates(n)},imageToWindowCoordinates:function(t){return e.console.assert(this.viewer,"[Viewport.imageToWindowCoordinates] the viewport must have a viewer."),this.imageToViewerElementCoordinates(t).plus(e.getElementPosition(this.viewer.element))},viewerElementToViewportCoordinates:function(e){return this.pointFromPixel(e,!0)},viewportToViewerElementCoordinates:function(e){return this.pixelFromPoint(e,!0)},viewerElementToViewportRectangle:function(t){return e.Rect.fromSummits(this.pointFromPixel(t.getTopLeft(),!0),this.pointFromPixel(t.getTopRight(),!0),this.pointFromPixel(t.getBottomLeft(),!0))},viewportToViewerElementRectangle:function(t){return e.Rect.fromSummits(this.pixelFromPoint(t.getTopLeft(),!0),this.pixelFromPoint(t.getTopRight(),!0),this.pixelFromPoint(t.getBottomLeft(),!0))},windowToViewportCoordinates:function(t){e.console.assert(this.viewer,"[Viewport.windowToViewportCoordinates] the viewport must have a viewer.");var n=t.minus(e.getElementPosition(this.viewer.element));return this.viewerElementToViewportCoordinates(n)},viewportToWindowCoordinates:function(t){return e.console.assert(this.viewer,"[Viewport.viewportToWindowCoordinates] the viewport must have a viewer."),this.viewportToViewerElementCoordinates(t).plus(e.getElementPosition(this.viewer.element))},viewportToImageZoom:function(t){if(this.viewer){var n=this.viewer.world.getItemCount();if(n>1)e.console.error("[Viewport.viewportToImageZoom] is not accurate with multi-image.");else if(1===n){return this.viewer.world.getItemAt(0).viewportToImageZoom(t)}}var i=this._contentSizeNoRotate.x;return t*(this._containerInnerSize.x/i*this._contentBoundsNoRotate.width)},imageToViewportZoom:function(t){if(this.viewer){var n=this.viewer.world.getItemCount();if(n>1)e.console.error("[Viewport.imageToViewportZoom] is not accurate with multi-image.");else if(1===n){return this.viewer.world.getItemAt(0).imageToViewportZoom(t)}}return t*(this._contentSizeNoRotate.x/this._containerInnerSize.x/this._contentBoundsNoRotate.width)}}}(OpenSeadragon),function(e){function t(e,t,i,r,o,s,l,u,c){var h=l.getBoundingBox().getTopLeft(),d=l.getBoundingBox().getBottomRight();e.viewer&&e.viewer.raiseEvent("update-level",{tiledImage:e,havedrawn:t,level:r,opacity:o,visibility:s,drawArea:l,topleft:h,bottomright:d,currenttime:u,best:c}),a(e.coverage,r),a(e.loadingCoverage,r);for(var p=e._getCornerTiles(r,h,d),f=p.topLeft,g=p.bottomRight,m=e.source.getNumTiles(r),v=e.viewport.pixelFromPoint(e.viewport.getCenter()),y=f.x;y<=g.x;y++)for(var w=f.y;w<=g.y;w++){if(!e.wrapHorizontal&&!e.wrapVertical){var x=e.source.getTileBounds(r,y,w);if(null===l.intersection(x))continue}c=n(e,i,t,y,w,r,o,s,v,m,u,c)}return c}function n(t,n,r,a,l,u,c,h,d,p,f,g){var m=function(t,n,i,r,o,s,a,l,u,c){var h,d,p,f,g,m,v,y;s[i]||(s[i]={});s[i][t]||(s[i][t]={});s[i][t][n]||(h=(l.x+t%l.x)%l.x,d=(l.y+n%l.y)%l.y,p=o.getTileBounds(i,h,d),f=o.tileExists(i,h,d),g=o.getTileUrl(i,h,d),r.loadTilesWithAjax?(m=o.getTileAjaxHeaders(i,h,d),e.isPlainObject(r.ajaxHeaders)&&(m=e.extend({},r.ajaxHeaders,m))):m=null,v=o.getContext2D?o.getContext2D(i,h,d):void 0,p.x+=(t-h)/l.x,p.y+=c/u*((n-d)/l.y),y=new e.Tile(i,t,n,p,f,g,v,r.loadTilesWithAjax,m),h===l.x-1&&(y.isRightMost=!0),d===l.y-1&&(y.isBottomMost=!0),s[i][t][n]=y);return(y=s[i][t][n]).lastTouchTime=a,y}(a,l,u,t,t.source,t.tilesMatrix,f,p,t._worldWidthCurrent,t._worldHeightCurrent),v=r;t.viewer&&t.viewer.raiseEvent("update-tile",{tiledImage:t,tile:m}),s(t.coverage,u,a,l,!1);var y=m.loaded||m.loading||o(t.loadingCoverage,u,a,l);if(s(t.loadingCoverage,u,a,l,y),!m.exists)return g;if(n&&!v&&(o(t.coverage,u,a,l)?s(t.coverage,u,a,l,!0):v=!0),!v)return g;if(function(t,n,i,r,o,s){var a=t.bounds.getTopLeft();a.x*=s._scaleSpring.current.value,a.y*=s._scaleSpring.current.value,a.x+=s._xSpring.current.value,a.y+=s._ySpring.current.value;var l=t.bounds.getSize();l.x*=s._scaleSpring.current.value,l.y*=s._scaleSpring.current.value;var u=i.pixelFromPointNoRotate(a,!0),c=i.pixelFromPointNoRotate(a,!1),h=i.deltaPixelsFromPointsNoRotate(l,!0),d=i.deltaPixelsFromPointsNoRotate(l,!1),p=c.plus(d.divide(2)),f=r.squaredDistanceTo(p);n||(h=h.plus(new e.Point(1,1)));t.isRightMost&&s.wrapHorizontal&&(h.x+=.75);t.isBottomMost&&s.wrapVertical&&(h.y+=.75);t.position=u,t.size=h,t.squaredDistance=f,t.visibility=o}(m,t.source.tileOverlap,t.viewport,d,h,t),!m.loaded)if(m.context2D)i(t,m);else{var w=t._tileCache.getImageRecord(m.cacheKey);if(w)i(t,m,w.getImage())}m.loaded?function(e,t,n,i,r,o,a){var l,u,c=1e3*e.blendTime;t.blendStart||(t.blendStart=a);l=a-t.blendStart,u=c?Math.min(1,l/c):1,e.alwaysBlend&&(u*=o);if(t.opacity=u,e.lastDrawn.push(t),1==u)s(e.coverage,r,n,i,!0),e._hasOpaqueTile=!0;else if(l<c)return!0;return!1}(t,m,a,l,u,c,f)&&(t._needsDraw=!0):m.loading?t._tilesLoading++:y||(g=function(e,t){if(!e)return t;if(t.visibility>e.visibility)return t;if(t.visibility==e.visibility&&t.squaredDistance<e.squaredDistance)return t;return e}(g,m));return g}function i(e,t,n,i,r){var o=0;function s(){return o++,a}function a(){0===--o&&(t.loading=!1,t.loaded=!0,t.context2D||e._tileCache.cacheTile({image:n,tile:t,cutoff:i,tiledImage:e}),e._needsDraw=!0)}e.viewer.raiseEvent("tile-loaded",{tile:t,tiledImage:e,tileRequest:r,image:n,getCompletionCallback:s}),s()()}function r(e,t,n,i){var r,o,s,a;if(!e[t])return!1;if(void 0===n||void 0===i){for(s in r=e[t])if(r.hasOwnProperty(s))for(a in o=r[s])if(o.hasOwnProperty(a)&&!o[a])return!1;return!0}return void 0===e[t][n]||void 0===e[t][n][i]||!0===e[t][n][i]}function o(e,t,n,i){return void 0===n||void 0===i?r(e,t+1):r(e,t+1,2*n,2*i)&&r(e,t+1,2*n,2*i+1)&&r(e,t+1,2*n+1,2*i)&&r(e,t+1,2*n+1,2*i+1)}function s(t,n,i,r,o){t[n]?(t[n][i]||(t[n][i]={}),t[n][i][r]=o):e.console.warn("Setting coverage for a tile before its level's coverage has been reset: %s",n)}function a(e,t){e[t]={}}e.TiledImage=function(t){var n=this;e.console.assert(t.tileCache,"[TiledImage] options.tileCache is required"),e.console.assert(t.drawer,"[TiledImage] options.drawer is required"),e.console.assert(t.viewer,"[TiledImage] options.viewer is required"),e.console.assert(t.imageLoader,"[TiledImage] options.imageLoader is required"),e.console.assert(t.source,"[TiledImage] options.source is required"),e.console.assert(!t.clip||t.clip instanceof e.Rect,"[TiledImage] options.clip must be an OpenSeadragon.Rect if present"),e.EventSource.call(this),this._tileCache=t.tileCache,delete t.tileCache,this._drawer=t.drawer,delete t.drawer,this._imageLoader=t.imageLoader,delete t.imageLoader,t.clip instanceof e.Rect&&(this._clip=t.clip.clone()),delete t.clip;var i=t.x||0;delete t.x;var r=t.y||0;delete t.y,this.normHeight=t.source.dimensions.y/t.source.dimensions.x,this.contentAspectX=t.source.dimensions.x/t.source.dimensions.y;var o=1;t.width?(o=t.width,delete t.width,t.height&&(e.console.error("specifying both width and height to a tiledImage is not supported"),delete t.height)):t.height&&(o=t.height/this.normHeight,delete t.height);var s=t.fitBounds;delete t.fitBounds;var a=t.fitBoundsPlacement||OpenSeadragon.Placement.CENTER;delete t.fitBoundsPlacement;var l=t.degrees||0;delete t.degrees,e.extend(!0,this,{viewer:null,tilesMatrix:{},coverage:{},loadingCoverage:{},lastDrawn:[],lastResetTime:0,_midDraw:!1,_needsDraw:!0,_hasOpaqueTile:!1,_tilesLoading:0,springStiffness:e.DEFAULT_SETTINGS.springStiffness,animationTime:e.DEFAULT_SETTINGS.animationTime,minZoomImageRatio:e.DEFAULT_SETTINGS.minZoomImageRatio,wrapHorizontal:e.DEFAULT_SETTINGS.wrapHorizontal,wrapVertical:e.DEFAULT_SETTINGS.wrapVertical,immediateRender:e.DEFAULT_SETTINGS.immediateRender,blendTime:e.DEFAULT_SETTINGS.blendTime,alwaysBlend:e.DEFAULT_SETTINGS.alwaysBlend,minPixelRatio:e.DEFAULT_SETTINGS.minPixelRatio,smoothTileEdgesMinZoom:e.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,iOSDevice:e.DEFAULT_SETTINGS.iOSDevice,debugMode:e.DEFAULT_SETTINGS.debugMode,crossOriginPolicy:e.DEFAULT_SETTINGS.crossOriginPolicy,ajaxWithCredentials:e.DEFAULT_SETTINGS.ajaxWithCredentials,placeholderFillStyle:e.DEFAULT_SETTINGS.placeholderFillStyle,opacity:e.DEFAULT_SETTINGS.opacity,preload:e.DEFAULT_SETTINGS.preload,compositeOperation:e.DEFAULT_SETTINGS.compositeOperation},t),this._preload=this.preload,delete this.preload,this._fullyLoaded=!1,this._xSpring=new e.Spring({initial:i,springStiffness:this.springStiffness,animationTime:this.animationTime}),this._ySpring=new e.Spring({initial:r,springStiffness:this.springStiffness,animationTime:this.animationTime}),this._scaleSpring=new e.Spring({initial:o,springStiffness:this.springStiffness,animationTime:this.animationTime}),this._degreesSpring=new e.Spring({initial:l,springStiffness:this.springStiffness,animationTime:this.animationTime}),this._updateForScale(),s&&this.fitBounds(s,a,!0),this._drawingHandler=function(t){n.viewer.raiseEvent("tile-drawing",e.extend({tiledImage:n},t))}},e.extend(e.TiledImage.prototype,e.EventSource.prototype,{needsDraw:function(){return this._needsDraw},getFullyLoaded:function(){return this._fullyLoaded},_setFullyLoaded:function(e){e!==this._fullyLoaded&&(this._fullyLoaded=e,this.raiseEvent("fully-loaded-change",{fullyLoaded:this._fullyLoaded}))},reset:function(){this._tileCache.clearTilesFor(this),this.lastResetTime=e.now(),this._needsDraw=!0},update:function(){var e=this._xSpring.update(),t=this._ySpring.update(),n=this._scaleSpring.update(),i=this._degreesSpring.update();return!!(e||t||n||i)&&(this._updateForScale(),this._needsDraw=!0,!0)},draw:function(){(0!==this.opacity||this._preload)&&(this._midDraw=!0,this._updateViewport(),this._midDraw=!1)},destroy:function(){this.reset()},getBounds:function(e){return this.getBoundsNoRotate(e).rotate(this.getRotation(e),this._getRotationPoint(e))},getBoundsNoRotate:function(t){return t?new e.Rect(this._xSpring.current.value,this._ySpring.current.value,this._worldWidthCurrent,this._worldHeightCurrent):new e.Rect(this._xSpring.target.value,this._ySpring.target.value,this._worldWidthTarget,this._worldHeightTarget)},getWorldBounds:function(){return e.console.error("[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead"),this.getBounds()},getClippedBounds:function(t){var n=this.getBoundsNoRotate(t);if(this._clip){var i=(t?this._worldWidthCurrent:this._worldWidthTarget)/this.source.dimensions.x,r=this._clip.times(i);n=new e.Rect(n.x+r.x,n.y+r.y,r.width,r.height)}return n.rotate(this.getRotation(t),this._getRotationPoint(t))},getContentSize:function(){return new e.Point(this.source.dimensions.x,this.source.dimensions.y)},_viewportToImageDelta:function(t,n,i){var r=i?this._scaleSpring.current.value:this._scaleSpring.target.value;return new e.Point(t*(this.source.dimensions.x/r),n*(this.source.dimensions.y*this.contentAspectX/r))},viewportToImageCoordinates:function(t,n,i){var r;return t instanceof e.Point?(i=n,r=t):r=new e.Point(t,n),r=r.rotate(-this.getRotation(i),this._getRotationPoint(i)),i?this._viewportToImageDelta(r.x-this._xSpring.current.value,r.y-this._ySpring.current.value):this._viewportToImageDelta(r.x-this._xSpring.target.value,r.y-this._ySpring.target.value)},_imageToViewportDelta:function(t,n,i){var r=i?this._scaleSpring.current.value:this._scaleSpring.target.value;return new e.Point(t/this.source.dimensions.x*r,n/this.source.dimensions.y/this.contentAspectX*r)},imageToViewportCoordinates:function(t,n,i){t instanceof e.Point&&(i=n,n=t.y,t=t.x);var r=this._imageToViewportDelta(t,n);return i?(r.x+=this._xSpring.current.value,r.y+=this._ySpring.current.value):(r.x+=this._xSpring.target.value,r.y+=this._ySpring.target.value),r.rotate(this.getRotation(i),this._getRotationPoint(i))},imageToViewportRectangle:function(t,n,i,r,o){var s=t;s instanceof e.Rect?o=n:s=new e.Rect(t,n,i,r);var a=this.imageToViewportCoordinates(s.getTopLeft(),o),l=this._imageToViewportDelta(s.width,s.height,o);return new e.Rect(a.x,a.y,l.x,l.y,s.degrees+this.getRotation(o))},viewportToImageRectangle:function(t,n,i,r,o){var s=t;t instanceof e.Rect?o=n:s=new e.Rect(t,n,i,r);var a=this.viewportToImageCoordinates(s.getTopLeft(),o),l=this._viewportToImageDelta(s.width,s.height,o);return new e.Rect(a.x,a.y,l.x,l.y,s.degrees-this.getRotation(o))},viewerElementToImageCoordinates:function(e){var t=this.viewport.pointFromPixel(e,!0);return this.viewportToImageCoordinates(t)},imageToViewerElementCoordinates:function(e){var t=this.imageToViewportCoordinates(e);return this.viewport.pixelFromPoint(t,!0)},windowToImageCoordinates:function(e){var t=e.minus(OpenSeadragon.getElementPosition(this.viewer.element));return this.viewerElementToImageCoordinates(t)},imageToWindowCoordinates:function(e){return this.imageToViewerElementCoordinates(e).plus(OpenSeadragon.getElementPosition(this.viewer.element))},_viewportToTiledImageRectangle:function(t){var n=this._scaleSpring.current.value;return t=t.rotate(-this.getRotation(!0),this._getRotationPoint(!0)),new e.Rect((t.x-this._xSpring.current.value)/n,(t.y-this._ySpring.current.value)/n,t.width/n,t.height/n,t.degrees)},viewportToImageZoom:function(e){return this._scaleSpring.current.value*this.viewport._containerInnerSize.x/this.source.dimensions.x*e},imageToViewportZoom:function(e){return e/(this._scaleSpring.current.value*this.viewport._containerInnerSize.x/this.source.dimensions.x)},setPosition:function(e,t){var n=this._xSpring.target.value===e.x&&this._ySpring.target.value===e.y;if(t){if(n&&this._xSpring.current.value===e.x&&this._ySpring.current.value===e.y)return;this._xSpring.resetTo(e.x),this._ySpring.resetTo(e.y),this._needsDraw=!0}else{if(n)return;this._xSpring.springTo(e.x),this._ySpring.springTo(e.y),this._needsDraw=!0}n||this._raiseBoundsChange()},setWidth:function(e,t){this._setScale(e,t)},setHeight:function(e,t){this._setScale(e/this.normHeight,t)},fitBounds:function(t,n,i){n=n||e.Placement.CENTER;var r=e.Placement.properties[n],o=this.contentAspectX,s=0,a=0,l=1,u=1;if(this._clip&&(o=this._clip.getAspectRatio(),l=this._clip.width/this.source.dimensions.x,u=this._clip.height/this.source.dimensions.y,t.getAspectRatio()>o?(s=this._clip.x/this._clip.height*t.height,a=this._clip.y/this._clip.height*t.height):(s=this._clip.x/this._clip.width*t.width,a=this._clip.y/this._clip.width*t.width)),t.getAspectRatio()>o){var c=t.height/u,h=0;r.isHorizontallyCentered?h=(t.width-t.height*o)/2:r.isRight&&(h=t.width-t.height*o),this.setPosition(new e.Point(t.x-s+h,t.y-a),i),this.setHeight(c,i)}else{var d=t.width/l,p=0;r.isVerticallyCentered?p=(t.height-t.width/o)/2:r.isBottom&&(p=t.height-t.width/o),this.setPosition(new e.Point(t.x-s,t.y-a+p),i),this.setWidth(d,i)}},getClip:function(){return this._clip?this._clip.clone():null},setClip:function(t){e.console.assert(!t||t instanceof e.Rect,"[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null"),t instanceof e.Rect?this._clip=t.clone():this._clip=null,this._needsDraw=!0,this.raiseEvent("clip-change")},getOpacity:function(){return this.opacity},setOpacity:function(e){e!==this.opacity&&(this.opacity=e,this._needsDraw=!0,this.raiseEvent("opacity-change",{opacity:this.opacity}))},getPreload:function(){return this._preload},setPreload:function(e){this._preload=!!e,this._needsDraw=!0},getRotation:function(e){return e?this._degreesSpring.current.value:this._degreesSpring.target.value},setRotation:function(e,t){this._degreesSpring.target.value===e&&this._degreesSpring.isAtTargetValue()||(t?this._degreesSpring.resetTo(e):this._degreesSpring.springTo(e),this._needsDraw=!0,this._raiseBoundsChange())},_getRotationPoint:function(e){return this.getBoundsNoRotate(e).getCenter()},getCompositeOperation:function(){return this.compositeOperation},setCompositeOperation:function(e){e!==this.compositeOperation&&(this.compositeOperation=e,this._needsDraw=!0,this.raiseEvent("composite-operation-change",{compositeOperation:this.compositeOperation}))},_setScale:function(e,t){var n=this._scaleSpring.target.value===e;if(t){if(n&&this._scaleSpring.current.value===e)return;this._scaleSpring.resetTo(e),this._updateForScale(),this._needsDraw=!0}else{if(n)return;this._scaleSpring.springTo(e),this._updateForScale(),this._needsDraw=!0}n||this._raiseBoundsChange()},_updateForScale:function(){this._worldWidthTarget=this._scaleSpring.target.value,this._worldHeightTarget=this.normHeight*this._scaleSpring.target.value,this._worldWidthCurrent=this._scaleSpring.current.value,this._worldHeightCurrent=this.normHeight*this._scaleSpring.current.value},_raiseBoundsChange:function(){this.raiseEvent("bounds-change")},_isBottomItem:function(){return this.viewer.world.getItemAt(0)===this},_getLevelsInterval:function(){var e=Math.max(this.source.minLevel,Math.floor(Math.log(this.minZoomImageRatio)/Math.log(2))),t=this.viewport.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(0),!0).x*this._scaleSpring.current.value,n=Math.min(Math.abs(this.source.maxLevel),Math.abs(Math.floor(Math.log(t/this.minPixelRatio)/Math.log(2))));return{lowestLevel:e=Math.min(e,n),highestLevel:n}},_updateViewport:function(){for(this._needsDraw=!1,this._tilesLoading=0,this.loadingCoverage={};this.lastDrawn.length>0;){this.lastDrawn.pop().beingDrawn=!1}var n=this.viewport,o=this._viewportToTiledImageRectangle(n.getBoundsWithMargins(!0));if(!this.wrapHorizontal&&!this.wrapVertical){var s=this._viewportToTiledImageRectangle(this.getClippedBounds(!0));if(null===(o=o.intersection(s)))return}for(var a=this._getLevelsInterval(),l=a.lowestLevel,u=a.highestLevel,c=null,h=!1,d=e.now(),p=u;p>=l;p--){var f=!1,g=n.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(p),!0).x*this._scaleSpring.current.value;if(p===l||!h&&g>=this.minPixelRatio)f=!0,h=!0;else if(!h)continue;var m=n.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(p),!1).x*this._scaleSpring.current.value,v=n.deltaPixelsFromPointsNoRotate(this.source.getPixelRatio(Math.max(this.source.getClosestLevel(),0)),!1).x*this._scaleSpring.current.value,y=this.immediateRender?1:v;if(c=t(this,h,f,p,Math.min(1,(g-.5)/.5),y/Math.abs(y-m),o,d,c),r(this.coverage,p))break}!function(t,n){if(0===t.opacity||0===n.length&&!t.placeholderFillStyle)return;var i,r,o,s=n[0];s&&(i=t.opacity<1||t.compositeOperation&&"source-over"!==t.compositeOperation||!t._isBottomItem()&&s._hasTransparencyChannel());var a,l=t.viewport.getZoom(!0),u=t.viewportToImageZoom(l);n.length>1&&u>t.smoothTileEdgesMinZoom&&!t.iOSDevice&&t.getRotation(!0)%360==0&&e.supportsCanvas&&(i=!0,r=s.getScaleForEdgeSmoothing(),o=s.getTranslationForEdgeSmoothing(r,t._drawer.getCanvasSize(!1),t._drawer.getCanvasSize(!0)));i&&(r||(a=t.viewport.viewportToViewerElementRectangle(t.getClippedBounds(!0)).getIntegerBoundingBox().times(e.pixelDensityRatio)),t._drawer._clear(!0,a));r||(0!==t.viewport.degrees&&t._drawer._offsetForRotation({degrees:t.viewport.degrees,useSketch:i}),t.getRotation(!0)%360!=0&&t._drawer._offsetForRotation({degrees:t.getRotation(!0),point:t.viewport.pixelFromPointNoRotate(t._getRotationPoint(!0),!0),useSketch:i}));var c=!1;if(t._clip){t._drawer.saveContext(i);var h=t.imageToViewportRectangle(t._clip,!0);h=h.rotate(-t.getRotation(!0),t._getRotationPoint(!0));var d=t._drawer.viewportToDrawerRectangle(h);r&&(d=d.times(r)),o&&(d=d.translate(o)),t._drawer.setClip(d,i),c=!0}if(t.placeholderFillStyle&&!1===t._hasOpaqueTile){var p=t._drawer.viewportToDrawerRectangle(t.getBounds(!0));r&&(p=p.times(r)),o&&(p=p.translate(o));var f=null;f="function"==typeof t.placeholderFillStyle?t.placeholderFillStyle(t,t._drawer.context):t.placeholderFillStyle,t._drawer.drawRectangle(p,f,i)}for(var g=n.length-1;g>=0;g--)s=n[g],t._drawer.drawTile(s,t._drawingHandler,i,r,o),s.beingDrawn=!0,t.viewer&&t.viewer.raiseEvent("tile-drawn",{tiledImage:t,tile:s});c&&t._drawer.restoreContext(i);r||(t.getRotation(!0)%360!=0&&t._drawer._restoreRotationChanges(i),0!==t.viewport.degrees&&t._drawer._restoreRotationChanges(i));i&&(r&&(0!==t.viewport.degrees&&t._drawer._offsetForRotation({degrees:t.viewport.degrees,useSketch:!1}),t.getRotation(!0)%360!=0&&t._drawer._offsetForRotation({degrees:t.getRotation(!0),point:t.viewport.pixelFromPointNoRotate(t._getRotationPoint(!0),!0),useSketch:!1})),t._drawer.blendSketch({opacity:t.opacity,scale:r,translate:o,compositeOperation:t.compositeOperation,bounds:a}),r&&(t.getRotation(!0)%360!=0&&t._drawer._restoreRotationChanges(!1),0!==t.viewport.degrees&&t._drawer._restoreRotationChanges(!1)));!function(t,n){if(t.debugMode)for(var i=n.length-1;i>=0;i--){var r=n[i];try{t._drawer.drawDebugInfo(r,n.length,i,t)}catch(t){e.console.error(t)}}}(t,n)}(this,this.lastDrawn),c&&!c.context2D?(!function(t,n,r){n.loading=!0,t._imageLoader.addJob({src:n.url,loadWithAjax:n.loadWithAjax,ajaxHeaders:n.ajaxHeaders,crossOriginPolicy:t.crossOriginPolicy,ajaxWithCredentials:t.ajaxWithCredentials,callback:function(o,s,a){!function(t,n,r,o,s,a){if(!o)return e.console.log("Tile %s failed to load: %s - error: %s",n,n.url,s),t.viewer.raiseEvent("tile-load-failed",{tile:n,tiledImage:t,time:r,message:s,tileRequest:a}),n.loading=!1,void(n.exists=!1);if(r<t.lastResetTime)return e.console.log("Ignoring tile %s loaded before reset: %s",n,n.url),void(n.loading=!1);var l=function(){var e=t.source.getClosestLevel();i(t,n,o,e,a)};t._midDraw?window.setTimeout(l,1):l()}(t,n,r,o,s,a)},abort:function(){n.loading=!1}})}(this,c,d),this._needsDraw=!0,this._setFullyLoaded(!1)):this._setFullyLoaded(0===this._tilesLoading)},_getCornerTiles:function(t,n,i){var r,o,s,a;this.wrapHorizontal?(r=e.positiveModulo(n.x,1),o=e.positiveModulo(i.x,1)):(r=Math.max(0,n.x),o=Math.min(1,i.x));var l=1/this.source.aspectRatio;this.wrapVertical?(s=e.positiveModulo(n.y,l),a=e.positiveModulo(i.y,l)):(s=Math.max(0,n.y),a=Math.min(l,i.y));var u=this.source.getTileAtPoint(t,new e.Point(r,s)),c=this.source.getTileAtPoint(t,new e.Point(o,a)),h=this.source.getNumTiles(t);return this.wrapHorizontal&&(u.x+=h.x*Math.floor(n.x),c.x+=h.x*Math.floor(i.x)),this.wrapVertical&&(u.y+=h.y*Math.floor(n.y/l),c.y+=h.y*Math.floor(i.y/l)),{topLeft:u,bottomRight:c}}})}(OpenSeadragon),function(e){var t=function(t){e.console.assert(t,"[ImageRecord] options is required"),e.console.assert(t.image,"[ImageRecord] options.image is required"),this._image=t.image,this._tiles=[]};t.prototype={destroy:function(){this._image=null,this._renderedContext=null,this._tiles=null},getImage:function(){return this._image},getRenderedContext:function(){if(!this._renderedContext){var e=document.createElement("canvas");e.width=this._image.width,e.height=this._image.height,this._renderedContext=e.getContext("2d"),this._renderedContext.drawImage(this._image,0,0),this._image=null}return this._renderedContext},setRenderedContext:function(t){e.console.error("ImageRecord.setRenderedContext is deprecated. The rendered context should be created by the ImageRecord itself when calling ImageRecord.getRenderedContext."),this._renderedContext=t},addTile:function(t){e.console.assert(t,"[ImageRecord.addTile] tile is required"),this._tiles.push(t)},removeTile:function(t){for(var n=0;n<this._tiles.length;n++)if(this._tiles[n]===t)return void this._tiles.splice(n,1);e.console.warn("[ImageRecord.removeTile] trying to remove unknown tile",t)},getTileCount:function(){return this._tiles.length}},e.TileCache=function(t){t=t||{},this._maxImageCacheCount=t.maxImageCacheCount||e.DEFAULT_SETTINGS.maxImageCacheCount,this._tilesLoaded=[],this._imagesLoaded=[],this._imagesLoadedCount=0},e.TileCache.prototype={numTilesLoaded:function(){return this._tilesLoaded.length},cacheTile:function(n){e.console.assert(n,"[TileCache.cacheTile] options is required"),e.console.assert(n.tile,"[TileCache.cacheTile] options.tile is required"),e.console.assert(n.tile.cacheKey,"[TileCache.cacheTile] options.tile.cacheKey is required"),e.console.assert(n.tiledImage,"[TileCache.cacheTile] options.tiledImage is required");var i=n.cutoff||0,r=this._tilesLoaded.length,o=this._imagesLoaded[n.tile.cacheKey];if(o||(e.console.assert(n.image,"[TileCache.cacheTile] options.image is required to create an ImageRecord"),o=this._imagesLoaded[n.tile.cacheKey]=new t({image:n.image}),this._imagesLoadedCount++),o.addTile(n.tile),n.tile.cacheImageRecord=o,this._imagesLoadedCount>this._maxImageCacheCount){for(var s,a,l,u,c,h,d=null,p=-1,f=null,g=this._tilesLoaded.length-1;g>=0;g--)(s=(h=this._tilesLoaded[g]).tile).level<=i||s.beingDrawn||(d?(u=s.lastTouchTime,a=d.lastTouchTime,c=s.level,l=d.level,(u<a||u==a&&c>l)&&(d=s,p=g,f=h)):(d=s,p=g,f=h));d&&p>=0&&(this._unloadTile(f),r=p)}this._tilesLoaded[r]=new function(t){e.console.assert(t,"[TileCache.cacheTile] options is required"),e.console.assert(t.tile,"[TileCache.cacheTile] options.tile is required"),e.console.assert(t.tiledImage,"[TileCache.cacheTile] options.tiledImage is required"),this.tile=t.tile,this.tiledImage=t.tiledImage}({tile:n.tile,tiledImage:n.tiledImage})},clearTilesFor:function(t){var n;e.console.assert(t,"[TileCache.clearTilesFor] tiledImage is required");for(var i=0;i<this._tilesLoaded.length;++i)(n=this._tilesLoaded[i]).tiledImage===t&&(this._unloadTile(n),this._tilesLoaded.splice(i,1),i--)},getImageRecord:function(t){return e.console.assert(t,"[TileCache.getImageRecord] cacheKey is required"),this._imagesLoaded[t]},_unloadTile:function(t){e.console.assert(t,"[TileCache._unloadTile] tileRecord is required");var n=t.tile,i=t.tiledImage;n.unload(),n.cacheImageRecord=null;var r=this._imagesLoaded[n.cacheKey];r.removeTile(n),r.getTileCount()||(r.destroy(),delete this._imagesLoaded[n.cacheKey],this._imagesLoadedCount--),i.viewer.raiseEvent("tile-unloaded",{tile:n,tiledImage:i})}}}(OpenSeadragon),function(e){e.World=function(t){var n=this;e.console.assert(t.viewer,"[World] options.viewer is required"),e.EventSource.call(this),this.viewer=t.viewer,this._items=[],this._needsDraw=!1,this._autoRefigureSizes=!0,this._needsSizesFigured=!1,this._delegatedFigureSizes=function(e){n._autoRefigureSizes?n._figureSizes():n._needsSizesFigured=!0},this._figureSizes()},e.extend(e.World.prototype,e.EventSource.prototype,{addItem:function(t,n){if(e.console.assert(t,"[World.addItem] item is required"),e.console.assert(t instanceof e.TiledImage,"[World.addItem] only TiledImages supported at this time"),void 0!==(n=n||{}).index){var i=Math.max(0,Math.min(this._items.length,n.index));this._items.splice(i,0,t)}else this._items.push(t);this._autoRefigureSizes?this._figureSizes():this._needsSizesFigured=!0,this._needsDraw=!0,t.addHandler("bounds-change",this._delegatedFigureSizes),t.addHandler("clip-change",this._delegatedFigureSizes),this.raiseEvent("add-item",{item:t})},getItemAt:function(t){return e.console.assert(void 0!==t,"[World.getItemAt] index is required"),this._items[t]},getIndexOfItem:function(t){return e.console.assert(t,"[World.getIndexOfItem] item is required"),e.indexOf(this._items,t)},getItemCount:function(){return this._items.length},setItemIndex:function(t,n){e.console.assert(t,"[World.setItemIndex] item is required"),e.console.assert(void 0!==n,"[World.setItemIndex] index is required");var i=this.getIndexOfItem(t);if(n>=this._items.length)throw new Error("Index bigger than number of layers.");n!==i&&-1!==i&&(this._items.splice(i,1),this._items.splice(n,0,t),this._needsDraw=!0,this.raiseEvent("item-index-change",{item:t,previousIndex:i,newIndex:n}))},removeItem:function(t){e.console.assert(t,"[World.removeItem] item is required");var n=e.indexOf(this._items,t);-1!==n&&(t.removeHandler("bounds-change",this._delegatedFigureSizes),t.removeHandler("clip-change",this._delegatedFigureSizes),t.destroy(),this._items.splice(n,1),this._figureSizes(),this._needsDraw=!0,this._raiseRemoveItem(t))},removeAll:function(){var e,t;for(this.viewer._cancelPendingImages(),t=0;t<this._items.length;t++)(e=this._items[t]).removeHandler("bounds-change",this._delegatedFigureSizes),e.removeHandler("clip-change",this._delegatedFigureSizes),e.destroy();var n=this._items;for(this._items=[],this._figureSizes(),this._needsDraw=!0,t=0;t<n.length;t++)e=n[t],this._raiseRemoveItem(e)},resetItems:function(){for(var e=0;e<this._items.length;e++)this._items[e].reset()},update:function(){for(var e=!1,t=0;t<this._items.length;t++)e=this._items[t].update()||e;return e},draw:function(){for(var e=0;e<this._items.length;e++)this._items[e].draw();this._needsDraw=!1},needsDraw:function(){for(var e=0;e<this._items.length;e++)if(this._items[e].needsDraw())return!0;return this._needsDraw},getHomeBounds:function(){return this._homeBounds.clone()},getContentFactor:function(){return this._contentFactor},setAutoRefigureSizes:function(e){this._autoRefigureSizes=e,e&this._needsSizesFigured&&(this._figureSizes(),this._needsSizesFigured=!1)},arrange:function(t){var n,i=(t=t||{}).immediately||!1,r=t.layout||e.DEFAULT_SETTINGS.collectionLayout,o=t.rows||e.DEFAULT_SETTINGS.collectionRows,s=t.columns||e.DEFAULT_SETTINGS.collectionColumns,a=t.tileSize||e.DEFAULT_SETTINGS.collectionTileSize,l=a+(t.tileMargin||e.DEFAULT_SETTINGS.collectionTileMargin);n=!t.rows&&s?s:Math.ceil(this._items.length/o);var u,c,h,d,p,f=0,g=0;this.setAutoRefigureSizes(!1);for(var m=0;m<this._items.length;m++)m&&m%n==0&&("horizontal"===r?(g+=l,f=0):(f+=l,g=0)),d=(h=(c=(u=this._items[m]).getBounds()).width>c.height?a:a*(c.width/c.height))*(c.height/c.width),p=new e.Point(f+(a-h)/2,g+(a-d)/2),u.setPosition(p,i),u.setWidth(h,i),"horizontal"===r?f+=l:g+=l;this.setAutoRefigureSizes(!0)},_figureSizes:function(){var t=this._homeBounds?this._homeBounds.clone():null,n=this._contentSize?this._contentSize.clone():null,i=this._contentFactor||0;if(this._items.length){var r=this._items[0],o=r.getBounds();this._contentFactor=r.getContentSize().x/o.width;for(var s=r.getClippedBounds().getBoundingBox(),a=s.x,l=s.y,u=s.x+s.width,c=s.y+s.height,h=1;h<this._items.length;h++)o=(r=this._items[h]).getBounds(),this._contentFactor=Math.max(this._contentFactor,r.getContentSize().x/o.width),s=r.getClippedBounds().getBoundingBox(),a=Math.min(a,s.x),l=Math.min(l,s.y),u=Math.max(u,s.x+s.width),c=Math.max(c,s.y+s.height);this._homeBounds=new e.Rect(a,l,u-a,c-l),this._contentSize=new e.Point(this._homeBounds.width*this._contentFactor,this._homeBounds.height*this._contentFactor)}else this._homeBounds=new e.Rect(0,0,1,1),this._contentSize=new e.Point(1,1),this._contentFactor=1;this._contentFactor===i&&this._homeBounds.equals(t)&&this._contentSize.equals(n)||this.raiseEvent("metrics-change",{})},_raiseRemoveItem:function(e){this.raiseEvent("remove-item",{item:e})}})}(OpenSeadragon)},function(e,t,n){var i;!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,l=o.slice,u=o.concat,c=o.push,h=o.indexOf,d={},p=d.toString,f=d.hasOwnProperty,g=f.toString,m=g.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},w=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function T(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in x)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function _(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var S=function(e,t){return new S.fn.init(e,t)},b=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function E(e){var t=!!e&&"length"in e&&e.length,n=_(e);return!y(e)&&!w(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}S.fn=S.prototype={jquery:"3.3.1",constructor:S,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},S.extend=S.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(u&&i&&(S.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&S.isPlainObject(n)?n:{},s[t]=S.extend(u,o,i)):void 0!==i&&(s[t]=i));return s},S.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&g.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){T(e)},each:function(e,t){var n,i=0;if(E(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(b,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(E(Object(e))?S.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:h.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(E(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return u.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=o[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var P=function(e){var t,n,i,r,o,s,a,l,u,c,h,d,p,f,g,m,v,y,w,x="sizzle"+1*new Date,T=e.document,_=0,S=0,b=se(),E=se(),P=se(),C=function(e,t){return e===t&&(h=!0),0},R={}.hasOwnProperty,k=[],O=k.pop,D=k.push,I=k.push,A=k.slice,L=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+M+"*\\]",z=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),j=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),W=new RegExp("^"+M+"*,"+M+"*"),q=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),$=new RegExp(z),V=new RegExp("^"+N+"$"),G={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Z=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(k=A.call(T.childNodes),T.childNodes),k[T.childNodes.length].nodeType}catch(e){I={apply:k.length?function(e,t){D.apply(e,A.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,a,u,c,h,f,v,y=t&&t.ownerDocument,_=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==_&&9!==_&&11!==_)return i;if(!r&&((t?t.ownerDocument||t:T)!==p&&d(t),t=t||p,g)){if(11!==_&&(h=Y.exec(e)))if(o=h[1]){if(9===_){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(y&&(u=y.getElementById(o))&&w(t,u)&&u.id===o)return i.push(u),i}else{if(h[2])return I.apply(i,t.getElementsByTagName(e)),i;if((o=h[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!P[e+" "]&&(!m||!m.test(e))){if(1!==_)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=x),a=(f=s(e)).length;a--;)f[a]="#"+c+" "+ve(f[a]);v=f.join(","),y=Q.test(e)&&ge(t.parentNode)||t}if(v)try{return I.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(j,"$1"),t,i,r)}function se(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[x]=!0,e}function le(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ce(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:T;return s!==p&&9===s.nodeType&&s.documentElement?(f=(p=s).documentElement,g=!o(p),T!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(p.getElementsByClassName),n.getById=le(function(e){return f.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=K.test(p.querySelectorAll))&&(le(function(e){f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+B+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=K.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",z)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(f.compareDocumentPosition),w=t||K.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return h=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===p||e.ownerDocument===T&&w(T,e)?-1:t===p||t.ownerDocument===T&&w(T,t)?1:c?L(c,e)-L(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return h=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===p?-1:t===p?1:r?-1:o?1:c?L(c,e)-L(c,t):0;if(r===o)return ce(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ce(s[i],a[i]):s[i]===T?-1:a[i]===T?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(U,"='$1']"),n.matchesSelector&&g&&!P[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),w(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var r=i.attrHandle[t.toLowerCase()],o=r&&R.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(h=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(C),h){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ae,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=b[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&b(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,h,d,p,f,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(m){if(o){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(w=(p=(u=(c=(h=(d=m)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===_&&u[1])&&u[2],d=p&&m.childNodes[p];d=++p&&d&&d[g]||(w=p=0)||f.pop();)if(1===d.nodeType&&++w&&d===t){c[e]=[_,p,w];break}}else if(y&&(w=p=(u=(c=(h=(d=t)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]||[])[0]===_&&u[1]),!1===w)for(;(d=++p&&d&&d[g]||(w=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++w||(y&&((c=(h=d[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[e]=[_,w]),d!==t)););return(w-=r)===i||w%i==0&&w/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=L(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace(j,"$1"));return i[x]?ae(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return V.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=de(t);function me(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=S++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var u,c,h,d=[_,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(c=(h=t[x]||(t[x]={}))[t.uniqueID]||(h[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[o])&&u[0]===_&&u[1]===a)return d[2]=u[2];if(c[o]=d,d[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),u&&t.push(a)));return s}function Te(e,t,n,i,r,o){return i&&!i[x]&&(i=Te(i)),r&&!r[x]&&(r=Te(r,o)),ae(function(o,s,a,l){var u,c,h,d=[],p=[],f=s.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xe(g,d,e,a,l),v=n?r||(o?e:f||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(u=xe(v,p),i(u,[],a,l),c=u.length;c--;)(h=u[c])&&(v[p[c]]=!(m[p[c]]=h));if(o){if(r||e){if(r){for(u=[],c=v.length;c--;)(h=v[c])&&u.push(m[c]=h);r(null,v=[],u,l)}for(c=v.length;c--;)(h=v[c])&&(u=r?L(o,h):d[c])>-1&&(o[u]=!(s[u]=h))}}else v=xe(v===s?v.splice(f,v.length):v),r?r(null,s,v,l):I.apply(s,v)})}function _e(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,c=ye(function(e){return e===t},a,!0),h=ye(function(e){return L(t,e)>-1},a,!0),d=[function(e,n,i){var r=!s&&(i||n!==u)||((t=n).nodeType?c(e,n,i):h(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])d=[ye(we(d),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return Te(l>1&&we(d),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(j,"$1"),n,l<r&&_e(e.slice(l,r)),r<o&&_e(e=e.slice(r)),r<o&&ve(e))}d.push(n)}return we(d)}return me.prototype=i.filters=i.pseudos,i.setFilters=new me,s=oe.tokenize=function(e,t){var n,r,o,s,a,l,u,c=E[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],u=i.preFilter;a;){for(s in n&&!(r=W.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=q.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(j," ")}),a=a.slice(n.length)),i.filter)!(r=G[s].exec(a))||u[s]&&!(r=u[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):E(e,l).slice(0)},a=oe.compile=function(e,t){var n,r=[],o=[],a=P[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=_e(t[n]))[x]?r.push(a):o.push(a);(a=P(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,l,c){var h,f,m,v=0,y="0",w=o&&[],x=[],T=u,S=o||r&&i.find.TAG("*",c),b=_+=null==T?1:Math.random()||.1,E=S.length;for(c&&(u=s===p||s||c);y!==E&&null!=(h=S[y]);y++){if(r&&h){for(f=0,s||h.ownerDocument===p||(d(h),a=!g);m=e[f++];)if(m(h,s||p,a)){l.push(h);break}c&&(_=b)}n&&((h=!m&&h)&&v--,o&&w.push(h))}if(v+=y,n&&y!==v){for(f=0;m=t[f++];)m(w,x,s,a);if(o){if(v>0)for(;y--;)w[y]||x[y]||(x[y]=O.call(l));x=xe(x)}I.apply(l,x),c&&!o&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return c&&(_=b,u=T),w};return n?ae(o):o}(o,r))).selector=e}return a},l=oe.select=function(e,t,n,r){var o,l,u,c,h,d="function"==typeof e&&e,p=!r&&s(e=d.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(J,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=G.needsContext.test(e)?0:l.length;o--&&(u=l[o],!i.relative[c=u.type]);)if((h=i.find[c])&&(r=h(u.matches[0].replace(J,ee),Q.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ve(l)))return I.apply(n,r),n;break}}return(d||a(e,p))(r,t,!g,n,!t||Q.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(C).join("")===x,n.detectDuplicates=!!h,d(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ue(B,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);S.find=P,S.expr=P.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=P.uniqueSort,S.text=P.getText,S.isXMLDoc=P.isXML,S.contains=P.contains,S.escapeSelector=P.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&S(e).is(n))break;i.push(e)}return i},R=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=S.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){return y(t)?S.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?S.grep(e,function(e){return e===t!==n}):"string"!=typeof t?S.grep(e,function(e){return h.call(t,e)>-1!==n}):S.filter(t,e,n)}S.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?S.find.matchesSelector(i,e)?[i]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<i;t++)if(S.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)S.find(e,r[t],n);return i>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&k.test(e)?S(e):e||[],!1).length}});var A,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),D.test(i[1])&&S.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,A=S(s);var B=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&S(e);if(!k.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?S.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?h.call(S(e),this[0]):h.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return R((e.parentNode||{}).firstChild,e)},children:function(e){return R(e.firstChild)},contents:function(e){return O(e,"iframe")?e.contentDocument:(O(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},function(e,t){S.fn[e]=function(n,i){var r=S.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=S.filter(i,r)),this.length>1&&(M[e]||S.uniqueSort(r),B.test(e)&&r.reverse()),this.pushStack(r)}});var H=/[^\x20\t\r\n\f]+/g;function z(e){return e}function F(e){throw e}function j(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return S.each(e.match(H)||[],function(e,n){t[n]=!0}),t}(e):S.extend({},e);var t,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){S.each(n,function(n,i){y(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==_(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return S.each(arguments,function(e,t){for(var n;(n=S.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?S.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return S.Deferred(function(n){S.each(t,function(t,i){var r=y(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var o=0;function s(e,t,i,r){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(e<o)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?r?u.call(n,s(o,t,z,r),s(o,t,F,r)):(o++,u.call(n,s(o,t,z,r),s(o,t,F,r),s(o,t,z,t.notifyWith))):(i!==z&&(a=void 0,l=[n]),(r||t.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(n){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(i!==F&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?c():(S.Deferred.getStackHook&&(c.stackTrace=S.Deferred.getStackHook()),n.setTimeout(c))}}return S.Deferred(function(n){t[0][3].add(s(0,n,y(r)?r:z,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:z)),t[2][3].add(s(0,n,y(i)?i:F))}).promise()},promise:function(e){return null!=e?S.extend(e,r):r}},o={};return S.each(t,function(e,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=l.call(arguments),o=S.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(j(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||y(r[n]&&r[n].then)))return o.then();for(;n--;)j(r[n],s(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){n.setTimeout(function(){throw e})};var q=S.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),S.ready()}S.fn.ready=function(e){return q.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||q.resolveWith(s,[S]))}}),S.ready.then=q.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(S.ready):(s.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var $=function(e,t,n,i,r,o,s){var a=0,l=e.length,u=null==n;if("object"===_(n))for(a in r=!0,n)$(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,y(i)||(s=!0),u&&(s?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(S(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):o},V=/^-ms-/,G=/-([a-z])/g;function Z(e,t){return t.toUpperCase()}function X(e){return e.replace(V,"ms-").replace(G,Z)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=S.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[X(t)]=n;else for(i in t)r[X(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in i?[t]:t.match(H)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||S.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var Q=new Y,J=new Y,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=X(i.slice(5)),ne(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){J.set(this,e)}):$(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=J.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){J.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),S.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Q.get(e,t),n&&(!i||Array.isArray(n)?i=Q.access(e,t,S.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),i=n.length,r=n.shift(),o=S._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){S.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:S.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each(function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=S.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&S.contains(e.ownerDocument,e)&&"none"===S.css(e,"display")},ae=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};function le(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return S.css(e,t,"")},l=a(),u=n&&n[3]||(S.cssNumber[t]?"":"px"),c=(S.cssNumber[t]||"px"!==u&&+l)&&re.exec(S.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)S.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),c/=o;c*=2,S.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var ue={};function ce(e){var t,n=e.ownerDocument,i=e.nodeName,r=ue[i];return r||(t=n.body.appendChild(n.createElement(i)),r=S.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ue[i]=r,r)}function he(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Q.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=ce(i))):"none"!==n&&(r[o]="none",Q.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}S.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?S(this).show():S(this).hide()})}});var de=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?S.merge([e],n):n}function ve(e,t){for(var n=0,i=e.length;n<i;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var ye,we,xe=/<|&#?\w+;/;function Te(e,t,n,i,r){for(var o,s,a,l,u,c,h=t.createDocumentFragment(),d=[],p=0,f=e.length;p<f;p++)if((o=e[p])||0===o)if("object"===_(o))S.merge(d,o.nodeType?[o]:o);else if(xe.test(o)){for(s=s||h.appendChild(t.createElement("div")),a=(pe.exec(o)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,s.innerHTML=l[1]+S.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;S.merge(d,s.childNodes),(s=h.firstChild).textContent=""}else d.push(t.createTextNode(o));for(h.textContent="",p=0;o=d[p++];)if(i&&S.inArray(o,i)>-1)r&&r.push(o);else if(u=S.contains(o.ownerDocument,o),s=me(h.appendChild(o),"script"),u&&ve(s),n)for(c=0;o=s[c++];)fe.test(o.type||"")&&n.push(o);return h}ye=s.createDocumentFragment().appendChild(s.createElement("div")),(we=s.createElement("input")).setAttribute("type","radio"),we.setAttribute("checked","checked"),we.setAttribute("name","t"),ye.appendChild(we),v.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var _e=s.documentElement,Se=/^key/,be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Pe(){return!0}function Ce(){return!1}function Re(){try{return s.activeElement}catch(e){}}function ke(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)ke(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ce;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return S().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=S.guid++)),e.each(function(){S.event.add(this,t,r,i,n)})}S.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,u,c,h,d,p,f,g,m=Q.get(e);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&S.find.matchesSelector(_e,r),n.guid||(n.guid=S.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(H)||[""]).length;u--;)p=g=(a=Ee.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(h=S.event.special[p]||{},p=(r?h.delegateType:h.bindType)||p,h=S.event.special[p]||{},c=S.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&S.expr.match.needsContext.test(r),namespace:f.join(".")},o),(d=l[p])||((d=l[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(p,s)),h.add&&(h.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),S.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,u,c,h,d,p,f,g,m=Q.hasData(e)&&Q.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(H)||[""]).length;u--;)if(p=g=(a=Ee.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(h=S.event.special[p]||{},d=l[p=(i?h.delegateType:h.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,h.remove&&h.remove.call(e,c));s&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,f,m.handle)||S.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)S.event.remove(e,p+t[u],n,i,!0);S.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=S.event.fix(e),l=new Array(arguments.length),u=(Q.get(this,"events")||{})[a.type]||[],c=S.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=S.event.handlers.call(this,a,u),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((S.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?S(r,this).index(u)>-1:S.find(r,this,null,[u]).length),s[r]&&o.push(i);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Re()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Re()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&O(this,"input"))return this.click(),!1},_default:function(e){return O(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Pe:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Pe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Pe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Pe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Se.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&be.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},S.event.addProp),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||S.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),S.fn.extend({on:function(e,t,n,i){return ke(this,e,t,n,i)},one:function(e,t,n,i){return ke(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,S(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){S.event.remove(this,e,n,t)})}});var Oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,De=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Be(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,r,o,s,a,l,u;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),u=o.events))for(r in delete s.handle,s.events={},u)for(n=0,i=u[r].length;n<i;n++)S.event.add(t,r,u[r][n]);J.hasData(e)&&(a=J.access(e),l=S.extend({},a),J.set(t,l))}}function He(e,t,n,i){t=u.apply([],t);var r,o,s,a,l,c,h=0,d=e.length,p=d-1,f=t[0],g=y(f);if(g||d>1&&"string"==typeof f&&!v.checkClone&&Ie.test(f))return e.each(function(r){var o=e.eq(r);g&&(t[0]=f.call(this,r,o.html())),He(o,t,n,i)});if(d&&(o=(r=Te(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=S.map(me(r,"script"),Be)).length;h<d;h++)l=r,h!==p&&(l=S.clone(l,!0,!0),a&&S.merge(s,me(l,"script"))),n.call(e[h],l,h);if(a)for(c=s[s.length-1].ownerDocument,S.map(s,Me),h=0;h<a;h++)l=s[h],fe.test(l.type||"")&&!Q.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&S._evalUrl(l.src):T(l.textContent.replace(Ae,""),c,l))}return e}function ze(e,t,n){for(var i,r=t?S.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||S.cleanData(me(i)),i.parentNode&&(n&&S.contains(i.ownerDocument,i)&&ve(me(i,"script")),i.parentNode.removeChild(i));return e}S.extend({htmlPrefilter:function(e){return e.replace(Oe,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,l,u,c=e.cloneNode(!0),h=S.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(s=me(c),i=0,r=(o=me(e)).length;i<r;i++)a=o[i],l=s[i],void 0,"input"===(u=l.nodeName.toLowerCase())&&de.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||me(e),s=s||me(c),i=0,r=o.length;i<r;i++)Ne(o[i],s[i]);else Ne(e,c);return(s=me(c,"script")).length>0&&ve(s,!h&&me(e,"script")),c},cleanData:function(e){for(var t,n,i,r=S.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[Q.expando]){if(t.events)for(i in t.events)r[i]?S.event.remove(n,i):S.removeEvent(n,i,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),S.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return $(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!De.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){S.fn[e]=function(e){for(var n,i=[],r=S(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),S(r[s])[t](n),c.apply(i,n.get());return this.pushStack(i)}});var Fe=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),je=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(oe.join("|"),"i");function qe(e,t,n){var i,r,o,s,a=e.style;return(n=n||je(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||S.contains(e.ownerDocument,e)||(s=S.style(e,t)),!v.pixelBoxStyles()&&Fe.test(s)&&We.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",_e.appendChild(u).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),r=36===t(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",_e.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,l,u=s.createElement("div"),c=s.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o}}))}();var $e=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Ge={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","Moz","ms"],Ke=s.createElement("div").style;function Ye(e){var t=S.cssProps[e];return t||(t=S.cssProps[e]=function(e){if(e in Ke)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ke)return e}(e)||e),t}function Qe(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Je(e,t,n,i,r,o){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=S.css(e,n+oe[s],!0,r)),i?("content"===n&&(l-=S.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(l-=S.css(e,"border"+oe[s]+"Width",!0,r))):(l+=S.css(e,"padding"+oe[s],!0,r),"padding"!==n?l+=S.css(e,"border"+oe[s]+"Width",!0,r):a+=S.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function et(e,t,n){var i=je(e),r=qe(e,t,i),o="border-box"===S.css(e,"boxSizing",!1,i),s=o;if(Fe.test(r)){if(!n)return r;r="auto"}return s=s&&(v.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===S.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Je(e,t,n||(o?"border":"content"),s,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=X(t),l=Ve.test(t),u=e.style;if(l||(t=Ye(a)),s=S.cssHooks[t]||S.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:u[t];"string"===(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=le(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(S.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,o,s,a=X(t);return Ve.test(t)||(t=Ye(a)),(s=S.cssHooks[t]||S.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=qe(e,t,i)),"normal"===r&&t in Ze&&(r=Ze[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),S.each(["height","width"],function(e,t){S.cssHooks[t]={get:function(e,n,i){if(n)return!$e.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):ae(e,Ge,function(){return et(e,t,i)})},set:function(e,n,i){var r,o=je(e),s="border-box"===S.css(e,"boxSizing",!1,o),a=i&&Je(e,t,i,s,o);return s&&v.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Je(e,t,"border",!1,o)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),Qe(0,n,a)}}}),S.cssHooks.marginLeft=Ue(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),S.each({margin:"",padding:"",border:"Width"},function(e,t){S.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(S.cssHooks[e+t].set=Qe)}),S.fn.extend({css:function(e,t){return $(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=je(e),r=t.length;s<r;s++)o[t[s]]=S.css(e,t[s],!1,i);return o}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,arguments.length>1)}}),S.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[S.cssProps[e.prop]]&&!S.cssHooks[e.prop]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=tt.prototype.init,S.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){it&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,S.fx.interval),S.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function lt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ut(e,t,n){for(var i,r=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function ct(e,t,n){var i,r,o=0,s=ct.prefilters.length,a=S.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=nt||at(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(i);return a.notifyWith(e,[u,i,n]),i<1&&s?n:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var i=S.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=X(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=S.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<s;o++)if(i=ct.prefilters[o].call(u,e,c,u.opts))return y(i.stop)&&(S._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return S.map(c,ut,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),S.fx.timer(S.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}S.Animation=S.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(H);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,u,c,h="width"in t||"height"in t,d=this,p={},f=e.style,g=e.nodeType&&se(e),m=Q.get(e,"fxshow");for(i in n.queue||(null==(s=S._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,S.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||S.style(e,i)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(p))for(i in h&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=Q.get(e,"display")),"none"===(c=S.css(e,"display"))&&(u?c=u:(he([e],!0),u=e.style.display||u,c=S.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===S.css(e,"float")&&(l||(d.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=Q.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&he([e],!0),d.done(function(){for(i in g||he([e]),Q.remove(e,"fxshow"),p)S.style(e,i,p[i])})),l=ut(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),S.speed=function(e,t,n){var i=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return S.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in S.fx.speeds?i.duration=S.fx.speeds[i.duration]:i.duration=S.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&S.dequeue(this,i.queue)},i},S.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=S.isEmptyObject(e),o=S.speed(t,n,i),s=function(){var t=ct(this,S.extend({},e),o);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=S.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ot.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||S.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=S.timers,s=i?i.length:0;for(n.finish=!0,S.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),S.each(["toggle","show","hide"],function(e,t){var n=S.fn[t];S.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,i,r)}}),S.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){S.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),nt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){it||(it=!0,st())},S.fx.stop=function(){it=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ht,dt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return $(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?S.prop(e,t,n):(1===o&&S.isXMLDoc(e)||(r=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=S.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(H);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||S.find.attr;dt[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=dt[s],dt[s]=r,r=null!=n(e,t,i)?s:null,dt[s]=o),r}});var pt=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function gt(e){return(e.match(H)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}S.fn.extend({prop:function(e,t){return $(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(e)||(t=S.propFix[t]||t,r=S.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){S(this).addClass(e.call(this,t,mt(this)))});if((t=vt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=gt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){S(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=gt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){S(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,r,o,s;if(i)for(r=0,o=S(this),s=vt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+gt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;S.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,S(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=S.map(r,function(e){return null==e?"":e+""})),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=S.valHooks[r.type]||S.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:gt(S.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=S(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=S.makeArray(t),s=r.length;s--;)((i=r[s]).selected=S.inArray(S.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var wt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,i,r){var o,a,l,u,c,h,d,p,g=[i||s],m=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=p=l=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+S.event.triggered)&&(m.indexOf(".")>-1&&(m=(v=m.split(".")).shift(),v.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[S.expando]?e:new S.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:S.makeArray(t,[e]),d=S.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!w(i)){for(u=d.delegateType||m,wt.test(u+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(i.ownerDocument||s)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(a=g[o++])&&!e.isPropagationStopped();)p=a,e.type=o>1?u:d.bindType||m,(h=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&h.apply(a,t),(h=c&&a[c])&&h.apply&&K(a)&&(e.result=h.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(g.pop(),t)||!K(i)||c&&y(i[m])&&!w(i)&&((l=i[c])&&(i[c]=null),S.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,xt),i[m](),e.isPropagationStopped()&&p.removeEventListener(m,xt),S.event.triggered=void 0,l&&(i[c]=l)),e.result}},simulate:function(e,t,n){var i=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(i,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),v.focusin||S.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){S.event.simulate(t,e.target,S.event.fix(e))};S.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Q.access(i,t);r||i.addEventListener(e,n,!0),Q.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Q.access(i,t)-1;r?Q.access(i,t,r):(i.removeEventListener(e,n,!0),Q.remove(i,t))}}});var Tt=n.location,_t=Date.now(),St=/\?/;S.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||S.error("Invalid XML: "+e),t};var bt=/\[\]$/,Et=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Rt(e,t,n,i){var r;if(Array.isArray(t))S.each(t,function(t,r){n||bt.test(e)?i(e,r):Rt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==_(t))i(e,t);else for(r in t)Rt(e+"["+r+"]",t[r],n,i)}S.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){r(this.name,this.value)});else for(n in e)Rt(n,e[n],t,r);return i.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Ct.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:n.replace(Et,"\r\n")}}).get()}});var kt=/%20/g,Ot=/#.*$/,Dt=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,At=/^(?:GET|HEAD)$/,Lt=/^\/\//,Bt={},Mt={},Nt="*/".concat("*"),Ht=s.createElement("a");function zt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(H)||[];if(y(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ft(e,t,n,i){var r={},o=e===Mt;function s(a){var l;return r[a]=!0,S.each(e[a]||[],function(e,a){var u=a(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)}),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function jt(e,t){var n,i,r=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&S.extend(!0,e,i),e}Ht.href=Tt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Nt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?jt(jt(e,S.ajaxSettings),t):jt(S.ajaxSettings,e)},ajaxPrefilter:zt(Bt),ajaxTransport:zt(Mt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,l,u,c,h,d,p,f=S.ajaxSetup({},t),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?S(g):S.event,v=S.Deferred(),y=S.Callbacks("once memory"),w=f.statusCode||{},x={},T={},_="canceled",b={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=It.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)b.always(e[b.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||_;return i&&i.abort(t),E(0,t),this}};if(v.promise(b),f.url=((e||f.url||Tt.href)+"").replace(Lt,Tt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(H)||[""],null==f.crossDomain){u=s.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Ht.protocol+"//"+Ht.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=S.param(f.data,f.traditional)),Ft(Bt,f,t,b),c)return b;for(d in(h=S.event&&f.global)&&0==S.active++&&S.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!At.test(f.type),r=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(kt,"+")):(p=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(St.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Dt,"$1"),p=(St.test(r)?"&":"?")+"_="+_t+++p),f.url=r+p),f.ifModified&&(S.lastModified[r]&&b.setRequestHeader("If-Modified-Since",S.lastModified[r]),S.etag[r]&&b.setRequestHeader("If-None-Match",S.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&b.setRequestHeader("Content-Type",f.contentType),b.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Nt+"; q=0.01":""):f.accepts["*"]),f.headers)b.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(g,b,f)||c))return b.abort();if(_="abort",y.add(f.complete),b.done(f.success),b.fail(f.error),i=Ft(Mt,f,t,b)){if(b.readyState=1,h&&m.trigger("ajaxSend",[b,f]),c)return b;f.async&&f.timeout>0&&(l=n.setTimeout(function(){b.abort("timeout")},f.timeout));try{c=!1,i.send(x,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,s,a){var u,d,p,x,T,_=t;c||(c=!0,l&&n.clearTimeout(l),i=void 0,o=a||"",b.readyState=e>0?4:0,u=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(f,b,s)),x=function(e,t,n,i){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(f,x,b,u),u?(f.ifModified&&((T=b.getResponseHeader("Last-Modified"))&&(S.lastModified[r]=T),(T=b.getResponseHeader("etag"))&&(S.etag[r]=T)),204===e||"HEAD"===f.type?_="nocontent":304===e?_="notmodified":(_=x.state,d=x.data,u=!(p=x.error))):(p=_,!e&&_||(_="error",e<0&&(e=0))),b.status=e,b.statusText=(t||_)+"",u?v.resolveWith(g,[d,_,b]):v.rejectWith(g,[b,_,p]),b.statusCode(w),w=void 0,h&&m.trigger(u?"ajaxSuccess":"ajaxError",[b,f,u?d:p]),y.fireWith(g,[b,_]),h&&(m.trigger("ajaxComplete",[b,f]),--S.active||S.event.trigger("ajaxStop")))}return b},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],function(e,t){S[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:r,data:n,success:i},S.isPlainObject(e)&&e))}}),S._evalUrl=function(e){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){S(this).wrapInner(e.call(this,t))}):this.each(function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){S(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},qt=S.ajaxSettings.xhr();v.cors=!!qt&&"withCredentials"in qt,v.ajax=qt=!!qt,S.ajaxTransport(function(e){var t,i;if(v.cors||qt&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),S.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=S("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ut,$t=[],Vt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||S.expando+"_"+_t++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",function(e,t,i){var r,o,s,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||S.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?S(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,$t.push(r)),s&&y(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=D.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=Te([e],t,o),o&&o.length&&S(o).remove(),S.merge([],r.childNodes)));var i,r,o},S.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=gt(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&S.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?S("<div>").append(S.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.expr.pseudos.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,u=S.css(e,"position"),c=S(e),h={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=S.css(e,"top"),l=S.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(s=(i=c.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,S.extend({},a))),null!=t.top&&(h.top=t.top-a.top+s),null!=t.left&&(h.left=t.left-a.left+r),"using"in t?t.using.call(e,h):c.css(h)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===S.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),r.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-S.css(i,"marginTop",!0),left:t.left-r.left-S.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||_e})}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;S.fn[e]=function(i){return $(this,function(e,i,r){var o;if(w(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),S.each(["top","left"],function(e,t){S.cssHooks[t]=Ue(v.pixelPosition,function(e,n){if(n)return n=qe(e,t),Fe.test(n)?S(e).position()[t]+"px":n})}),S.each({Height:"height",Width:"width"},function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){S.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return $(this,function(t,n,r){var o;return w(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?S.css(t,n,a):S.style(t,n,r,a)},t,s?r:void 0,s)}})}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),S.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),S.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=l.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(l.call(arguments)))}).guid=e.guid=e.guid||S.guid++,r},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=O,S.isFunction=y,S.isWindow=w,S.camelCase=X,S.type=_,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return S}.apply(t,[]))||(e.exports=i);var Gt=n.jQuery,Zt=n.$;return S.noConflict=function(e){return n.$===S&&(n.$=Zt),e&&n.jQuery===S&&(n.jQuery=Gt),S},r||(n.jQuery=n.$=S),S})},function(e,t,n){(function(e,i){var r;(function(){var o,s=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",u="__lodash_hash_undefined__",c=500,h="__lodash_placeholder__",d=1,p=2,f=4,g=1,m=2,v=1,y=2,w=4,x=8,T=16,_=32,S=64,b=128,E=256,P=512,C=30,R="...",k=800,O=16,D=1,I=2,A=1/0,L=9007199254740991,B=1.7976931348623157e308,M=NaN,N=4294967295,H=N-1,z=N>>>1,F=[["ary",b],["bind",v],["bindKey",y],["curry",x],["curryRight",T],["flip",P],["partial",_],["partialRight",S],["rearg",E]],j="[object Arguments]",W="[object Array]",q="[object AsyncFunction]",U="[object Boolean]",$="[object Date]",V="[object DOMException]",G="[object Error]",Z="[object Function]",X="[object GeneratorFunction]",K="[object Map]",Y="[object Number]",Q="[object Null]",J="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",ie="[object String]",re="[object Symbol]",oe="[object Undefined]",se="[object WeakMap]",ae="[object WeakSet]",le="[object ArrayBuffer]",ue="[object DataView]",ce="[object Float32Array]",he="[object Float64Array]",de="[object Int8Array]",pe="[object Int16Array]",fe="[object Int32Array]",ge="[object Uint8Array]",me="[object Uint8ClampedArray]",ve="[object Uint16Array]",ye="[object Uint32Array]",we=/\b__p \+= '';/g,xe=/\b(__p \+=) '' \+/g,Te=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_e=/&(?:amp|lt|gt|quot|#39);/g,Se=/[&<>"']/g,be=RegExp(_e.source),Ee=RegExp(Se.source),Pe=/<%-([\s\S]+?)%>/g,Ce=/<%([\s\S]+?)%>/g,Re=/<%=([\s\S]+?)%>/g,ke=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Oe=/^\w*$/,De=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ie=/[\\^$.*+?()[\]{}|]/g,Ae=RegExp(Ie.source),Le=/^\s+|\s+$/g,Be=/^\s+/,Me=/\s+$/,Ne=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,He=/\{\n\/\* \[wrapped with (.+)\] \*/,ze=/,? & /,Fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,je=/\\(\\)?/g,We=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,qe=/\w*$/,Ue=/^[-+]0x[0-9a-f]+$/i,$e=/^0b[01]+$/i,Ve=/^\[object .+?Constructor\]$/,Ge=/^0o[0-7]+$/i,Ze=/^(?:0|[1-9]\d*)$/,Xe=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ke=/($^)/,Ye=/['\n\r\u2028\u2029\\]/g,Qe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Je+"]",nt="["+Qe+"]",it="\\d+",rt="[\\u2700-\\u27bf]",ot="[a-z\\xdf-\\xf6\\xf8-\\xff]",st="[^\\ud800-\\udfff"+Je+it+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",at="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",ut="(?:\\ud83c[\\udde6-\\uddff]){2}",ct="[\\ud800-\\udbff][\\udc00-\\udfff]",ht="[A-Z\\xc0-\\xd6\\xd8-\\xde]",dt="(?:"+ot+"|"+st+")",pt="(?:"+ht+"|"+st+")",ft="(?:"+nt+"|"+at+")"+"?",gt="[\\ufe0e\\ufe0f]?"+ft+("(?:\\u200d(?:"+[lt,ut,ct].join("|")+")[\\ufe0e\\ufe0f]?"+ft+")*"),mt="(?:"+[rt,ut,ct].join("|")+")"+gt,vt="(?:"+[lt+nt+"?",nt,ut,ct,et].join("|")+")",yt=RegExp("['’]","g"),wt=RegExp(nt,"g"),xt=RegExp(at+"(?="+at+")|"+vt+gt,"g"),Tt=RegExp([ht+"?"+ot+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ht,"$"].join("|")+")",pt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ht+dt,"$"].join("|")+")",ht+"?"+dt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ht+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",it,mt].join("|"),"g"),_t=RegExp("[\\u200d\\ud800-\\udfff"+Qe+"\\ufe0e\\ufe0f]"),St=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,bt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Et=-1,Pt={};Pt[ce]=Pt[he]=Pt[de]=Pt[pe]=Pt[fe]=Pt[ge]=Pt[me]=Pt[ve]=Pt[ye]=!0,Pt[j]=Pt[W]=Pt[le]=Pt[U]=Pt[ue]=Pt[$]=Pt[G]=Pt[Z]=Pt[K]=Pt[Y]=Pt[J]=Pt[te]=Pt[ne]=Pt[ie]=Pt[se]=!1;var Ct={};Ct[j]=Ct[W]=Ct[le]=Ct[ue]=Ct[U]=Ct[$]=Ct[ce]=Ct[he]=Ct[de]=Ct[pe]=Ct[fe]=Ct[K]=Ct[Y]=Ct[J]=Ct[te]=Ct[ne]=Ct[ie]=Ct[re]=Ct[ge]=Ct[me]=Ct[ve]=Ct[ye]=!0,Ct[G]=Ct[Z]=Ct[se]=!1;var Rt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},kt=parseFloat,Ot=parseInt,Dt="object"==typeof e&&e&&e.Object===Object&&e,It="object"==typeof self&&self&&self.Object===Object&&self,At=Dt||It||Function("return this")(),Lt="object"==typeof t&&t&&!t.nodeType&&t,Bt=Lt&&"object"==typeof i&&i&&!i.nodeType&&i,Mt=Bt&&Bt.exports===Lt,Nt=Mt&&Dt.process,Ht=function(){try{return Nt&&Nt.binding&&Nt.binding("util")}catch(e){}}(),zt=Ht&&Ht.isArrayBuffer,Ft=Ht&&Ht.isDate,jt=Ht&&Ht.isMap,Wt=Ht&&Ht.isRegExp,qt=Ht&&Ht.isSet,Ut=Ht&&Ht.isTypedArray;function $t(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Vt(e,t,n,i){for(var r=-1,o=null==e?0:e.length;++r<o;){var s=e[r];t(i,s,n(s),e)}return i}function Gt(e,t){for(var n=-1,i=null==e?0:e.length;++n<i&&!1!==t(e[n],n,e););return e}function Zt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Xt(e,t){for(var n=-1,i=null==e?0:e.length;++n<i;)if(!t(e[n],n,e))return!1;return!0}function Kt(e,t){for(var n=-1,i=null==e?0:e.length,r=0,o=[];++n<i;){var s=e[n];t(s,n,e)&&(o[r++]=s)}return o}function Yt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function Qt(e,t,n){for(var i=-1,r=null==e?0:e.length;++i<r;)if(n(t,e[i]))return!0;return!1}function Jt(e,t){for(var n=-1,i=null==e?0:e.length,r=Array(i);++n<i;)r[n]=t(e[n],n,e);return r}function en(e,t){for(var n=-1,i=t.length,r=e.length;++n<i;)e[r+n]=t[n];return e}function tn(e,t,n,i){var r=-1,o=null==e?0:e.length;for(i&&o&&(n=e[++r]);++r<o;)n=t(n,e[r],r,e);return n}function nn(e,t,n,i){var r=null==e?0:e.length;for(i&&r&&(n=e[--r]);r--;)n=t(n,e[r],r,e);return n}function rn(e,t){for(var n=-1,i=null==e?0:e.length;++n<i;)if(t(e[n],n,e))return!0;return!1}var on=dn("length");function sn(e,t,n){var i;return n(e,function(e,n,r){if(t(e,n,r))return i=n,!1}),i}function an(e,t,n,i){for(var r=e.length,o=n+(i?1:-1);i?o--:++o<r;)if(t(e[o],o,e))return o;return-1}function ln(e,t,n){return t==t?function(e,t,n){var i=n-1,r=e.length;for(;++i<r;)if(e[i]===t)return i;return-1}(e,t,n):an(e,cn,n)}function un(e,t,n,i){for(var r=n-1,o=e.length;++r<o;)if(i(e[r],t))return r;return-1}function cn(e){return e!=e}function hn(e,t){var n=null==e?0:e.length;return n?gn(e,t)/n:M}function dn(e){return function(t){return null==t?o:t[e]}}function pn(e){return function(t){return null==e?o:e[t]}}function fn(e,t,n,i,r){return r(e,function(e,r,o){n=i?(i=!1,e):t(n,e,r,o)}),n}function gn(e,t){for(var n,i=-1,r=e.length;++i<r;){var s=t(e[i]);s!==o&&(n=n===o?s:n+s)}return n}function mn(e,t){for(var n=-1,i=Array(e);++n<e;)i[n]=t(n);return i}function vn(e){return function(t){return e(t)}}function yn(e,t){return Jt(t,function(t){return e[t]})}function wn(e,t){return e.has(t)}function xn(e,t){for(var n=-1,i=e.length;++n<i&&ln(t,e[n],0)>-1;);return n}function Tn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var _n=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Sn=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function bn(e){return"\\"+Rt[e]}function En(e){return _t.test(e)}function Pn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,i){n[++t]=[i,e]}),n}function Cn(e,t){return function(n){return e(t(n))}}function Rn(e,t){for(var n=-1,i=e.length,r=0,o=[];++n<i;){var s=e[n];s!==t&&s!==h||(e[n]=h,o[r++]=n)}return o}function kn(e,t){return"__proto__"==t?o:e[t]}function On(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Dn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function In(e){return En(e)?function(e){var t=xt.lastIndex=0;for(;xt.test(e);)++t;return t}(e):on(e)}function An(e){return En(e)?function(e){return e.match(xt)||[]}(e):function(e){return e.split("")}(e)}var Ln=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Bn=function e(t){var n,i=(t=null==t?At:Bn.defaults(At.Object(),t,Bn.pick(At,bt))).Array,r=t.Date,Qe=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,it=t.String,rt=t.TypeError,ot=i.prototype,st=Je.prototype,at=tt.prototype,lt=t["__core-js_shared__"],ut=st.toString,ct=at.hasOwnProperty,ht=0,dt=(n=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",pt=at.toString,ft=ut.call(tt),gt=At._,mt=nt("^"+ut.call(ct).replace(Ie,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vt=Mt?t.Buffer:o,xt=t.Symbol,_t=t.Uint8Array,Rt=vt?vt.allocUnsafe:o,Dt=Cn(tt.getPrototypeOf,tt),It=tt.create,Lt=at.propertyIsEnumerable,Bt=ot.splice,Nt=xt?xt.isConcatSpreadable:o,Ht=xt?xt.iterator:o,on=xt?xt.toStringTag:o,pn=function(){try{var e=Fo(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Mn=t.clearTimeout!==At.clearTimeout&&t.clearTimeout,Nn=r&&r.now!==At.Date.now&&r.now,Hn=t.setTimeout!==At.setTimeout&&t.setTimeout,zn=et.ceil,Fn=et.floor,jn=tt.getOwnPropertySymbols,Wn=vt?vt.isBuffer:o,qn=t.isFinite,Un=ot.join,$n=Cn(tt.keys,tt),Vn=et.max,Gn=et.min,Zn=r.now,Xn=t.parseInt,Kn=et.random,Yn=ot.reverse,Qn=Fo(t,"DataView"),Jn=Fo(t,"Map"),ei=Fo(t,"Promise"),ti=Fo(t,"Set"),ni=Fo(t,"WeakMap"),ii=Fo(tt,"create"),ri=ni&&new ni,oi={},si=hs(Qn),ai=hs(Jn),li=hs(ei),ui=hs(ti),ci=hs(ni),hi=xt?xt.prototype:o,di=hi?hi.valueOf:o,pi=hi?hi.toString:o;function fi(e){if(Ra(e)&&!va(e)&&!(e instanceof yi)){if(e instanceof vi)return e;if(ct.call(e,"__wrapped__"))return ds(e)}return new vi(e)}var gi=function(){function e(){}return function(t){if(!Ca(t))return{};if(It)return It(t);e.prototype=t;var n=new e;return e.prototype=o,n}}();function mi(){}function vi(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=o}function yi(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=N,this.__views__=[]}function wi(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function xi(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function Ti(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function _i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ti;++t<n;)this.add(e[t])}function Si(e){var t=this.__data__=new xi(e);this.size=t.size}function bi(e,t){var n=va(e),i=!n&&ma(e),r=!n&&!i&&Ta(e),o=!n&&!i&&!r&&Ma(e),s=n||i||r||o,a=s?mn(e.length,it):[],l=a.length;for(var u in e)!t&&!ct.call(e,u)||s&&("length"==u||r&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||Go(u,l))||a.push(u);return a}function Ei(e){var t=e.length;return t?e[_r(0,t-1)]:o}function Pi(e,t){return ls(io(e),Bi(t,0,e.length))}function Ci(e){return ls(io(e))}function Ri(e,t,n){(n===o||pa(e[t],n))&&(n!==o||t in e)||Ai(e,t,n)}function ki(e,t,n){var i=e[t];ct.call(e,t)&&pa(i,n)&&(n!==o||t in e)||Ai(e,t,n)}function Oi(e,t){for(var n=e.length;n--;)if(pa(e[n][0],t))return n;return-1}function Di(e,t,n,i){return Fi(e,function(e,r,o){t(i,e,n(e),o)}),i}function Ii(e,t){return e&&ro(t,rl(t),e)}function Ai(e,t,n){"__proto__"==t&&pn?pn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Li(e,t){for(var n=-1,r=t.length,s=i(r),a=null==e;++n<r;)s[n]=a?o:Ja(e,t[n]);return s}function Bi(e,t,n){return e==e&&(n!==o&&(e=e<=n?e:n),t!==o&&(e=e>=t?e:t)),e}function Mi(e,t,n,i,r,s){var a,l=t&d,u=t&p,c=t&f;if(n&&(a=r?n(e,i,r,s):n(e)),a!==o)return a;if(!Ca(e))return e;var h=va(e);if(h){if(a=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&ct.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(e),!l)return io(e,a)}else{var g=qo(e),m=g==Z||g==X;if(Ta(e))return Yr(e,l);if(g==J||g==j||m&&!r){if(a=u||m?{}:$o(e),!l)return u?function(e,t){return ro(e,Wo(e),t)}(e,function(e,t){return e&&ro(t,ol(t),e)}(a,e)):function(e,t){return ro(e,jo(e),t)}(e,Ii(a,e))}else{if(!Ct[g])return r?e:{};a=function(e,t,n){var i,r,o,s=e.constructor;switch(t){case le:return Qr(e);case U:case $:return new s(+e);case ue:return function(e,t){var n=t?Qr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case ce:case he:case de:case pe:case fe:case ge:case me:case ve:case ye:return Jr(e,n);case K:return new s;case Y:case ie:return new s(e);case te:return(o=new(r=e).constructor(r.source,qe.exec(r))).lastIndex=r.lastIndex,o;case ne:return new s;case re:return i=e,di?tt(di.call(i)):{}}}(e,g,l)}}s||(s=new Si);var v=s.get(e);if(v)return v;if(s.set(e,a),Aa(e))return e.forEach(function(i){a.add(Mi(i,t,n,i,e,s))}),a;if(ka(e))return e.forEach(function(i,r){a.set(r,Mi(i,t,n,r,e,s))}),a;var y=h?o:(c?u?Ao:Io:u?ol:rl)(e);return Gt(y||e,function(i,r){y&&(i=e[r=i]),ki(a,r,Mi(i,t,n,r,e,s))}),a}function Ni(e,t,n){var i=n.length;if(null==e)return!i;for(e=tt(e);i--;){var r=n[i],s=t[r],a=e[r];if(a===o&&!(r in e)||!s(a))return!1}return!0}function Hi(e,t,n){if("function"!=typeof e)throw new rt(l);return rs(function(){e.apply(o,n)},t)}function zi(e,t,n,i){var r=-1,o=Yt,a=!0,l=e.length,u=[],c=t.length;if(!l)return u;n&&(t=Jt(t,vn(n))),i?(o=Qt,a=!1):t.length>=s&&(o=wn,a=!1,t=new _i(t));e:for(;++r<l;){var h=e[r],d=null==n?h:n(h);if(h=i||0!==h?h:0,a&&d==d){for(var p=c;p--;)if(t[p]===d)continue e;u.push(h)}else o(t,d,i)||u.push(h)}return u}fi.templateSettings={escape:Pe,evaluate:Ce,interpolate:Re,variable:"",imports:{_:fi}},fi.prototype=mi.prototype,fi.prototype.constructor=fi,vi.prototype=gi(mi.prototype),vi.prototype.constructor=vi,yi.prototype=gi(mi.prototype),yi.prototype.constructor=yi,wi.prototype.clear=function(){this.__data__=ii?ii(null):{},this.size=0},wi.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},wi.prototype.get=function(e){var t=this.__data__;if(ii){var n=t[e];return n===u?o:n}return ct.call(t,e)?t[e]:o},wi.prototype.has=function(e){var t=this.__data__;return ii?t[e]!==o:ct.call(t,e)},wi.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ii&&t===o?u:t,this},xi.prototype.clear=function(){this.__data__=[],this.size=0},xi.prototype.delete=function(e){var t=this.__data__,n=Oi(t,e);return!(n<0||(n==t.length-1?t.pop():Bt.call(t,n,1),--this.size,0))},xi.prototype.get=function(e){var t=this.__data__,n=Oi(t,e);return n<0?o:t[n][1]},xi.prototype.has=function(e){return Oi(this.__data__,e)>-1},xi.prototype.set=function(e,t){var n=this.__data__,i=Oi(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this},Ti.prototype.clear=function(){this.size=0,this.__data__={hash:new wi,map:new(Jn||xi),string:new wi}},Ti.prototype.delete=function(e){var t=Ho(this,e).delete(e);return this.size-=t?1:0,t},Ti.prototype.get=function(e){return Ho(this,e).get(e)},Ti.prototype.has=function(e){return Ho(this,e).has(e)},Ti.prototype.set=function(e,t){var n=Ho(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this},_i.prototype.add=_i.prototype.push=function(e){return this.__data__.set(e,u),this},_i.prototype.has=function(e){return this.__data__.has(e)},Si.prototype.clear=function(){this.__data__=new xi,this.size=0},Si.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Si.prototype.get=function(e){return this.__data__.get(e)},Si.prototype.has=function(e){return this.__data__.has(e)},Si.prototype.set=function(e,t){var n=this.__data__;if(n instanceof xi){var i=n.__data__;if(!Jn||i.length<s-1)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ti(i)}return n.set(e,t),this.size=n.size,this};var Fi=ao(Zi),ji=ao(Xi,!0);function Wi(e,t){var n=!0;return Fi(e,function(e,i,r){return n=!!t(e,i,r)}),n}function qi(e,t,n){for(var i=-1,r=e.length;++i<r;){var s=e[i],a=t(s);if(null!=a&&(l===o?a==a&&!Ba(a):n(a,l)))var l=a,u=s}return u}function Ui(e,t){var n=[];return Fi(e,function(e,i,r){t(e,i,r)&&n.push(e)}),n}function $i(e,t,n,i,r){var o=-1,s=e.length;for(n||(n=Vo),r||(r=[]);++o<s;){var a=e[o];t>0&&n(a)?t>1?$i(a,t-1,n,i,r):en(r,a):i||(r[r.length]=a)}return r}var Vi=lo(),Gi=lo(!0);function Zi(e,t){return e&&Vi(e,t,rl)}function Xi(e,t){return e&&Gi(e,t,rl)}function Ki(e,t){return Kt(t,function(t){return ba(e[t])})}function Yi(e,t){for(var n=0,i=(t=Gr(t,e)).length;null!=e&&n<i;)e=e[cs(t[n++])];return n&&n==i?e:o}function Qi(e,t,n){var i=t(e);return va(e)?i:en(i,n(e))}function Ji(e){return null==e?e===o?oe:Q:on&&on in tt(e)?function(e){var t=ct.call(e,on),n=e[on];try{e[on]=o;var i=!0}catch(e){}var r=pt.call(e);return i&&(t?e[on]=n:delete e[on]),r}(e):function(e){return pt.call(e)}(e)}function er(e,t){return e>t}function tr(e,t){return null!=e&&ct.call(e,t)}function nr(e,t){return null!=e&&t in tt(e)}function ir(e,t,n){for(var r=n?Qt:Yt,s=e[0].length,a=e.length,l=a,u=i(a),c=1/0,h=[];l--;){var d=e[l];l&&t&&(d=Jt(d,vn(t))),c=Gn(d.length,c),u[l]=!n&&(t||s>=120&&d.length>=120)?new _i(l&&d):o}d=e[0];var p=-1,f=u[0];e:for(;++p<s&&h.length<c;){var g=d[p],m=t?t(g):g;if(g=n||0!==g?g:0,!(f?wn(f,m):r(h,m,n))){for(l=a;--l;){var v=u[l];if(!(v?wn(v,m):r(e[l],m,n)))continue e}f&&f.push(m),h.push(g)}}return h}function rr(e,t,n){var i=null==(e=ns(e,t=Gr(t,e)))?e:e[cs(Ss(t))];return null==i?o:$t(i,e,n)}function or(e){return Ra(e)&&Ji(e)==j}function sr(e,t,n,i,r){return e===t||(null==e||null==t||!Ra(e)&&!Ra(t)?e!=e&&t!=t:function(e,t,n,i,r,s){var a=va(e),l=va(t),u=a?W:qo(e),c=l?W:qo(t),h=(u=u==j?J:u)==J,d=(c=c==j?J:c)==J,p=u==c;if(p&&Ta(e)){if(!Ta(t))return!1;a=!0,h=!1}if(p&&!h)return s||(s=new Si),a||Ma(e)?Oo(e,t,n,i,r,s):function(e,t,n,i,r,o,s){switch(n){case ue:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!o(new _t(e),new _t(t)));case U:case $:case Y:return pa(+e,+t);case G:return e.name==t.name&&e.message==t.message;case te:case ie:return e==t+"";case K:var a=Pn;case ne:var l=i&g;if(a||(a=On),e.size!=t.size&&!l)return!1;var u=s.get(e);if(u)return u==t;i|=m,s.set(e,t);var c=Oo(a(e),a(t),i,r,o,s);return s.delete(e),c;case re:if(di)return di.call(e)==di.call(t)}return!1}(e,t,u,n,i,r,s);if(!(n&g)){var f=h&&ct.call(e,"__wrapped__"),v=d&&ct.call(t,"__wrapped__");if(f||v){var y=f?e.value():e,w=v?t.value():t;return s||(s=new Si),r(y,w,n,i,s)}}return!!p&&(s||(s=new Si),function(e,t,n,i,r,s){var a=n&g,l=Io(e),u=l.length,c=Io(t).length;if(u!=c&&!a)return!1;for(var h=u;h--;){var d=l[h];if(!(a?d in t:ct.call(t,d)))return!1}var p=s.get(e);if(p&&s.get(t))return p==t;var f=!0;s.set(e,t),s.set(t,e);for(var m=a;++h<u;){d=l[h];var v=e[d],y=t[d];if(i)var w=a?i(y,v,d,t,e,s):i(v,y,d,e,t,s);if(!(w===o?v===y||r(v,y,n,i,s):w)){f=!1;break}m||(m="constructor"==d)}if(f&&!m){var x=e.constructor,T=t.constructor;x!=T&&"constructor"in e&&"constructor"in t&&!("function"==typeof x&&x instanceof x&&"function"==typeof T&&T instanceof T)&&(f=!1)}return s.delete(e),s.delete(t),f}(e,t,n,i,r,s))}(e,t,n,i,sr,r))}function ar(e,t,n,i){var r=n.length,s=r,a=!i;if(null==e)return!s;for(e=tt(e);r--;){var l=n[r];if(a&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++r<s;){var u=(l=n[r])[0],c=e[u],h=l[1];if(a&&l[2]){if(c===o&&!(u in e))return!1}else{var d=new Si;if(i)var p=i(c,h,u,e,t,d);if(!(p===o?sr(h,c,g|m,i,d):p))return!1}}return!0}function lr(e){return!(!Ca(e)||dt&&dt in e)&&(ba(e)?mt:Ve).test(hs(e))}function ur(e){return"function"==typeof e?e:null==e?Ol:"object"==typeof e?va(e)?gr(e[0],e[1]):fr(e):zl(e)}function cr(e){if(!Qo(e))return $n(e);var t=[];for(var n in tt(e))ct.call(e,n)&&"constructor"!=n&&t.push(n);return t}function hr(e){if(!Ca(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Qo(e),n=[];for(var i in e)("constructor"!=i||!t&&ct.call(e,i))&&n.push(i);return n}function dr(e,t){return e<t}function pr(e,t){var n=-1,r=wa(e)?i(e.length):[];return Fi(e,function(e,i,o){r[++n]=t(e,i,o)}),r}function fr(e){var t=zo(e);return 1==t.length&&t[0][2]?es(t[0][0],t[0][1]):function(n){return n===e||ar(n,e,t)}}function gr(e,t){return Xo(e)&&Jo(t)?es(cs(e),t):function(n){var i=Ja(n,e);return i===o&&i===t?el(n,e):sr(t,i,g|m)}}function mr(e,t,n,i,r){e!==t&&Vi(t,function(s,a){if(Ca(s))r||(r=new Si),function(e,t,n,i,r,s,a){var l=kn(e,n),u=kn(t,n),c=a.get(u);if(c)Ri(e,n,c);else{var h=s?s(l,u,n+"",e,t,a):o,d=h===o;if(d){var p=va(u),f=!p&&Ta(u),g=!p&&!f&&Ma(u);h=u,p||f||g?va(l)?h=l:xa(l)?h=io(l):f?(d=!1,h=Yr(u,!0)):g?(d=!1,h=Jr(u,!0)):h=[]:Da(u)||ma(u)?(h=l,ma(l)?h=Ua(l):(!Ca(l)||i&&ba(l))&&(h=$o(u))):d=!1}d&&(a.set(u,h),r(h,u,i,s,a),a.delete(u)),Ri(e,n,h)}}(e,t,a,n,mr,i,r);else{var l=i?i(kn(e,a),s,a+"",e,t,r):o;l===o&&(l=s),Ri(e,a,l)}},ol)}function vr(e,t){var n=e.length;if(n)return Go(t+=t<0?n:0,n)?e[t]:o}function yr(e,t,n){var i=-1;return t=Jt(t.length?t:[Ol],vn(No())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(pr(e,function(e,n,r){return{criteria:Jt(t,function(t){return t(e)}),index:++i,value:e}}),function(e,t){return function(e,t,n){for(var i=-1,r=e.criteria,o=t.criteria,s=r.length,a=n.length;++i<s;){var l=eo(r[i],o[i]);if(l){if(i>=a)return l;var u=n[i];return l*("desc"==u?-1:1)}}return e.index-t.index}(e,t,n)})}function wr(e,t,n){for(var i=-1,r=t.length,o={};++i<r;){var s=t[i],a=Yi(e,s);n(a,s)&&Cr(o,Gr(s,e),a)}return o}function xr(e,t,n,i){var r=i?un:ln,o=-1,s=t.length,a=e;for(e===t&&(t=io(t)),n&&(a=Jt(e,vn(n)));++o<s;)for(var l=0,u=t[o],c=n?n(u):u;(l=r(a,c,l,i))>-1;)a!==e&&Bt.call(a,l,1),Bt.call(e,l,1);return e}function Tr(e,t){for(var n=e?t.length:0,i=n-1;n--;){var r=t[n];if(n==i||r!==o){var o=r;Go(r)?Bt.call(e,r,1):zr(e,r)}}return e}function _r(e,t){return e+Fn(Kn()*(t-e+1))}function Sr(e,t){var n="";if(!e||t<1||t>L)return n;do{t%2&&(n+=e),(t=Fn(t/2))&&(e+=e)}while(t);return n}function br(e,t){return os(ts(e,t,Ol),e+"")}function Er(e){return Ei(pl(e))}function Pr(e,t){var n=pl(e);return ls(n,Bi(t,0,n.length))}function Cr(e,t,n,i){if(!Ca(e))return e;for(var r=-1,s=(t=Gr(t,e)).length,a=s-1,l=e;null!=l&&++r<s;){var u=cs(t[r]),c=n;if(r!=a){var h=l[u];(c=i?i(h,u,l):o)===o&&(c=Ca(h)?h:Go(t[r+1])?[]:{})}ki(l,u,c),l=l[u]}return e}var Rr=ri?function(e,t){return ri.set(e,t),e}:Ol,kr=pn?function(e,t){return pn(e,"toString",{configurable:!0,enumerable:!1,value:Cl(t),writable:!0})}:Ol;function Or(e){return ls(pl(e))}function Dr(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var s=i(o);++r<o;)s[r]=e[r+t];return s}function Ir(e,t){var n;return Fi(e,function(e,i,r){return!(n=t(e,i,r))}),!!n}function Ar(e,t,n){var i=0,r=null==e?i:e.length;if("number"==typeof t&&t==t&&r<=z){for(;i<r;){var o=i+r>>>1,s=e[o];null!==s&&!Ba(s)&&(n?s<=t:s<t)?i=o+1:r=o}return r}return Lr(e,t,Ol,n)}function Lr(e,t,n,i){t=n(t);for(var r=0,s=null==e?0:e.length,a=t!=t,l=null===t,u=Ba(t),c=t===o;r<s;){var h=Fn((r+s)/2),d=n(e[h]),p=d!==o,f=null===d,g=d==d,m=Ba(d);if(a)var v=i||g;else v=c?g&&(i||p):l?g&&p&&(i||!f):u?g&&p&&!f&&(i||!m):!f&&!m&&(i?d<=t:d<t);v?r=h+1:s=h}return Gn(s,H)}function Br(e,t){for(var n=-1,i=e.length,r=0,o=[];++n<i;){var s=e[n],a=t?t(s):s;if(!n||!pa(a,l)){var l=a;o[r++]=0===s?0:s}}return o}function Mr(e){return"number"==typeof e?e:Ba(e)?M:+e}function Nr(e){if("string"==typeof e)return e;if(va(e))return Jt(e,Nr)+"";if(Ba(e))return pi?pi.call(e):"";var t=e+"";return"0"==t&&1/e==-A?"-0":t}function Hr(e,t,n){var i=-1,r=Yt,o=e.length,a=!0,l=[],u=l;if(n)a=!1,r=Qt;else if(o>=s){var c=t?null:bo(e);if(c)return On(c);a=!1,r=wn,u=new _i}else u=t?[]:l;e:for(;++i<o;){var h=e[i],d=t?t(h):h;if(h=n||0!==h?h:0,a&&d==d){for(var p=u.length;p--;)if(u[p]===d)continue e;t&&u.push(d),l.push(h)}else r(u,d,n)||(u!==l&&u.push(d),l.push(h))}return l}function zr(e,t){return null==(e=ns(e,t=Gr(t,e)))||delete e[cs(Ss(t))]}function Fr(e,t,n,i){return Cr(e,t,n(Yi(e,t)),i)}function jr(e,t,n,i){for(var r=e.length,o=i?r:-1;(i?o--:++o<r)&&t(e[o],o,e););return n?Dr(e,i?0:o,i?o+1:r):Dr(e,i?o+1:0,i?r:o)}function Wr(e,t){var n=e;return n instanceof yi&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function qr(e,t,n){var r=e.length;if(r<2)return r?Hr(e[0]):[];for(var o=-1,s=i(r);++o<r;)for(var a=e[o],l=-1;++l<r;)l!=o&&(s[o]=zi(s[o]||a,e[l],t,n));return Hr($i(s,1),t,n)}function Ur(e,t,n){for(var i=-1,r=e.length,s=t.length,a={};++i<r;){var l=i<s?t[i]:o;n(a,e[i],l)}return a}function $r(e){return xa(e)?e:[]}function Vr(e){return"function"==typeof e?e:Ol}function Gr(e,t){return va(e)?e:Xo(e,t)?[e]:us($a(e))}var Zr=br;function Xr(e,t,n){var i=e.length;return n=n===o?i:n,!t&&n>=i?e:Dr(e,t,n)}var Kr=Mn||function(e){return At.clearTimeout(e)};function Yr(e,t){if(t)return e.slice();var n=e.length,i=Rt?Rt(n):new e.constructor(n);return e.copy(i),i}function Qr(e){var t=new e.constructor(e.byteLength);return new _t(t).set(new _t(e)),t}function Jr(e,t){var n=t?Qr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function eo(e,t){if(e!==t){var n=e!==o,i=null===e,r=e==e,s=Ba(e),a=t!==o,l=null===t,u=t==t,c=Ba(t);if(!l&&!c&&!s&&e>t||s&&a&&u&&!l&&!c||i&&a&&u||!n&&u||!r)return 1;if(!i&&!s&&!c&&e<t||c&&n&&r&&!i&&!s||l&&n&&r||!a&&r||!u)return-1}return 0}function to(e,t,n,r){for(var o=-1,s=e.length,a=n.length,l=-1,u=t.length,c=Vn(s-a,0),h=i(u+c),d=!r;++l<u;)h[l]=t[l];for(;++o<a;)(d||o<s)&&(h[n[o]]=e[o]);for(;c--;)h[l++]=e[o++];return h}function no(e,t,n,r){for(var o=-1,s=e.length,a=-1,l=n.length,u=-1,c=t.length,h=Vn(s-l,0),d=i(h+c),p=!r;++o<h;)d[o]=e[o];for(var f=o;++u<c;)d[f+u]=t[u];for(;++a<l;)(p||o<s)&&(d[f+n[a]]=e[o++]);return d}function io(e,t){var n=-1,r=e.length;for(t||(t=i(r));++n<r;)t[n]=e[n];return t}function ro(e,t,n,i){var r=!n;n||(n={});for(var s=-1,a=t.length;++s<a;){var l=t[s],u=i?i(n[l],e[l],l,n,e):o;u===o&&(u=e[l]),r?Ai(n,l,u):ki(n,l,u)}return n}function oo(e,t){return function(n,i){var r=va(n)?Vt:Di,o=t?t():{};return r(n,e,No(i,2),o)}}function so(e){return br(function(t,n){var i=-1,r=n.length,s=r>1?n[r-1]:o,a=r>2?n[2]:o;for(s=e.length>3&&"function"==typeof s?(r--,s):o,a&&Zo(n[0],n[1],a)&&(s=r<3?o:s,r=1),t=tt(t);++i<r;){var l=n[i];l&&e(t,l,i,s)}return t})}function ao(e,t){return function(n,i){if(null==n)return n;if(!wa(n))return e(n,i);for(var r=n.length,o=t?r:-1,s=tt(n);(t?o--:++o<r)&&!1!==i(s[o],o,s););return n}}function lo(e){return function(t,n,i){for(var r=-1,o=tt(t),s=i(t),a=s.length;a--;){var l=s[e?a:++r];if(!1===n(o[l],l,o))break}return t}}function uo(e){return function(t){var n=En(t=$a(t))?An(t):o,i=n?n[0]:t.charAt(0),r=n?Xr(n,1).join(""):t.slice(1);return i[e]()+r}}function co(e){return function(t){return tn(bl(ml(t).replace(yt,"")),e,"")}}function ho(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=gi(e.prototype),i=e.apply(n,t);return Ca(i)?i:n}}function po(e){return function(t,n,i){var r=tt(t);if(!wa(t)){var s=No(n,3);t=rl(t),n=function(e){return s(r[e],e,r)}}var a=e(t,n,i);return a>-1?r[s?t[a]:a]:o}}function fo(e){return Do(function(t){var n=t.length,i=n,r=vi.prototype.thru;for(e&&t.reverse();i--;){var s=t[i];if("function"!=typeof s)throw new rt(l);if(r&&!a&&"wrapper"==Bo(s))var a=new vi([],!0)}for(i=a?i:n;++i<n;){var u=Bo(s=t[i]),c="wrapper"==u?Lo(s):o;a=c&&Ko(c[0])&&c[1]==(b|x|_|E)&&!c[4].length&&1==c[9]?a[Bo(c[0])].apply(a,c[3]):1==s.length&&Ko(s)?a[u]():a.thru(s)}return function(){var e=arguments,i=e[0];if(a&&1==e.length&&va(i))return a.plant(i).value();for(var r=0,o=n?t[r].apply(this,e):i;++r<n;)o=t[r].call(this,o);return o}})}function go(e,t,n,r,s,a,l,u,c,h){var d=t&b,p=t&v,f=t&y,g=t&(x|T),m=t&P,w=f?o:ho(e);return function v(){for(var y=arguments.length,x=i(y),T=y;T--;)x[T]=arguments[T];if(g)var _=Mo(v),S=function(e,t){for(var n=e.length,i=0;n--;)e[n]===t&&++i;return i}(x,_);if(r&&(x=to(x,r,s,g)),a&&(x=no(x,a,l,g)),y-=S,g&&y<h){var b=Rn(x,_);return _o(e,t,go,v.placeholder,n,x,b,u,c,h-y)}var E=p?n:this,P=f?E[e]:e;return y=x.length,u?x=function(e,t){for(var n=e.length,i=Gn(t.length,n),r=io(e);i--;){var s=t[i];e[i]=Go(s,n)?r[s]:o}return e}(x,u):m&&y>1&&x.reverse(),d&&c<y&&(x.length=c),this&&this!==At&&this instanceof v&&(P=w||ho(P)),P.apply(E,x)}}function mo(e,t){return function(n,i){return function(e,t,n,i){return Zi(e,function(e,r,o){t(i,n(e),r,o)}),i}(n,e,t(i),{})}}function vo(e,t){return function(n,i){var r;if(n===o&&i===o)return t;if(n!==o&&(r=n),i!==o){if(r===o)return i;"string"==typeof n||"string"==typeof i?(n=Nr(n),i=Nr(i)):(n=Mr(n),i=Mr(i)),r=e(n,i)}return r}}function yo(e){return Do(function(t){return t=Jt(t,vn(No())),br(function(n){var i=this;return e(t,function(e){return $t(e,i,n)})})})}function wo(e,t){var n=(t=t===o?" ":Nr(t)).length;if(n<2)return n?Sr(t,e):t;var i=Sr(t,zn(e/In(t)));return En(t)?Xr(An(i),0,e).join(""):i.slice(0,e)}function xo(e){return function(t,n,r){return r&&"number"!=typeof r&&Zo(t,n,r)&&(n=r=o),t=Fa(t),n===o?(n=t,t=0):n=Fa(n),function(e,t,n,r){for(var o=-1,s=Vn(zn((t-e)/(n||1)),0),a=i(s);s--;)a[r?s:++o]=e,e+=n;return a}(t,n,r=r===o?t<n?1:-1:Fa(r),e)}}function To(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=qa(t),n=qa(n)),e(t,n)}}function _o(e,t,n,i,r,s,a,l,u,c){var h=t&x;t|=h?_:S,(t&=~(h?S:_))&w||(t&=~(v|y));var d=[e,t,r,h?s:o,h?a:o,h?o:s,h?o:a,l,u,c],p=n.apply(o,d);return Ko(e)&&is(p,d),p.placeholder=i,ss(p,e,t)}function So(e){var t=et[e];return function(e,n){if(e=qa(e),n=null==n?0:Gn(ja(n),292)){var i=($a(e)+"e").split("e");return+((i=($a(t(i[0]+"e"+(+i[1]+n)))+"e").split("e"))[0]+"e"+(+i[1]-n))}return t(e)}}var bo=ti&&1/On(new ti([,-0]))[1]==A?function(e){return new ti(e)}:Bl;function Eo(e){return function(t){var n=qo(t);return n==K?Pn(t):n==ne?Dn(t):function(e,t){return Jt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Po(e,t,n,r,s,a,u,c){var d=t&y;if(!d&&"function"!=typeof e)throw new rt(l);var p=r?r.length:0;if(p||(t&=~(_|S),r=s=o),u=u===o?u:Vn(ja(u),0),c=c===o?c:ja(c),p-=s?s.length:0,t&S){var f=r,g=s;r=s=o}var m=d?o:Lo(e),P=[e,t,n,r,s,f,g,a,u,c];if(m&&function(e,t){var n=e[1],i=t[1],r=n|i,o=r<(v|y|b),s=i==b&&n==x||i==b&&n==E&&e[7].length<=t[8]||i==(b|E)&&t[7].length<=t[8]&&n==x;if(!o&&!s)return e;i&v&&(e[2]=t[2],r|=n&v?0:w);var a=t[3];if(a){var l=e[3];e[3]=l?to(l,a,t[4]):a,e[4]=l?Rn(e[3],h):t[4]}(a=t[5])&&(l=e[5],e[5]=l?no(l,a,t[6]):a,e[6]=l?Rn(e[5],h):t[6]),(a=t[7])&&(e[7]=a),i&b&&(e[8]=null==e[8]?t[8]:Gn(e[8],t[8])),null==e[9]&&(e[9]=t[9]),e[0]=t[0],e[1]=r}(P,m),e=P[0],t=P[1],n=P[2],r=P[3],s=P[4],!(c=P[9]=P[9]===o?d?0:e.length:Vn(P[9]-p,0))&&t&(x|T)&&(t&=~(x|T)),t&&t!=v)C=t==x||t==T?function(e,t,n){var r=ho(e);return function s(){for(var a=arguments.length,l=i(a),u=a,c=Mo(s);u--;)l[u]=arguments[u];var h=a<3&&l[0]!==c&&l[a-1]!==c?[]:Rn(l,c);return(a-=h.length)<n?_o(e,t,go,s.placeholder,o,l,h,o,o,n-a):$t(this&&this!==At&&this instanceof s?r:e,this,l)}}(e,t,c):t!=_&&t!=(v|_)||s.length?go.apply(o,P):function(e,t,n,r){var o=t&v,s=ho(e);return function t(){for(var a=-1,l=arguments.length,u=-1,c=r.length,h=i(c+l),d=this&&this!==At&&this instanceof t?s:e;++u<c;)h[u]=r[u];for(;l--;)h[u++]=arguments[++a];return $t(d,o?n:this,h)}}(e,t,n,r);else var C=function(e,t,n){var i=t&v,r=ho(e);return function t(){return(this&&this!==At&&this instanceof t?r:e).apply(i?n:this,arguments)}}(e,t,n);return ss((m?Rr:is)(C,P),e,t)}function Co(e,t,n,i){return e===o||pa(e,at[n])&&!ct.call(i,n)?t:e}function Ro(e,t,n,i,r,s){return Ca(e)&&Ca(t)&&(s.set(t,e),mr(e,t,o,Ro,s),s.delete(t)),e}function ko(e){return Da(e)?o:e}function Oo(e,t,n,i,r,s){var a=n&g,l=e.length,u=t.length;if(l!=u&&!(a&&u>l))return!1;var c=s.get(e);if(c&&s.get(t))return c==t;var h=-1,d=!0,p=n&m?new _i:o;for(s.set(e,t),s.set(t,e);++h<l;){var f=e[h],v=t[h];if(i)var y=a?i(v,f,h,t,e,s):i(f,v,h,e,t,s);if(y!==o){if(y)continue;d=!1;break}if(p){if(!rn(t,function(e,t){if(!wn(p,t)&&(f===e||r(f,e,n,i,s)))return p.push(t)})){d=!1;break}}else if(f!==v&&!r(f,v,n,i,s)){d=!1;break}}return s.delete(e),s.delete(t),d}function Do(e){return os(ts(e,o,ys),e+"")}function Io(e){return Qi(e,rl,jo)}function Ao(e){return Qi(e,ol,Wo)}var Lo=ri?function(e){return ri.get(e)}:Bl;function Bo(e){for(var t=e.name+"",n=oi[t],i=ct.call(oi,t)?n.length:0;i--;){var r=n[i],o=r.func;if(null==o||o==e)return r.name}return t}function Mo(e){return(ct.call(fi,"placeholder")?fi:e).placeholder}function No(){var e=fi.iteratee||Dl;return e=e===Dl?ur:e,arguments.length?e(arguments[0],arguments[1]):e}function Ho(e,t){var n,i,r=e.__data__;return("string"==(i=typeof(n=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==n:null===n)?r["string"==typeof t?"string":"hash"]:r.map}function zo(e){for(var t=rl(e),n=t.length;n--;){var i=t[n],r=e[i];t[n]=[i,r,Jo(r)]}return t}function Fo(e,t){var n=function(e,t){return null==e?o:e[t]}(e,t);return lr(n)?n:o}var jo=jn?function(e){return null==e?[]:(e=tt(e),Kt(jn(e),function(t){return Lt.call(e,t)}))}:Wl,Wo=jn?function(e){for(var t=[];e;)en(t,jo(e)),e=Dt(e);return t}:Wl,qo=Ji;function Uo(e,t,n){for(var i=-1,r=(t=Gr(t,e)).length,o=!1;++i<r;){var s=cs(t[i]);if(!(o=null!=e&&n(e,s)))break;e=e[s]}return o||++i!=r?o:!!(r=null==e?0:e.length)&&Pa(r)&&Go(s,r)&&(va(e)||ma(e))}function $o(e){return"function"!=typeof e.constructor||Qo(e)?{}:gi(Dt(e))}function Vo(e){return va(e)||ma(e)||!!(Nt&&e&&e[Nt])}function Go(e,t){var n=typeof e;return!!(t=null==t?L:t)&&("number"==n||"symbol"!=n&&Ze.test(e))&&e>-1&&e%1==0&&e<t}function Zo(e,t,n){if(!Ca(n))return!1;var i=typeof t;return!!("number"==i?wa(n)&&Go(t,n.length):"string"==i&&t in n)&&pa(n[t],e)}function Xo(e,t){if(va(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ba(e))||Oe.test(e)||!ke.test(e)||null!=t&&e in tt(t)}function Ko(e){var t=Bo(e),n=fi[t];if("function"!=typeof n||!(t in yi.prototype))return!1;if(e===n)return!0;var i=Lo(n);return!!i&&e===i[0]}(Qn&&qo(new Qn(new ArrayBuffer(1)))!=ue||Jn&&qo(new Jn)!=K||ei&&"[object Promise]"!=qo(ei.resolve())||ti&&qo(new ti)!=ne||ni&&qo(new ni)!=se)&&(qo=function(e){var t=Ji(e),n=t==J?e.constructor:o,i=n?hs(n):"";if(i)switch(i){case si:return ue;case ai:return K;case li:return"[object Promise]";case ui:return ne;case ci:return se}return t});var Yo=lt?ba:ql;function Qo(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||at)}function Jo(e){return e==e&&!Ca(e)}function es(e,t){return function(n){return null!=n&&n[e]===t&&(t!==o||e in tt(n))}}function ts(e,t,n){return t=Vn(t===o?e.length-1:t,0),function(){for(var r=arguments,o=-1,s=Vn(r.length-t,0),a=i(s);++o<s;)a[o]=r[t+o];o=-1;for(var l=i(t+1);++o<t;)l[o]=r[o];return l[t]=n(a),$t(e,this,l)}}function ns(e,t){return t.length<2?e:Yi(e,Dr(t,0,-1))}var is=as(Rr),rs=Hn||function(e,t){return At.setTimeout(e,t)},os=as(kr);function ss(e,t,n){var i=t+"";return os(e,function(e,t){var n=t.length;if(!n)return e;var i=n-1;return t[i]=(n>1?"& ":"")+t[i],t=t.join(n>2?", ":" "),e.replace(Ne,"{\n/* [wrapped with "+t+"] */\n")}(i,function(e,t){return Gt(F,function(n){var i="_."+n[0];t&n[1]&&!Yt(e,i)&&e.push(i)}),e.sort()}(function(e){var t=e.match(He);return t?t[1].split(ze):[]}(i),n)))}function as(e){var t=0,n=0;return function(){var i=Zn(),r=O-(i-n);if(n=i,r>0){if(++t>=k)return arguments[0]}else t=0;return e.apply(o,arguments)}}function ls(e,t){var n=-1,i=e.length,r=i-1;for(t=t===o?i:t;++n<t;){var s=_r(n,r),a=e[s];e[s]=e[n],e[n]=a}return e.length=t,e}var us=function(e){var t=aa(e,function(e){return n.size===c&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(De,function(e,n,i,r){t.push(i?r.replace(je,"$1"):n||e)}),t});function cs(e){if("string"==typeof e||Ba(e))return e;var t=e+"";return"0"==t&&1/e==-A?"-0":t}function hs(e){if(null!=e){try{return ut.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ds(e){if(e instanceof yi)return e.clone();var t=new vi(e.__wrapped__,e.__chain__);return t.__actions__=io(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var ps=br(function(e,t){return xa(e)?zi(e,$i(t,1,xa,!0)):[]}),fs=br(function(e,t){var n=Ss(t);return xa(n)&&(n=o),xa(e)?zi(e,$i(t,1,xa,!0),No(n,2)):[]}),gs=br(function(e,t){var n=Ss(t);return xa(n)&&(n=o),xa(e)?zi(e,$i(t,1,xa,!0),o,n):[]});function ms(e,t,n){var i=null==e?0:e.length;if(!i)return-1;var r=null==n?0:ja(n);return r<0&&(r=Vn(i+r,0)),an(e,No(t,3),r)}function vs(e,t,n){var i=null==e?0:e.length;if(!i)return-1;var r=i-1;return n!==o&&(r=ja(n),r=n<0?Vn(i+r,0):Gn(r,i-1)),an(e,No(t,3),r,!0)}function ys(e){return null!=e&&e.length?$i(e,1):[]}function ws(e){return e&&e.length?e[0]:o}var xs=br(function(e){var t=Jt(e,$r);return t.length&&t[0]===e[0]?ir(t):[]}),Ts=br(function(e){var t=Ss(e),n=Jt(e,$r);return t===Ss(n)?t=o:n.pop(),n.length&&n[0]===e[0]?ir(n,No(t,2)):[]}),_s=br(function(e){var t=Ss(e),n=Jt(e,$r);return(t="function"==typeof t?t:o)&&n.pop(),n.length&&n[0]===e[0]?ir(n,o,t):[]});function Ss(e){var t=null==e?0:e.length;return t?e[t-1]:o}var bs=br(Es);function Es(e,t){return e&&e.length&&t&&t.length?xr(e,t):e}var Ps=Do(function(e,t){var n=null==e?0:e.length,i=Li(e,t);return Tr(e,Jt(t,function(e){return Go(e,n)?+e:e}).sort(eo)),i});function Cs(e){return null==e?e:Yn.call(e)}var Rs=br(function(e){return Hr($i(e,1,xa,!0))}),ks=br(function(e){var t=Ss(e);return xa(t)&&(t=o),Hr($i(e,1,xa,!0),No(t,2))}),Os=br(function(e){var t=Ss(e);return t="function"==typeof t?t:o,Hr($i(e,1,xa,!0),o,t)});function Ds(e){if(!e||!e.length)return[];var t=0;return e=Kt(e,function(e){if(xa(e))return t=Vn(e.length,t),!0}),mn(t,function(t){return Jt(e,dn(t))})}function Is(e,t){if(!e||!e.length)return[];var n=Ds(e);return null==t?n:Jt(n,function(e){return $t(t,o,e)})}var As=br(function(e,t){return xa(e)?zi(e,t):[]}),Ls=br(function(e){return qr(Kt(e,xa))}),Bs=br(function(e){var t=Ss(e);return xa(t)&&(t=o),qr(Kt(e,xa),No(t,2))}),Ms=br(function(e){var t=Ss(e);return t="function"==typeof t?t:o,qr(Kt(e,xa),o,t)}),Ns=br(Ds);var Hs=br(function(e){var t=e.length,n=t>1?e[t-1]:o;return Is(e,n="function"==typeof n?(e.pop(),n):o)});function zs(e){var t=fi(e);return t.__chain__=!0,t}function Fs(e,t){return t(e)}var js=Do(function(e){var t=e.length,n=t?e[0]:0,i=this.__wrapped__,r=function(t){return Li(t,e)};return!(t>1||this.__actions__.length)&&i instanceof yi&&Go(n)?((i=i.slice(n,+n+(t?1:0))).__actions__.push({func:Fs,args:[r],thisArg:o}),new vi(i,this.__chain__).thru(function(e){return t&&!e.length&&e.push(o),e})):this.thru(r)});var Ws=oo(function(e,t,n){ct.call(e,n)?++e[n]:Ai(e,n,1)});var qs=po(ms),Us=po(vs);function $s(e,t){return(va(e)?Gt:Fi)(e,No(t,3))}function Vs(e,t){return(va(e)?Zt:ji)(e,No(t,3))}var Gs=oo(function(e,t,n){ct.call(e,n)?e[n].push(t):Ai(e,n,[t])});var Zs=br(function(e,t,n){var r=-1,o="function"==typeof t,s=wa(e)?i(e.length):[];return Fi(e,function(e){s[++r]=o?$t(t,e,n):rr(e,t,n)}),s}),Xs=oo(function(e,t,n){Ai(e,n,t)});function Ks(e,t){return(va(e)?Jt:pr)(e,No(t,3))}var Ys=oo(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Qs=br(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Zo(e,t[0],t[1])?t=[]:n>2&&Zo(t[0],t[1],t[2])&&(t=[t[0]]),yr(e,$i(t,1),[])}),Js=Nn||function(){return At.Date.now()};function ea(e,t,n){return t=n?o:t,t=e&&null==t?e.length:t,Po(e,b,o,o,o,o,t)}function ta(e,t){var n;if("function"!=typeof t)throw new rt(l);return e=ja(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=o),n}}var na=br(function(e,t,n){var i=v;if(n.length){var r=Rn(n,Mo(na));i|=_}return Po(e,i,t,n,r)}),ia=br(function(e,t,n){var i=v|y;if(n.length){var r=Rn(n,Mo(ia));i|=_}return Po(t,i,e,n,r)});function ra(e,t,n){var i,r,s,a,u,c,h=0,d=!1,p=!1,f=!0;if("function"!=typeof e)throw new rt(l);function g(t){var n=i,s=r;return i=r=o,h=t,a=e.apply(s,n)}function m(e){var n=e-c;return c===o||n>=t||n<0||p&&e-h>=s}function v(){var e=Js();if(m(e))return y(e);u=rs(v,function(e){var n=t-(e-c);return p?Gn(n,s-(e-h)):n}(e))}function y(e){return u=o,f&&i?g(e):(i=r=o,a)}function w(){var e=Js(),n=m(e);if(i=arguments,r=this,c=e,n){if(u===o)return function(e){return h=e,u=rs(v,t),d?g(e):a}(c);if(p)return u=rs(v,t),g(c)}return u===o&&(u=rs(v,t)),a}return t=qa(t)||0,Ca(n)&&(d=!!n.leading,s=(p="maxWait"in n)?Vn(qa(n.maxWait)||0,t):s,f="trailing"in n?!!n.trailing:f),w.cancel=function(){u!==o&&Kr(u),h=0,i=c=r=u=o},w.flush=function(){return u===o?a:y(Js())},w}var oa=br(function(e,t){return Hi(e,1,t)}),sa=br(function(e,t,n){return Hi(e,qa(t)||0,n)});function aa(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new rt(l);var n=function(){var i=arguments,r=t?t.apply(this,i):i[0],o=n.cache;if(o.has(r))return o.get(r);var s=e.apply(this,i);return n.cache=o.set(r,s)||o,s};return n.cache=new(aa.Cache||Ti),n}function la(e){if("function"!=typeof e)throw new rt(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}aa.Cache=Ti;var ua=Zr(function(e,t){var n=(t=1==t.length&&va(t[0])?Jt(t[0],vn(No())):Jt($i(t,1),vn(No()))).length;return br(function(i){for(var r=-1,o=Gn(i.length,n);++r<o;)i[r]=t[r].call(this,i[r]);return $t(e,this,i)})}),ca=br(function(e,t){var n=Rn(t,Mo(ca));return Po(e,_,o,t,n)}),ha=br(function(e,t){var n=Rn(t,Mo(ha));return Po(e,S,o,t,n)}),da=Do(function(e,t){return Po(e,E,o,o,o,t)});function pa(e,t){return e===t||e!=e&&t!=t}var fa=To(er),ga=To(function(e,t){return e>=t}),ma=or(function(){return arguments}())?or:function(e){return Ra(e)&&ct.call(e,"callee")&&!Lt.call(e,"callee")},va=i.isArray,ya=zt?vn(zt):function(e){return Ra(e)&&Ji(e)==le};function wa(e){return null!=e&&Pa(e.length)&&!ba(e)}function xa(e){return Ra(e)&&wa(e)}var Ta=Wn||ql,_a=Ft?vn(Ft):function(e){return Ra(e)&&Ji(e)==$};function Sa(e){if(!Ra(e))return!1;var t=Ji(e);return t==G||t==V||"string"==typeof e.message&&"string"==typeof e.name&&!Da(e)}function ba(e){if(!Ca(e))return!1;var t=Ji(e);return t==Z||t==X||t==q||t==ee}function Ea(e){return"number"==typeof e&&e==ja(e)}function Pa(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=L}function Ca(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ra(e){return null!=e&&"object"==typeof e}var ka=jt?vn(jt):function(e){return Ra(e)&&qo(e)==K};function Oa(e){return"number"==typeof e||Ra(e)&&Ji(e)==Y}function Da(e){if(!Ra(e)||Ji(e)!=J)return!1;var t=Dt(e);if(null===t)return!0;var n=ct.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ut.call(n)==ft}var Ia=Wt?vn(Wt):function(e){return Ra(e)&&Ji(e)==te};var Aa=qt?vn(qt):function(e){return Ra(e)&&qo(e)==ne};function La(e){return"string"==typeof e||!va(e)&&Ra(e)&&Ji(e)==ie}function Ba(e){return"symbol"==typeof e||Ra(e)&&Ji(e)==re}var Ma=Ut?vn(Ut):function(e){return Ra(e)&&Pa(e.length)&&!!Pt[Ji(e)]};var Na=To(dr),Ha=To(function(e,t){return e<=t});function za(e){if(!e)return[];if(wa(e))return La(e)?An(e):io(e);if(Ht&&e[Ht])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Ht]());var t=qo(e);return(t==K?Pn:t==ne?On:pl)(e)}function Fa(e){return e?(e=qa(e))===A||e===-A?(e<0?-1:1)*B:e==e?e:0:0===e?e:0}function ja(e){var t=Fa(e),n=t%1;return t==t?n?t-n:t:0}function Wa(e){return e?Bi(ja(e),0,N):0}function qa(e){if("number"==typeof e)return e;if(Ba(e))return M;if(Ca(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ca(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Le,"");var n=$e.test(e);return n||Ge.test(e)?Ot(e.slice(2),n?2:8):Ue.test(e)?M:+e}function Ua(e){return ro(e,ol(e))}function $a(e){return null==e?"":Nr(e)}var Va=so(function(e,t){if(Qo(t)||wa(t))ro(t,rl(t),e);else for(var n in t)ct.call(t,n)&&ki(e,n,t[n])}),Ga=so(function(e,t){ro(t,ol(t),e)}),Za=so(function(e,t,n,i){ro(t,ol(t),e,i)}),Xa=so(function(e,t,n,i){ro(t,rl(t),e,i)}),Ka=Do(Li);var Ya=br(function(e,t){e=tt(e);var n=-1,i=t.length,r=i>2?t[2]:o;for(r&&Zo(t[0],t[1],r)&&(i=1);++n<i;)for(var s=t[n],a=ol(s),l=-1,u=a.length;++l<u;){var c=a[l],h=e[c];(h===o||pa(h,at[c])&&!ct.call(e,c))&&(e[c]=s[c])}return e}),Qa=br(function(e){return e.push(o,Ro),$t(al,o,e)});function Ja(e,t,n){var i=null==e?o:Yi(e,t);return i===o?n:i}function el(e,t){return null!=e&&Uo(e,t,nr)}var tl=mo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),e[t]=n},Cl(Ol)),nl=mo(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),ct.call(e,t)?e[t].push(n):e[t]=[n]},No),il=br(rr);function rl(e){return wa(e)?bi(e):cr(e)}function ol(e){return wa(e)?bi(e,!0):hr(e)}var sl=so(function(e,t,n){mr(e,t,n)}),al=so(function(e,t,n,i){mr(e,t,n,i)}),ll=Do(function(e,t){var n={};if(null==e)return n;var i=!1;t=Jt(t,function(t){return t=Gr(t,e),i||(i=t.length>1),t}),ro(e,Ao(e),n),i&&(n=Mi(n,d|p|f,ko));for(var r=t.length;r--;)zr(n,t[r]);return n});var ul=Do(function(e,t){return null==e?{}:function(e,t){return wr(e,t,function(t,n){return el(e,n)})}(e,t)});function cl(e,t){if(null==e)return{};var n=Jt(Ao(e),function(e){return[e]});return t=No(t),wr(e,n,function(e,n){return t(e,n[0])})}var hl=Eo(rl),dl=Eo(ol);function pl(e){return null==e?[]:yn(e,rl(e))}var fl=co(function(e,t,n){return t=t.toLowerCase(),e+(n?gl(t):t)});function gl(e){return Sl($a(e).toLowerCase())}function ml(e){return(e=$a(e))&&e.replace(Xe,_n).replace(wt,"")}var vl=co(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),yl=co(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),wl=uo("toLowerCase");var xl=co(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var Tl=co(function(e,t,n){return e+(n?" ":"")+Sl(t)});var _l=co(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Sl=uo("toUpperCase");function bl(e,t,n){return e=$a(e),(t=n?o:t)===o?function(e){return St.test(e)}(e)?function(e){return e.match(Tt)||[]}(e):function(e){return e.match(Fe)||[]}(e):e.match(t)||[]}var El=br(function(e,t){try{return $t(e,o,t)}catch(e){return Sa(e)?e:new Qe(e)}}),Pl=Do(function(e,t){return Gt(t,function(t){t=cs(t),Ai(e,t,na(e[t],e))}),e});function Cl(e){return function(){return e}}var Rl=fo(),kl=fo(!0);function Ol(e){return e}function Dl(e){return ur("function"==typeof e?e:Mi(e,d))}var Il=br(function(e,t){return function(n){return rr(n,e,t)}}),Al=br(function(e,t){return function(n){return rr(e,n,t)}});function Ll(e,t,n){var i=rl(t),r=Ki(t,i);null!=n||Ca(t)&&(r.length||!i.length)||(n=t,t=e,e=this,r=Ki(t,rl(t)));var o=!(Ca(n)&&"chain"in n&&!n.chain),s=ba(e);return Gt(r,function(n){var i=t[n];e[n]=i,s&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=io(this.__actions__)).push({func:i,args:arguments,thisArg:e}),n.__chain__=t,n}return i.apply(e,en([this.value()],arguments))})}),e}function Bl(){}var Ml=yo(Jt),Nl=yo(Xt),Hl=yo(rn);function zl(e){return Xo(e)?dn(cs(e)):function(e){return function(t){return Yi(t,e)}}(e)}var Fl=xo(),jl=xo(!0);function Wl(){return[]}function ql(){return!1}var Ul=vo(function(e,t){return e+t},0),$l=So("ceil"),Vl=vo(function(e,t){return e/t},1),Gl=So("floor");var Zl,Xl=vo(function(e,t){return e*t},1),Kl=So("round"),Yl=vo(function(e,t){return e-t},0);return fi.after=function(e,t){if("function"!=typeof t)throw new rt(l);return e=ja(e),function(){if(--e<1)return t.apply(this,arguments)}},fi.ary=ea,fi.assign=Va,fi.assignIn=Ga,fi.assignInWith=Za,fi.assignWith=Xa,fi.at=Ka,fi.before=ta,fi.bind=na,fi.bindAll=Pl,fi.bindKey=ia,fi.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return va(e)?e:[e]},fi.chain=zs,fi.chunk=function(e,t,n){t=(n?Zo(e,t,n):t===o)?1:Vn(ja(t),0);var r=null==e?0:e.length;if(!r||t<1)return[];for(var s=0,a=0,l=i(zn(r/t));s<r;)l[a++]=Dr(e,s,s+=t);return l},fi.compact=function(e){for(var t=-1,n=null==e?0:e.length,i=0,r=[];++t<n;){var o=e[t];o&&(r[i++]=o)}return r},fi.concat=function(){var e=arguments.length;if(!e)return[];for(var t=i(e-1),n=arguments[0],r=e;r--;)t[r-1]=arguments[r];return en(va(n)?io(n):[n],$i(t,1))},fi.cond=function(e){var t=null==e?0:e.length,n=No();return e=t?Jt(e,function(e){if("function"!=typeof e[1])throw new rt(l);return[n(e[0]),e[1]]}):[],br(function(n){for(var i=-1;++i<t;){var r=e[i];if($t(r[0],this,n))return $t(r[1],this,n)}})},fi.conforms=function(e){return function(e){var t=rl(e);return function(n){return Ni(n,e,t)}}(Mi(e,d))},fi.constant=Cl,fi.countBy=Ws,fi.create=function(e,t){var n=gi(e);return null==t?n:Ii(n,t)},fi.curry=function e(t,n,i){var r=Po(t,x,o,o,o,o,o,n=i?o:n);return r.placeholder=e.placeholder,r},fi.curryRight=function e(t,n,i){var r=Po(t,T,o,o,o,o,o,n=i?o:n);return r.placeholder=e.placeholder,r},fi.debounce=ra,fi.defaults=Ya,fi.defaultsDeep=Qa,fi.defer=oa,fi.delay=sa,fi.difference=ps,fi.differenceBy=fs,fi.differenceWith=gs,fi.drop=function(e,t,n){var i=null==e?0:e.length;return i?Dr(e,(t=n||t===o?1:ja(t))<0?0:t,i):[]},fi.dropRight=function(e,t,n){var i=null==e?0:e.length;return i?Dr(e,0,(t=i-(t=n||t===o?1:ja(t)))<0?0:t):[]},fi.dropRightWhile=function(e,t){return e&&e.length?jr(e,No(t,3),!0,!0):[]},fi.dropWhile=function(e,t){return e&&e.length?jr(e,No(t,3),!0):[]},fi.fill=function(e,t,n,i){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Zo(e,t,n)&&(n=0,i=r),function(e,t,n,i){var r=e.length;for((n=ja(n))<0&&(n=-n>r?0:r+n),(i=i===o||i>r?r:ja(i))<0&&(i+=r),i=n>i?0:Wa(i);n<i;)e[n++]=t;return e}(e,t,n,i)):[]},fi.filter=function(e,t){return(va(e)?Kt:Ui)(e,No(t,3))},fi.flatMap=function(e,t){return $i(Ks(e,t),1)},fi.flatMapDeep=function(e,t){return $i(Ks(e,t),A)},fi.flatMapDepth=function(e,t,n){return n=n===o?1:ja(n),$i(Ks(e,t),n)},fi.flatten=ys,fi.flattenDeep=function(e){return null!=e&&e.length?$i(e,A):[]},fi.flattenDepth=function(e,t){return null!=e&&e.length?$i(e,t=t===o?1:ja(t)):[]},fi.flip=function(e){return Po(e,P)},fi.flow=Rl,fi.flowRight=kl,fi.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,i={};++t<n;){var r=e[t];i[r[0]]=r[1]}return i},fi.functions=function(e){return null==e?[]:Ki(e,rl(e))},fi.functionsIn=function(e){return null==e?[]:Ki(e,ol(e))},fi.groupBy=Gs,fi.initial=function(e){return null!=e&&e.length?Dr(e,0,-1):[]},fi.intersection=xs,fi.intersectionBy=Ts,fi.intersectionWith=_s,fi.invert=tl,fi.invertBy=nl,fi.invokeMap=Zs,fi.iteratee=Dl,fi.keyBy=Xs,fi.keys=rl,fi.keysIn=ol,fi.map=Ks,fi.mapKeys=function(e,t){var n={};return t=No(t,3),Zi(e,function(e,i,r){Ai(n,t(e,i,r),e)}),n},fi.mapValues=function(e,t){var n={};return t=No(t,3),Zi(e,function(e,i,r){Ai(n,i,t(e,i,r))}),n},fi.matches=function(e){return fr(Mi(e,d))},fi.matchesProperty=function(e,t){return gr(e,Mi(t,d))},fi.memoize=aa,fi.merge=sl,fi.mergeWith=al,fi.method=Il,fi.methodOf=Al,fi.mixin=Ll,fi.negate=la,fi.nthArg=function(e){return e=ja(e),br(function(t){return vr(t,e)})},fi.omit=ll,fi.omitBy=function(e,t){return cl(e,la(No(t)))},fi.once=function(e){return ta(2,e)},fi.orderBy=function(e,t,n,i){return null==e?[]:(va(t)||(t=null==t?[]:[t]),va(n=i?o:n)||(n=null==n?[]:[n]),yr(e,t,n))},fi.over=Ml,fi.overArgs=ua,fi.overEvery=Nl,fi.overSome=Hl,fi.partial=ca,fi.partialRight=ha,fi.partition=Ys,fi.pick=ul,fi.pickBy=cl,fi.property=zl,fi.propertyOf=function(e){return function(t){return null==e?o:Yi(e,t)}},fi.pull=bs,fi.pullAll=Es,fi.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?xr(e,t,No(n,2)):e},fi.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?xr(e,t,o,n):e},fi.pullAt=Ps,fi.range=Fl,fi.rangeRight=jl,fi.rearg=da,fi.reject=function(e,t){return(va(e)?Kt:Ui)(e,la(No(t,3)))},fi.remove=function(e,t){var n=[];if(!e||!e.length)return n;var i=-1,r=[],o=e.length;for(t=No(t,3);++i<o;){var s=e[i];t(s,i,e)&&(n.push(s),r.push(i))}return Tr(e,r),n},fi.rest=function(e,t){if("function"!=typeof e)throw new rt(l);return br(e,t=t===o?t:ja(t))},fi.reverse=Cs,fi.sampleSize=function(e,t,n){return t=(n?Zo(e,t,n):t===o)?1:ja(t),(va(e)?Pi:Pr)(e,t)},fi.set=function(e,t,n){return null==e?e:Cr(e,t,n)},fi.setWith=function(e,t,n,i){return i="function"==typeof i?i:o,null==e?e:Cr(e,t,n,i)},fi.shuffle=function(e){return(va(e)?Ci:Or)(e)},fi.slice=function(e,t,n){var i=null==e?0:e.length;return i?(n&&"number"!=typeof n&&Zo(e,t,n)?(t=0,n=i):(t=null==t?0:ja(t),n=n===o?i:ja(n)),Dr(e,t,n)):[]},fi.sortBy=Qs,fi.sortedUniq=function(e){return e&&e.length?Br(e):[]},fi.sortedUniqBy=function(e,t){return e&&e.length?Br(e,No(t,2)):[]},fi.split=function(e,t,n){return n&&"number"!=typeof n&&Zo(e,t,n)&&(t=n=o),(n=n===o?N:n>>>0)?(e=$a(e))&&("string"==typeof t||null!=t&&!Ia(t))&&!(t=Nr(t))&&En(e)?Xr(An(e),0,n):e.split(t,n):[]},fi.spread=function(e,t){if("function"!=typeof e)throw new rt(l);return t=null==t?0:Vn(ja(t),0),br(function(n){var i=n[t],r=Xr(n,0,t);return i&&en(r,i),$t(e,this,r)})},fi.tail=function(e){var t=null==e?0:e.length;return t?Dr(e,1,t):[]},fi.take=function(e,t,n){return e&&e.length?Dr(e,0,(t=n||t===o?1:ja(t))<0?0:t):[]},fi.takeRight=function(e,t,n){var i=null==e?0:e.length;return i?Dr(e,(t=i-(t=n||t===o?1:ja(t)))<0?0:t,i):[]},fi.takeRightWhile=function(e,t){return e&&e.length?jr(e,No(t,3),!1,!0):[]},fi.takeWhile=function(e,t){return e&&e.length?jr(e,No(t,3)):[]},fi.tap=function(e,t){return t(e),e},fi.throttle=function(e,t,n){var i=!0,r=!0;if("function"!=typeof e)throw new rt(l);return Ca(n)&&(i="leading"in n?!!n.leading:i,r="trailing"in n?!!n.trailing:r),ra(e,t,{leading:i,maxWait:t,trailing:r})},fi.thru=Fs,fi.toArray=za,fi.toPairs=hl,fi.toPairsIn=dl,fi.toPath=function(e){return va(e)?Jt(e,cs):Ba(e)?[e]:io(us($a(e)))},fi.toPlainObject=Ua,fi.transform=function(e,t,n){var i=va(e),r=i||Ta(e)||Ma(e);if(t=No(t,4),null==n){var o=e&&e.constructor;n=r?i?new o:[]:Ca(e)&&ba(o)?gi(Dt(e)):{}}return(r?Gt:Zi)(e,function(e,i,r){return t(n,e,i,r)}),n},fi.unary=function(e){return ea(e,1)},fi.union=Rs,fi.unionBy=ks,fi.unionWith=Os,fi.uniq=function(e){return e&&e.length?Hr(e):[]},fi.uniqBy=function(e,t){return e&&e.length?Hr(e,No(t,2)):[]},fi.uniqWith=function(e,t){return t="function"==typeof t?t:o,e&&e.length?Hr(e,o,t):[]},fi.unset=function(e,t){return null==e||zr(e,t)},fi.unzip=Ds,fi.unzipWith=Is,fi.update=function(e,t,n){return null==e?e:Fr(e,t,Vr(n))},fi.updateWith=function(e,t,n,i){return i="function"==typeof i?i:o,null==e?e:Fr(e,t,Vr(n),i)},fi.values=pl,fi.valuesIn=function(e){return null==e?[]:yn(e,ol(e))},fi.without=As,fi.words=bl,fi.wrap=function(e,t){return ca(Vr(t),e)},fi.xor=Ls,fi.xorBy=Bs,fi.xorWith=Ms,fi.zip=Ns,fi.zipObject=function(e,t){return Ur(e||[],t||[],ki)},fi.zipObjectDeep=function(e,t){return Ur(e||[],t||[],Cr)},fi.zipWith=Hs,fi.entries=hl,fi.entriesIn=dl,fi.extend=Ga,fi.extendWith=Za,Ll(fi,fi),fi.add=Ul,fi.attempt=El,fi.camelCase=fl,fi.capitalize=gl,fi.ceil=$l,fi.clamp=function(e,t,n){return n===o&&(n=t,t=o),n!==o&&(n=(n=qa(n))==n?n:0),t!==o&&(t=(t=qa(t))==t?t:0),Bi(qa(e),t,n)},fi.clone=function(e){return Mi(e,f)},fi.cloneDeep=function(e){return Mi(e,d|f)},fi.cloneDeepWith=function(e,t){return Mi(e,d|f,t="function"==typeof t?t:o)},fi.cloneWith=function(e,t){return Mi(e,f,t="function"==typeof t?t:o)},fi.conformsTo=function(e,t){return null==t||Ni(e,t,rl(t))},fi.deburr=ml,fi.defaultTo=function(e,t){return null==e||e!=e?t:e},fi.divide=Vl,fi.endsWith=function(e,t,n){e=$a(e),t=Nr(t);var i=e.length,r=n=n===o?i:Bi(ja(n),0,i);return(n-=t.length)>=0&&e.slice(n,r)==t},fi.eq=pa,fi.escape=function(e){return(e=$a(e))&&Ee.test(e)?e.replace(Se,Sn):e},fi.escapeRegExp=function(e){return(e=$a(e))&&Ae.test(e)?e.replace(Ie,"\\$&"):e},fi.every=function(e,t,n){var i=va(e)?Xt:Wi;return n&&Zo(e,t,n)&&(t=o),i(e,No(t,3))},fi.find=qs,fi.findIndex=ms,fi.findKey=function(e,t){return sn(e,No(t,3),Zi)},fi.findLast=Us,fi.findLastIndex=vs,fi.findLastKey=function(e,t){return sn(e,No(t,3),Xi)},fi.floor=Gl,fi.forEach=$s,fi.forEachRight=Vs,fi.forIn=function(e,t){return null==e?e:Vi(e,No(t,3),ol)},fi.forInRight=function(e,t){return null==e?e:Gi(e,No(t,3),ol)},fi.forOwn=function(e,t){return e&&Zi(e,No(t,3))},fi.forOwnRight=function(e,t){return e&&Xi(e,No(t,3))},fi.get=Ja,fi.gt=fa,fi.gte=ga,fi.has=function(e,t){return null!=e&&Uo(e,t,tr)},fi.hasIn=el,fi.head=ws,fi.identity=Ol,fi.includes=function(e,t,n,i){e=wa(e)?e:pl(e),n=n&&!i?ja(n):0;var r=e.length;return n<0&&(n=Vn(r+n,0)),La(e)?n<=r&&e.indexOf(t,n)>-1:!!r&&ln(e,t,n)>-1},fi.indexOf=function(e,t,n){var i=null==e?0:e.length;if(!i)return-1;var r=null==n?0:ja(n);return r<0&&(r=Vn(i+r,0)),ln(e,t,r)},fi.inRange=function(e,t,n){return t=Fa(t),n===o?(n=t,t=0):n=Fa(n),function(e,t,n){return e>=Gn(t,n)&&e<Vn(t,n)}(e=qa(e),t,n)},fi.invoke=il,fi.isArguments=ma,fi.isArray=va,fi.isArrayBuffer=ya,fi.isArrayLike=wa,fi.isArrayLikeObject=xa,fi.isBoolean=function(e){return!0===e||!1===e||Ra(e)&&Ji(e)==U},fi.isBuffer=Ta,fi.isDate=_a,fi.isElement=function(e){return Ra(e)&&1===e.nodeType&&!Da(e)},fi.isEmpty=function(e){if(null==e)return!0;if(wa(e)&&(va(e)||"string"==typeof e||"function"==typeof e.splice||Ta(e)||Ma(e)||ma(e)))return!e.length;var t=qo(e);if(t==K||t==ne)return!e.size;if(Qo(e))return!cr(e).length;for(var n in e)if(ct.call(e,n))return!1;return!0},fi.isEqual=function(e,t){return sr(e,t)},fi.isEqualWith=function(e,t,n){var i=(n="function"==typeof n?n:o)?n(e,t):o;return i===o?sr(e,t,o,n):!!i},fi.isError=Sa,fi.isFinite=function(e){return"number"==typeof e&&qn(e)},fi.isFunction=ba,fi.isInteger=Ea,fi.isLength=Pa,fi.isMap=ka,fi.isMatch=function(e,t){return e===t||ar(e,t,zo(t))},fi.isMatchWith=function(e,t,n){return n="function"==typeof n?n:o,ar(e,t,zo(t),n)},fi.isNaN=function(e){return Oa(e)&&e!=+e},fi.isNative=function(e){if(Yo(e))throw new Qe(a);return lr(e)},fi.isNil=function(e){return null==e},fi.isNull=function(e){return null===e},fi.isNumber=Oa,fi.isObject=Ca,fi.isObjectLike=Ra,fi.isPlainObject=Da,fi.isRegExp=Ia,fi.isSafeInteger=function(e){return Ea(e)&&e>=-L&&e<=L},fi.isSet=Aa,fi.isString=La,fi.isSymbol=Ba,fi.isTypedArray=Ma,fi.isUndefined=function(e){return e===o},fi.isWeakMap=function(e){return Ra(e)&&qo(e)==se},fi.isWeakSet=function(e){return Ra(e)&&Ji(e)==ae},fi.join=function(e,t){return null==e?"":Un.call(e,t)},fi.kebabCase=vl,fi.last=Ss,fi.lastIndexOf=function(e,t,n){var i=null==e?0:e.length;if(!i)return-1;var r=i;return n!==o&&(r=(r=ja(n))<0?Vn(i+r,0):Gn(r,i-1)),t==t?function(e,t,n){for(var i=n+1;i--;)if(e[i]===t)return i;return i}(e,t,r):an(e,cn,r,!0)},fi.lowerCase=yl,fi.lowerFirst=wl,fi.lt=Na,fi.lte=Ha,fi.max=function(e){return e&&e.length?qi(e,Ol,er):o},fi.maxBy=function(e,t){return e&&e.length?qi(e,No(t,2),er):o},fi.mean=function(e){return hn(e,Ol)},fi.meanBy=function(e,t){return hn(e,No(t,2))},fi.min=function(e){return e&&e.length?qi(e,Ol,dr):o},fi.minBy=function(e,t){return e&&e.length?qi(e,No(t,2),dr):o},fi.stubArray=Wl,fi.stubFalse=ql,fi.stubObject=function(){return{}},fi.stubString=function(){return""},fi.stubTrue=function(){return!0},fi.multiply=Xl,fi.nth=function(e,t){return e&&e.length?vr(e,ja(t)):o},fi.noConflict=function(){return At._===this&&(At._=gt),this},fi.noop=Bl,fi.now=Js,fi.pad=function(e,t,n){e=$a(e);var i=(t=ja(t))?In(e):0;if(!t||i>=t)return e;var r=(t-i)/2;return wo(Fn(r),n)+e+wo(zn(r),n)},fi.padEnd=function(e,t,n){e=$a(e);var i=(t=ja(t))?In(e):0;return t&&i<t?e+wo(t-i,n):e},fi.padStart=function(e,t,n){e=$a(e);var i=(t=ja(t))?In(e):0;return t&&i<t?wo(t-i,n)+e:e},fi.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Xn($a(e).replace(Be,""),t||0)},fi.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Zo(e,t,n)&&(t=n=o),n===o&&("boolean"==typeof t?(n=t,t=o):"boolean"==typeof e&&(n=e,e=o)),e===o&&t===o?(e=0,t=1):(e=Fa(e),t===o?(t=e,e=0):t=Fa(t)),e>t){var i=e;e=t,t=i}if(n||e%1||t%1){var r=Kn();return Gn(e+r*(t-e+kt("1e-"+((r+"").length-1))),t)}return _r(e,t)},fi.reduce=function(e,t,n){var i=va(e)?tn:fn,r=arguments.length<3;return i(e,No(t,4),n,r,Fi)},fi.reduceRight=function(e,t,n){var i=va(e)?nn:fn,r=arguments.length<3;return i(e,No(t,4),n,r,ji)},fi.repeat=function(e,t,n){return t=(n?Zo(e,t,n):t===o)?1:ja(t),Sr($a(e),t)},fi.replace=function(){var e=arguments,t=$a(e[0]);return e.length<3?t:t.replace(e[1],e[2])},fi.result=function(e,t,n){var i=-1,r=(t=Gr(t,e)).length;for(r||(r=1,e=o);++i<r;){var s=null==e?o:e[cs(t[i])];s===o&&(i=r,s=n),e=ba(s)?s.call(e):s}return e},fi.round=Kl,fi.runInContext=e,fi.sample=function(e){return(va(e)?Ei:Er)(e)},fi.size=function(e){if(null==e)return 0;if(wa(e))return La(e)?In(e):e.length;var t=qo(e);return t==K||t==ne?e.size:cr(e).length},fi.snakeCase=xl,fi.some=function(e,t,n){var i=va(e)?rn:Ir;return n&&Zo(e,t,n)&&(t=o),i(e,No(t,3))},fi.sortedIndex=function(e,t){return Ar(e,t)},fi.sortedIndexBy=function(e,t,n){return Lr(e,t,No(n,2))},fi.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var i=Ar(e,t);if(i<n&&pa(e[i],t))return i}return-1},fi.sortedLastIndex=function(e,t){return Ar(e,t,!0)},fi.sortedLastIndexBy=function(e,t,n){return Lr(e,t,No(n,2),!0)},fi.sortedLastIndexOf=function(e,t){if(null!=e&&e.length){var n=Ar(e,t,!0)-1;if(pa(e[n],t))return n}return-1},fi.startCase=Tl,fi.startsWith=function(e,t,n){return e=$a(e),n=null==n?0:Bi(ja(n),0,e.length),t=Nr(t),e.slice(n,n+t.length)==t},fi.subtract=Yl,fi.sum=function(e){return e&&e.length?gn(e,Ol):0},fi.sumBy=function(e,t){return e&&e.length?gn(e,No(t,2)):0},fi.template=function(e,t,n){var i=fi.templateSettings;n&&Zo(e,t,n)&&(t=o),e=$a(e),t=Za({},t,i,Co);var r,s,a=Za({},t.imports,i.imports,Co),l=rl(a),u=yn(a,l),c=0,h=t.interpolate||Ke,d="__p += '",p=nt((t.escape||Ke).source+"|"+h.source+"|"+(h===Re?We:Ke).source+"|"+(t.evaluate||Ke).source+"|$","g"),f="//# sourceURL="+("sourceURL"in t?t.sourceURL:"lodash.templateSources["+ ++Et+"]")+"\n";e.replace(p,function(t,n,i,o,a,l){return i||(i=o),d+=e.slice(c,l).replace(Ye,bn),n&&(r=!0,d+="' +\n__e("+n+") +\n'"),a&&(s=!0,d+="';\n"+a+";\n__p += '"),i&&(d+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),c=l+t.length,t}),d+="';\n";var g=t.variable;g||(d="with (obj) {\n"+d+"\n}\n"),d=(s?d.replace(we,""):d).replace(xe,"$1").replace(Te,"$1;"),d="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(r?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var m=El(function(){return Je(l,f+"return "+d).apply(o,u)});if(m.source=d,Sa(m))throw m;return m},fi.times=function(e,t){if((e=ja(e))<1||e>L)return[];var n=N,i=Gn(e,N);t=No(t),e-=N;for(var r=mn(i,t);++n<e;)t(n);return r},fi.toFinite=Fa,fi.toInteger=ja,fi.toLength=Wa,fi.toLower=function(e){return $a(e).toLowerCase()},fi.toNumber=qa,fi.toSafeInteger=function(e){return e?Bi(ja(e),-L,L):0===e?e:0},fi.toString=$a,fi.toUpper=function(e){return $a(e).toUpperCase()},fi.trim=function(e,t,n){if((e=$a(e))&&(n||t===o))return e.replace(Le,"");if(!e||!(t=Nr(t)))return e;var i=An(e),r=An(t);return Xr(i,xn(i,r),Tn(i,r)+1).join("")},fi.trimEnd=function(e,t,n){if((e=$a(e))&&(n||t===o))return e.replace(Me,"");if(!e||!(t=Nr(t)))return e;var i=An(e);return Xr(i,0,Tn(i,An(t))+1).join("")},fi.trimStart=function(e,t,n){if((e=$a(e))&&(n||t===o))return e.replace(Be,"");if(!e||!(t=Nr(t)))return e;var i=An(e);return Xr(i,xn(i,An(t))).join("")},fi.truncate=function(e,t){var n=C,i=R;if(Ca(t)){var r="separator"in t?t.separator:r;n="length"in t?ja(t.length):n,i="omission"in t?Nr(t.omission):i}var s=(e=$a(e)).length;if(En(e)){var a=An(e);s=a.length}if(n>=s)return e;var l=n-In(i);if(l<1)return i;var u=a?Xr(a,0,l).join(""):e.slice(0,l);if(r===o)return u+i;if(a&&(l+=u.length-l),Ia(r)){if(e.slice(l).search(r)){var c,h=u;for(r.global||(r=nt(r.source,$a(qe.exec(r))+"g")),r.lastIndex=0;c=r.exec(h);)var d=c.index;u=u.slice(0,d===o?l:d)}}else if(e.indexOf(Nr(r),l)!=l){var p=u.lastIndexOf(r);p>-1&&(u=u.slice(0,p))}return u+i},fi.unescape=function(e){return(e=$a(e))&&be.test(e)?e.replace(_e,Ln):e},fi.uniqueId=function(e){var t=++ht;return $a(e)+t},fi.upperCase=_l,fi.upperFirst=Sl,fi.each=$s,fi.eachRight=Vs,fi.first=ws,Ll(fi,(Zl={},Zi(fi,function(e,t){ct.call(fi.prototype,t)||(Zl[t]=e)}),Zl),{chain:!1}),fi.VERSION="4.17.5",Gt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){fi[e].placeholder=fi}),Gt(["drop","take"],function(e,t){yi.prototype[e]=function(n){n=n===o?1:Vn(ja(n),0);var i=this.__filtered__&&!t?new yi(this):this.clone();return i.__filtered__?i.__takeCount__=Gn(n,i.__takeCount__):i.__views__.push({size:Gn(n,N),type:e+(i.__dir__<0?"Right":"")}),i},yi.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Gt(["filter","map","takeWhile"],function(e,t){var n=t+1,i=n==D||3==n;yi.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:No(e,3),type:n}),t.__filtered__=t.__filtered__||i,t}}),Gt(["head","last"],function(e,t){var n="take"+(t?"Right":"");yi.prototype[e]=function(){return this[n](1).value()[0]}}),Gt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");yi.prototype[e]=function(){return this.__filtered__?new yi(this):this[n](1)}}),yi.prototype.compact=function(){return this.filter(Ol)},yi.prototype.find=function(e){return this.filter(e).head()},yi.prototype.findLast=function(e){return this.reverse().find(e)},yi.prototype.invokeMap=br(function(e,t){return"function"==typeof e?new yi(this):this.map(function(n){return rr(n,e,t)})}),yi.prototype.reject=function(e){return this.filter(la(No(e)))},yi.prototype.slice=function(e,t){e=ja(e);var n=this;return n.__filtered__&&(e>0||t<0)?new yi(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==o&&(n=(t=ja(t))<0?n.dropRight(-t):n.take(t-e)),n)},yi.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},yi.prototype.toArray=function(){return this.take(N)},Zi(yi.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),i=/^(?:head|last)$/.test(t),r=fi[i?"take"+("last"==t?"Right":""):t],s=i||/^find/.test(t);r&&(fi.prototype[t]=function(){var t=this.__wrapped__,a=i?[1]:arguments,l=t instanceof yi,u=a[0],c=l||va(t),h=function(e){var t=r.apply(fi,en([e],a));return i&&d?t[0]:t};c&&n&&"function"==typeof u&&1!=u.length&&(l=c=!1);var d=this.__chain__,p=!!this.__actions__.length,f=s&&!d,g=l&&!p;if(!s&&c){t=g?t:new yi(this);var m=e.apply(t,a);return m.__actions__.push({func:Fs,args:[h],thisArg:o}),new vi(m,d)}return f&&g?e.apply(this,a):(m=this.thru(h),f?i?m.value()[0]:m.value():m)})}),Gt(["pop","push","shift","sort","splice","unshift"],function(e){var t=ot[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",i=/^(?:pop|shift)$/.test(e);fi.prototype[e]=function(){var e=arguments;if(i&&!this.__chain__){var r=this.value();return t.apply(va(r)?r:[],e)}return this[n](function(n){return t.apply(va(n)?n:[],e)})}}),Zi(yi.prototype,function(e,t){var n=fi[t];if(n){var i=n.name+"";(oi[i]||(oi[i]=[])).push({name:t,func:n})}}),oi[go(o,y).name]=[{name:"wrapper",func:o}],yi.prototype.clone=function(){var e=new yi(this.__wrapped__);return e.__actions__=io(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=io(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=io(this.__views__),e},yi.prototype.reverse=function(){if(this.__filtered__){var e=new yi(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},yi.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=va(e),i=t<0,r=n?e.length:0,o=function(e,t,n){for(var i=-1,r=n.length;++i<r;){var o=n[i],s=o.size;switch(o.type){case"drop":e+=s;break;case"dropRight":t-=s;break;case"take":t=Gn(t,e+s);break;case"takeRight":e=Vn(e,t-s)}}return{start:e,end:t}}(0,r,this.__views__),s=o.start,a=o.end,l=a-s,u=i?a:s-1,c=this.__iteratees__,h=c.length,d=0,p=Gn(l,this.__takeCount__);if(!n||!i&&r==l&&p==l)return Wr(e,this.__actions__);var f=[];e:for(;l--&&d<p;){for(var g=-1,m=e[u+=t];++g<h;){var v=c[g],y=v.iteratee,w=v.type,x=y(m);if(w==I)m=x;else if(!x){if(w==D)continue e;break e}}f[d++]=m}return f},fi.prototype.at=js,fi.prototype.chain=function(){return zs(this)},fi.prototype.commit=function(){return new vi(this.value(),this.__chain__)},fi.prototype.next=function(){this.__values__===o&&(this.__values__=za(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?o:this.__values__[this.__index__++]}},fi.prototype.plant=function(e){for(var t,n=this;n instanceof mi;){var i=ds(n);i.__index__=0,i.__values__=o,t?r.__wrapped__=i:t=i;var r=i;n=n.__wrapped__}return r.__wrapped__=e,t},fi.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof yi){var t=e;return this.__actions__.length&&(t=new yi(this)),(t=t.reverse()).__actions__.push({func:Fs,args:[Cs],thisArg:o}),new vi(t,this.__chain__)}return this.thru(Cs)},fi.prototype.toJSON=fi.prototype.valueOf=fi.prototype.value=function(){return Wr(this.__wrapped__,this.__actions__)},fi.prototype.first=fi.prototype.head,Ht&&(fi.prototype[Ht]=function(){return this}),fi}();At._=Bn,(r=function(){return Bn}.call(t,n,t,i))===o||(i.exports=r)}).call(this)}).call(this,n(5),n(4)(e))},function(e,t,n){"use strict";n.r(t);var i=n(2),r=n.n(i),o=n(0),s=n.n(o);const a=Function.prototype.apply,l=new WeakMap;function u(e){return l.has(e)||l.set(e,{}),l.get(e)}var c=n(1);n.n(c)()(document).ready(e=>{let t={};function n(){console.log("error")}function i(t){const n=e.parseHTML(t.responseText);e("#navbar .previous").replaceWith(e(n).find(".previous")),e("#navbar .next").replaceWith(e(n).find(".next")),e("#navbar .toggle").replaceWith(e(n).find(".toggle")),e(".dlts_viewer_map").replaceWith(e(n).find(".dlts_viewer_map")),h.emit("viewer-newpage")}function o(e){const t=s.a.isFunction(e.success)?e.success:i;s.a.makeAjaxRequest({url:e.url,success:t,error:n,headers:{"X-PJAX":"1"}})}function l(t){const n=e(t);n.hasClass("active")&&o({url:n.attr("href"),success:i})}const c={},h=new class{constructor(e=null,t=console){const n=u(this);return n._events=new Set,n._callbacks={},n._console=t,n._maxListeners=null===e?null:parseInt(e,10),this}_addCallback(e,t,n,i){return this._getCallbacks(e).push({callback:t,context:n,weight:i}),this._getCallbacks(e).sort((e,t)=>e.weight>t.weight),this}_getCallbacks(e){return u(this)._callbacks[e]}_getCallbackIndex(e,t){return this._has(e)?this._getCallbacks(e).findIndex(e=>e.callback===t):null}_achieveMaxListener(e){return null!==u(this)._maxListeners&&u(this)._maxListeners<=this.listenersNumber(e)}_callbackIsExists(e,t,n){const i=this._getCallbackIndex(e,t),r=-1!==i?this._getCallbacks(e)[i]:void 0;return-1!==i&&r&&r.context===n}_has(e){return u(this)._events.has(e)}on(e,t,n=null,i=1){const r=u(this);if("function"!=typeof t)throw new TypeError(`${t} is not a function`);return this._has(e)?(this._achieveMaxListener(e)&&r._console.warn(`Max listeners (${r._maxListeners})`+` for event "${e}" is reached!`),this._callbackIsExists(...arguments)&&r._console.warn(`Event "${e}"`+` already has the callback ${t}.`)):(r._events.add(e),r._callbacks[e]=[]),this._addCallback(...arguments),this}once(e,t,n=null,i=1){const r=(...i)=>(this.off(e,r),a.call(t,n,i));return this.on(e,r,n,i)}off(e,t=null){const n=u(this);let i;return this._has(e)&&(null===t?(n._events.delete(e),n._callbacks[e]=null):-1!==(i=this._getCallbackIndex(e,t))&&(n._callbacks[e].splice(i,1),this.off(...arguments))),this}emit(e,...t){return this._has(e)&&this._getCallbacks(e).forEach(e=>a.call(e.callback,e.context,t)),this}clear(){const e=u(this);return e._events.clear(),e._callbacks={},this}listenersNumber(e){return this._has(e)?this._getCallbacks(e).length:null}};h.on("viewer-rotate",()=>{t.viewer.viewport.setRotation((t.viewer.viewport?t.viewer.viewport.getRotation():t.viewer.degrees||0)+90)}),h.on("viewer-metadata",()=>{e("body").toggleClass("pagemeta-hidden")}),h.on("viewer-thumbnails",()=>{const t=e("#navbar .button.thumbnails"),n=e(".dlts_viewer_map"),i=e("#thumbnails"),r="on"==t.attr("data-state")?"off":"on";t.attr("data-state",r),"on"===r?o({url:n.attr("data-thumbnails-url"),success:e=>{i.length&&i.removeClass("hidden").addClass("active").html(e.response)}}):i.removeClass("active").addClass("hidden").html("")}),h.on("viewer-zoomin",()=>{t.viewer.viewport.zoomBy(t.viewer.zoomPerClick/1),t.viewer.viewport.applyConstraints()}),h.on("viewer-zoomout",()=>{t.viewer.viewport.zoomBy(1/t.viewer.zoomPerClick),t.viewer.viewport.applyConstraints()}),h.on("viewer-fullscreen",()=>{const e=document.getElementById("page");s.a.isFullScreen()?s.a.exitFullScreen():s.a.requestFullScreen(e)}),h.on("viewer-next",()=>{l("#navbar .button.next")}),h.on("viewer-previous",()=>{l("#navbar .button.previous")}),h.on("viewer-toggle",()=>{l("#navbar .button.toggle")}),h.on("viewer-newpage",()=>{const n=e(".dlts_viewer_map"),i=s.a.extend(!0,c,n.data());let o={id:n.attr("id"),degrees:i.degrees,tileSources:i.tiles};return"double"===i.pagevView&&(o=r.a.assign({sequenceMode:!1,collectionMode:!0,collectionRows:1,collectionTileMargin:-278},o)),t.viewer&&(o.degrees=t.viewer.viewport.getRotation(),t.viewer.destroy()),t.viewer=s()(s.a.extend(!0,o,{immediateRender:!1,preserveViewport:!0,showRotationControl:!0,showNavigationControl:!1,gestureSettingsTouch:{pinchRotate:!0}})),t.viewer.addHandler("open",t=>{const n=e("#slider_value").attr("value"),r=i.sequence;n!==r&&e("#slider_value").attr("value",r)}),t.viewer}),h.on("viewer-slider-cahnge",()=>{const t=e(".dlts_viewer_map").data();o({url:t.type+"/"+t.identifier+"/"+e(".slider").val(),success:i})}),e("body").delegate(".button","click",function(t){t.preventDefault(),h.emit(e(this).attr("data-emmit"),this)}),e("#thumbnails").delegate("a","click",function(t){t.preventDefault(),o({url:e(this).attr("href"),success:i})}),e("body").delegate("select.language","change",function(t){o({url:e(this).find(":selected").attr("value"),success:t=>{const n=e(e.parseHTML(t.responseText)),i=n.find(".node-dlts-book").attr("dir");e("#main").attr("dir",i),e("#pagemeta").replaceWith(n.find("#pagemeta"))}})}),h.emit("viewer-newpage"),e(".slider").on("change",function(){h.emit("viewer-slider-cahnge",this.value)}),e(".slider").on("input",function(){e("#slider_current").text(this.value)})})},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,